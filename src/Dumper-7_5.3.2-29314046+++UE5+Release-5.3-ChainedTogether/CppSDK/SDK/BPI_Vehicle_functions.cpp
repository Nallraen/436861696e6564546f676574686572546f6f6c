#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_Vehicle

#include "Basic.hpp"

#include "BPI_Vehicle_classes.hpp"
#include "BPI_Vehicle_parameters.hpp"


namespace SDK
{

// Function BPI_Vehicle.BPI_Vehicle_C.AddImpulseToVehicle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Impulse                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Vehicle_C::AddImpulseToVehicle(const struct FVector& Impulse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Vehicle_C", "AddImpulseToVehicle");

	Params::BPI_Vehicle_C_AddImpulseToVehicle Parms{};

	Parms.Impulse = std::move(Impulse);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Vehicle.BPI_Vehicle_C.GetDriverSocket
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)

class UPrimitiveComponent* IBPI_Vehicle_C::GetDriverSocket()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Vehicle_C", "GetDriverSocket");

	Params::BPI_Vehicle_C_GetDriverSocket Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BPI_Vehicle.BPI_Vehicle_C.GetForwardRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         Rot                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_Vehicle_C::GetForwardRotation(struct FRotator* Rot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Vehicle_C", "GetForwardRotation");

	Params::BPI_Vehicle_C_GetForwardRotation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Rot != nullptr)
		*Rot = std::move(Parms.Rot);
}


// Function BPI_Vehicle.BPI_Vehicle_C.GetForwardSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Speed                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Vehicle_C::GetForwardSpeed(double* Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Vehicle_C", "GetForwardSpeed");

	Params::BPI_Vehicle_C_GetForwardSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Speed != nullptr)
		*Speed = Parms.Speed;
}


// Function BPI_Vehicle.BPI_Vehicle_C.GetRadialVelocityZ
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Vel                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Vehicle_C::GetRadialVelocityZ(double* Vel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Vehicle_C", "GetRadialVelocityZ");

	Params::BPI_Vehicle_C_GetRadialVelocityZ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Vel != nullptr)
		*Vel = Parms.Vel;
}


// Function BPI_Vehicle.BPI_Vehicle_C.GetRootMesh
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              Mesh                                                   (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_Vehicle_C::GetRootMesh(class UPrimitiveComponent** Mesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Vehicle_C", "GetRootMesh");

	Params::BPI_Vehicle_C_GetRootMesh Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Mesh != nullptr)
		*Mesh = Parms.Mesh;
}


// Function BPI_Vehicle.BPI_Vehicle_C.HorseGrounded
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Grounded                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Vehicle_C::HorseGrounded(bool* Grounded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Vehicle_C", "HorseGrounded");

	Params::BPI_Vehicle_C_HorseGrounded Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Grounded != nullptr)
		*Grounded = Parms.Grounded;
}


// Function BPI_Vehicle.BPI_Vehicle_C.IsCarosse
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Carosse                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Vehicle_C::IsCarosse(bool* Carosse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Vehicle_C", "IsCarosse");

	Params::BPI_Vehicle_C_IsCarosse Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Carosse != nullptr)
		*Carosse = Parms.Carosse;
}


// Function BPI_Vehicle.BPI_Vehicle_C.IsCarVisible
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Vehicle_C::IsCarVisible(bool* Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Vehicle_C", "IsCarVisible");

	Params::BPI_Vehicle_C_IsCarVisible Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Visible != nullptr)
		*Visible = Parms.Visible;
}


// Function BPI_Vehicle.BPI_Vehicle_C.IsPossessed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Possessed                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Vehicle_C::IsPossessed(bool* Possessed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Vehicle_C", "IsPossessed");

	Params::BPI_Vehicle_C_IsPossessed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Possessed != nullptr)
		*Possessed = Parms.Possessed;
}


// Function BPI_Vehicle.BPI_Vehicle_C.LeaveVehicle
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Vehicle_C::LeaveVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Vehicle_C", "LeaveVehicle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_Vehicle.BPI_Vehicle_C.RaceEnd
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Vehicle_C::RaceEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Vehicle_C", "RaceEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_Vehicle.BPI_Vehicle_C.ResetTransform
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Vehicle_C::ResetTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Vehicle_C", "ResetTransform");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_Vehicle.BPI_Vehicle_C.ResetVelocity
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Vehicle_C::ResetVelocity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Vehicle_C", "ResetVelocity");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_Vehicle.BPI_Vehicle_C.UnpossessVehicle
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Vehicle_C::UnpossessVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Vehicle_C", "UnpossessVehicle");

	UObject::ProcessEvent(Func, nullptr);
}

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Ventilo

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Ventilo.BP_Ventilo_C
// 0x0050 (0x02E8 - 0x0298)
class ABP_Ventilo_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        Audio;                                             // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cylinder;                                          // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UC_TickOptimizer_C*                     C_TickOptimizer;                                   // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Ventilo;                                           // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Frame;                                             // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        Speed;                                             // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxForce;                                          // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Ventilo(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Ventilo_C">();
	}
	static class ABP_Ventilo_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Ventilo_C>();
	}
};
static_assert(alignof(ABP_Ventilo_C) == 0x000008, "Wrong alignment on ABP_Ventilo_C");
static_assert(sizeof(ABP_Ventilo_C) == 0x0002E8, "Wrong size on ABP_Ventilo_C");
static_assert(offsetof(ABP_Ventilo_C, UberGraphFrame) == 0x000298, "Member 'ABP_Ventilo_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Ventilo_C, Audio) == 0x0002A0, "Member 'ABP_Ventilo_C::Audio' has a wrong offset!");
static_assert(offsetof(ABP_Ventilo_C, Arrow) == 0x0002A8, "Member 'ABP_Ventilo_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_Ventilo_C, Cylinder) == 0x0002B0, "Member 'ABP_Ventilo_C::Cylinder' has a wrong offset!");
static_assert(offsetof(ABP_Ventilo_C, C_TickOptimizer) == 0x0002B8, "Member 'ABP_Ventilo_C::C_TickOptimizer' has a wrong offset!");
static_assert(offsetof(ABP_Ventilo_C, Ventilo) == 0x0002C0, "Member 'ABP_Ventilo_C::Ventilo' has a wrong offset!");
static_assert(offsetof(ABP_Ventilo_C, Frame) == 0x0002C8, "Member 'ABP_Ventilo_C::Frame' has a wrong offset!");
static_assert(offsetof(ABP_Ventilo_C, DefaultSceneRoot) == 0x0002D0, "Member 'ABP_Ventilo_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Ventilo_C, Speed) == 0x0002D8, "Member 'ABP_Ventilo_C::Speed' has a wrong offset!");
static_assert(offsetof(ABP_Ventilo_C, MaxForce) == 0x0002E0, "Member 'ABP_Ventilo_C::MaxForce' has a wrong offset!");

}


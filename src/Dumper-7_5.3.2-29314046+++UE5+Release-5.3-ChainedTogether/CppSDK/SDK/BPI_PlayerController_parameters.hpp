#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_PlayerController

#include "Basic.hpp"

#include "E_ChoosenChar_structs.hpp"


namespace SDK::Params
{

// Function BPI_PlayerController.BPI_PlayerController_C.GetAudioDevices
// 0x0010 (0x0010 - 0x0000)
struct BPI_PlayerController_C_GetAudioDevices final
{
public:
	TArray<class FString>                         Devices;                                           // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(BPI_PlayerController_C_GetAudioDevices) == 0x000008, "Wrong alignment on BPI_PlayerController_C_GetAudioDevices");
static_assert(sizeof(BPI_PlayerController_C_GetAudioDevices) == 0x000010, "Wrong size on BPI_PlayerController_C_GetAudioDevices");
static_assert(offsetof(BPI_PlayerController_C_GetAudioDevices, Devices) == 0x000000, "Member 'BPI_PlayerController_C_GetAudioDevices::Devices' has a wrong offset!");

// Function BPI_PlayerController.BPI_PlayerController_C.GetControlledActor
// 0x0008 (0x0008 - 0x0000)
struct BPI_PlayerController_C_GetControlledActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerController_C_GetControlledActor) == 0x000008, "Wrong alignment on BPI_PlayerController_C_GetControlledActor");
static_assert(sizeof(BPI_PlayerController_C_GetControlledActor) == 0x000008, "Wrong size on BPI_PlayerController_C_GetControlledActor");
static_assert(offsetof(BPI_PlayerController_C_GetControlledActor, Actor) == 0x000000, "Member 'BPI_PlayerController_C_GetControlledActor::Actor' has a wrong offset!");

// Function BPI_PlayerController.BPI_PlayerController_C.PlayAudioComponent
// 0x0008 (0x0008 - 0x0000)
struct BPI_PlayerController_C_PlayAudioComponent final
{
public:
	class UAudioComponent*                        AudioComponent;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerController_C_PlayAudioComponent) == 0x000008, "Wrong alignment on BPI_PlayerController_C_PlayAudioComponent");
static_assert(sizeof(BPI_PlayerController_C_PlayAudioComponent) == 0x000008, "Wrong size on BPI_PlayerController_C_PlayAudioComponent");
static_assert(offsetof(BPI_PlayerController_C_PlayAudioComponent, AudioComponent) == 0x000000, "Member 'BPI_PlayerController_C_PlayAudioComponent::AudioComponent' has a wrong offset!");

// Function BPI_PlayerController.BPI_PlayerController_C.PlaySound
// 0x0008 (0x0008 - 0x0000)
struct BPI_PlayerController_C_PlaySound final
{
public:
	class USoundWave*                             Sound;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerController_C_PlaySound) == 0x000008, "Wrong alignment on BPI_PlayerController_C_PlaySound");
static_assert(sizeof(BPI_PlayerController_C_PlaySound) == 0x000008, "Wrong size on BPI_PlayerController_C_PlaySound");
static_assert(offsetof(BPI_PlayerController_C_PlaySound, Sound) == 0x000000, "Member 'BPI_PlayerController_C_PlaySound::Sound' has a wrong offset!");

// Function BPI_PlayerController.BPI_PlayerController_C.Rescue(Srv)
// 0x0010 (0x0010 - 0x0000)
struct BPI_PlayerController_C_Rescue_Srv_ final
{
public:
	class UPrimitiveComponent*                    RescueComponent;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          ExitingCar;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerController_C_Rescue_Srv_) == 0x000008, "Wrong alignment on BPI_PlayerController_C_Rescue_Srv_");
static_assert(sizeof(BPI_PlayerController_C_Rescue_Srv_) == 0x000010, "Wrong size on BPI_PlayerController_C_Rescue_Srv_");
static_assert(offsetof(BPI_PlayerController_C_Rescue_Srv_, RescueComponent) == 0x000000, "Member 'BPI_PlayerController_C_Rescue_Srv_::RescueComponent' has a wrong offset!");
static_assert(offsetof(BPI_PlayerController_C_Rescue_Srv_, ExitingCar) == 0x000008, "Member 'BPI_PlayerController_C_Rescue_Srv_::ExitingCar' has a wrong offset!");

// Function BPI_PlayerController.BPI_PlayerController_C.SendMessageClient
// 0x0010 (0x0010 - 0x0000)
struct BPI_PlayerController_C_SendMessageClient final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerController_C_SendMessageClient) == 0x000008, "Wrong alignment on BPI_PlayerController_C_SendMessageClient");
static_assert(sizeof(BPI_PlayerController_C_SendMessageClient) == 0x000010, "Wrong size on BPI_PlayerController_C_SendMessageClient");
static_assert(offsetof(BPI_PlayerController_C_SendMessageClient, Message) == 0x000000, "Member 'BPI_PlayerController_C_SendMessageClient::Message' has a wrong offset!");

// Function BPI_PlayerController.BPI_PlayerController_C.SetAudioDevice
// 0x0010 (0x0010 - 0x0000)
struct BPI_PlayerController_C_SetAudioDevice final
{
public:
	class FString                                 Device;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerController_C_SetAudioDevice) == 0x000008, "Wrong alignment on BPI_PlayerController_C_SetAudioDevice");
static_assert(sizeof(BPI_PlayerController_C_SetAudioDevice) == 0x000010, "Wrong size on BPI_PlayerController_C_SetAudioDevice");
static_assert(offsetof(BPI_PlayerController_C_SetAudioDevice, Device) == 0x000000, "Member 'BPI_PlayerController_C_SetAudioDevice::Device' has a wrong offset!");

// Function BPI_PlayerController.BPI_PlayerController_C.SetControlledPawn
// 0x0008 (0x0008 - 0x0000)
struct BPI_PlayerController_C_SetControlledPawn final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerController_C_SetControlledPawn) == 0x000008, "Wrong alignment on BPI_PlayerController_C_SetControlledPawn");
static_assert(sizeof(BPI_PlayerController_C_SetControlledPawn) == 0x000008, "Wrong size on BPI_PlayerController_C_SetControlledPawn");
static_assert(offsetof(BPI_PlayerController_C_SetControlledPawn, Actor) == 0x000000, "Member 'BPI_PlayerController_C_SetControlledPawn::Actor' has a wrong offset!");

// Function BPI_PlayerController.BPI_PlayerController_C.SetLocalMpChosenChar
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerController_C_SetLocalMpChosenChar final
{
public:
	E_ChoosenChar                                 Char;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerController_C_SetLocalMpChosenChar) == 0x000001, "Wrong alignment on BPI_PlayerController_C_SetLocalMpChosenChar");
static_assert(sizeof(BPI_PlayerController_C_SetLocalMpChosenChar) == 0x000001, "Wrong size on BPI_PlayerController_C_SetLocalMpChosenChar");
static_assert(offsetof(BPI_PlayerController_C_SetLocalMpChosenChar, Char) == 0x000000, "Member 'BPI_PlayerController_C_SetLocalMpChosenChar::Char' has a wrong offset!");

// Function BPI_PlayerController.BPI_PlayerController_C.ShowTchatUI
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerController_C_ShowTchatUI final
{
public:
	bool                                          RefreshTchat;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerController_C_ShowTchatUI) == 0x000001, "Wrong alignment on BPI_PlayerController_C_ShowTchatUI");
static_assert(sizeof(BPI_PlayerController_C_ShowTchatUI) == 0x000001, "Wrong size on BPI_PlayerController_C_ShowTchatUI");
static_assert(offsetof(BPI_PlayerController_C_ShowTchatUI, RefreshTchat) == 0x000000, "Member 'BPI_PlayerController_C_ShowTchatUI::RefreshTchat' has a wrong offset!");

// Function BPI_PlayerController.BPI_PlayerController_C.Trigger Moving Object
// 0x0008 (0x0008 - 0x0000)
struct BPI_PlayerController_C_Trigger_Moving_Object final
{
public:
	class ABP_MovingObject_C*                     MovingObject;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerController_C_Trigger_Moving_Object) == 0x000008, "Wrong alignment on BPI_PlayerController_C_Trigger_Moving_Object");
static_assert(sizeof(BPI_PlayerController_C_Trigger_Moving_Object) == 0x000008, "Wrong size on BPI_PlayerController_C_Trigger_Moving_Object");
static_assert(offsetof(BPI_PlayerController_C_Trigger_Moving_Object, MovingObject) == 0x000000, "Member 'BPI_PlayerController_C_Trigger_Moving_Object::MovingObject' has a wrong offset!");

// Function BPI_PlayerController.BPI_PlayerController_C.UpdateCanEscape
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerController_C_UpdateCanEscape final
{
public:
	bool                                          CanEscape;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerController_C_UpdateCanEscape) == 0x000001, "Wrong alignment on BPI_PlayerController_C_UpdateCanEscape");
static_assert(sizeof(BPI_PlayerController_C_UpdateCanEscape) == 0x000001, "Wrong size on BPI_PlayerController_C_UpdateCanEscape");
static_assert(offsetof(BPI_PlayerController_C_UpdateCanEscape, CanEscape) == 0x000000, "Member 'BPI_PlayerController_C_UpdateCanEscape::CanEscape' has a wrong offset!");

}


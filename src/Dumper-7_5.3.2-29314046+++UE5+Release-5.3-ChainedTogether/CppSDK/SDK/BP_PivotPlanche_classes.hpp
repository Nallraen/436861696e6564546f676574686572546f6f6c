#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PivotPlanche

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PivotPlanche.BP_PivotPlanche_C
// 0x0068 (0x0300 - 0x0298)
class ABP_PivotPlanche_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          Box1;                                              // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UC_TickOptimizer_C*                     C_TickOptimizer;                                   // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        SmoothedDamping;                                   // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DesiredDamping;                                    // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RepRot;                                            // 0x02D8(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        LocalRotationDelta;                                // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RotationDeltaTarget;                               // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_PivotPlanche(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void SetRotationDeltaTarget(double* Delta1);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PivotPlanche_C">();
	}
	static class ABP_PivotPlanche_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PivotPlanche_C>();
	}
};
static_assert(alignof(ABP_PivotPlanche_C) == 0x000008, "Wrong alignment on ABP_PivotPlanche_C");
static_assert(sizeof(ABP_PivotPlanche_C) == 0x000300, "Wrong size on ABP_PivotPlanche_C");
static_assert(offsetof(ABP_PivotPlanche_C, UberGraphFrame) == 0x000298, "Member 'ABP_PivotPlanche_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_PivotPlanche_C, Box1) == 0x0002A0, "Member 'ABP_PivotPlanche_C::Box1' has a wrong offset!");
static_assert(offsetof(ABP_PivotPlanche_C, Box) == 0x0002A8, "Member 'ABP_PivotPlanche_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_PivotPlanche_C, C_TickOptimizer) == 0x0002B0, "Member 'ABP_PivotPlanche_C::C_TickOptimizer' has a wrong offset!");
static_assert(offsetof(ABP_PivotPlanche_C, StaticMesh) == 0x0002B8, "Member 'ABP_PivotPlanche_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_PivotPlanche_C, DefaultSceneRoot) == 0x0002C0, "Member 'ABP_PivotPlanche_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_PivotPlanche_C, SmoothedDamping) == 0x0002C8, "Member 'ABP_PivotPlanche_C::SmoothedDamping' has a wrong offset!");
static_assert(offsetof(ABP_PivotPlanche_C, DesiredDamping) == 0x0002D0, "Member 'ABP_PivotPlanche_C::DesiredDamping' has a wrong offset!");
static_assert(offsetof(ABP_PivotPlanche_C, RepRot) == 0x0002D8, "Member 'ABP_PivotPlanche_C::RepRot' has a wrong offset!");
static_assert(offsetof(ABP_PivotPlanche_C, LocalRotationDelta) == 0x0002F0, "Member 'ABP_PivotPlanche_C::LocalRotationDelta' has a wrong offset!");
static_assert(offsetof(ABP_PivotPlanche_C, RotationDeltaTarget) == 0x0002F8, "Member 'ABP_PivotPlanche_C::RotationDeltaTarget' has a wrong offset!");

}


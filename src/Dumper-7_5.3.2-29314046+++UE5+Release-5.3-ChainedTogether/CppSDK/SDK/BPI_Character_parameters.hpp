#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_Character

#include "Basic.hpp"

#include "E_ChoosenChar_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ALS_MovementState_structs.hpp"


namespace SDK::Params
{

// Function BPI_Character.BPI_Character_C.ActivateCollisions
// 0x0001 (0x0001 - 0x0000)
struct BPI_Character_C_ActivateCollisions final
{
public:
	bool                                          Active;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_ActivateCollisions) == 0x000001, "Wrong alignment on BPI_Character_C_ActivateCollisions");
static_assert(sizeof(BPI_Character_C_ActivateCollisions) == 0x000001, "Wrong size on BPI_Character_C_ActivateCollisions");
static_assert(offsetof(BPI_Character_C_ActivateCollisions, Active) == 0x000000, "Member 'BPI_Character_C_ActivateCollisions::Active' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.Add Character Constraint
// 0x0008 (0x0008 - 0x0000)
struct BPI_Character_C_Add_Character_Constraint final
{
public:
	class AActor*                                 Constraint;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_Add_Character_Constraint) == 0x000008, "Wrong alignment on BPI_Character_C_Add_Character_Constraint");
static_assert(sizeof(BPI_Character_C_Add_Character_Constraint) == 0x000008, "Wrong size on BPI_Character_C_Add_Character_Constraint");
static_assert(offsetof(BPI_Character_C_Add_Character_Constraint, Constraint) == 0x000000, "Member 'BPI_Character_C_Add_Character_Constraint::Constraint' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.AddAttachedCharacter
// 0x0008 (0x0008 - 0x0000)
struct BPI_Character_C_AddAttachedCharacter final
{
public:
	class APawn*                                  Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_AddAttachedCharacter) == 0x000008, "Wrong alignment on BPI_Character_C_AddAttachedCharacter");
static_assert(sizeof(BPI_Character_C_AddAttachedCharacter) == 0x000008, "Wrong size on BPI_Character_C_AddAttachedCharacter");
static_assert(offsetof(BPI_Character_C_AddAttachedCharacter, Character) == 0x000000, "Member 'BPI_Character_C_AddAttachedCharacter::Character' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.AddChainPhysic
// 0x0010 (0x0010 - 0x0000)
struct BPI_Character_C_AddChainPhysic final
{
public:
	class UObject*                                Physics;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Comp;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_AddChainPhysic) == 0x000008, "Wrong alignment on BPI_Character_C_AddChainPhysic");
static_assert(sizeof(BPI_Character_C_AddChainPhysic) == 0x000010, "Wrong size on BPI_Character_C_AddChainPhysic");
static_assert(offsetof(BPI_Character_C_AddChainPhysic, Physics) == 0x000000, "Member 'BPI_Character_C_AddChainPhysic::Physics' has a wrong offset!");
static_assert(offsetof(BPI_Character_C_AddChainPhysic, Comp) == 0x000008, "Member 'BPI_Character_C_AddChainPhysic::Comp' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.AddChainSocket
// 0x0008 (0x0008 - 0x0000)
struct BPI_Character_C_AddChainSocket final
{
public:
	class UPrimitiveComponent*                    Socket;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_AddChainSocket) == 0x000008, "Wrong alignment on BPI_Character_C_AddChainSocket");
static_assert(sizeof(BPI_Character_C_AddChainSocket) == 0x000008, "Wrong size on BPI_Character_C_AddChainSocket");
static_assert(offsetof(BPI_Character_C_AddChainSocket, Socket) == 0x000000, "Member 'BPI_Character_C_AddChainSocket::Socket' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.AddConnectedChain
// 0x0008 (0x0008 - 0x0000)
struct BPI_Character_C_AddConnectedChain final
{
public:
	class AActor*                                 Chain;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_AddConnectedChain) == 0x000008, "Wrong alignment on BPI_Character_C_AddConnectedChain");
static_assert(sizeof(BPI_Character_C_AddConnectedChain) == 0x000008, "Wrong size on BPI_Character_C_AddConnectedChain");
static_assert(offsetof(BPI_Character_C_AddConnectedChain, Chain) == 0x000000, "Member 'BPI_Character_C_AddConnectedChain::Chain' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.AddForce
// 0x0030 (0x0030 - 0x0000)
struct BPI_Character_C_AddForce final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MakeSlide;                                         // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C89[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        StabilizeSpeed;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PushedByTrain;                                     // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShuffleFixToGround;                                // 0x0029(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_AddForce) == 0x000008, "Wrong alignment on BPI_Character_C_AddForce");
static_assert(sizeof(BPI_Character_C_AddForce) == 0x000030, "Wrong size on BPI_Character_C_AddForce");
static_assert(offsetof(BPI_Character_C_AddForce, Vector) == 0x000000, "Member 'BPI_Character_C_AddForce::Vector' has a wrong offset!");
static_assert(offsetof(BPI_Character_C_AddForce, MakeSlide) == 0x000018, "Member 'BPI_Character_C_AddForce::MakeSlide' has a wrong offset!");
static_assert(offsetof(BPI_Character_C_AddForce, StabilizeSpeed) == 0x000020, "Member 'BPI_Character_C_AddForce::StabilizeSpeed' has a wrong offset!");
static_assert(offsetof(BPI_Character_C_AddForce, PushedByTrain) == 0x000028, "Member 'BPI_Character_C_AddForce::PushedByTrain' has a wrong offset!");
static_assert(offsetof(BPI_Character_C_AddForce, ShuffleFixToGround) == 0x000029, "Member 'BPI_Character_C_AddForce::ShuffleFixToGround' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.AddImpulseToCar
// 0x0018 (0x0018 - 0x0000)
struct BPI_Character_C_AddImpulseToCar final
{
public:
	struct FVector                                Impulse;                                           // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_AddImpulseToCar) == 0x000008, "Wrong alignment on BPI_Character_C_AddImpulseToCar");
static_assert(sizeof(BPI_Character_C_AddImpulseToCar) == 0x000018, "Wrong size on BPI_Character_C_AddImpulseToCar");
static_assert(offsetof(BPI_Character_C_AddImpulseToCar, Impulse) == 0x000000, "Member 'BPI_Character_C_AddImpulseToCar::Impulse' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.AddImpulseToCharacter
// 0x0020 (0x0020 - 0x0000)
struct BPI_Character_C_AddImpulseToCharacter final
{
public:
	struct FVector                                Impulse;                                           // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OverrideVelocityZ;                                 // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StopClimb;                                         // 0x0019(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShuffleAirControl;                                 // 0x001A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreDoOnce;                                      // 0x001B(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PushedByObstacle;                                  // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_AddImpulseToCharacter) == 0x000008, "Wrong alignment on BPI_Character_C_AddImpulseToCharacter");
static_assert(sizeof(BPI_Character_C_AddImpulseToCharacter) == 0x000020, "Wrong size on BPI_Character_C_AddImpulseToCharacter");
static_assert(offsetof(BPI_Character_C_AddImpulseToCharacter, Impulse) == 0x000000, "Member 'BPI_Character_C_AddImpulseToCharacter::Impulse' has a wrong offset!");
static_assert(offsetof(BPI_Character_C_AddImpulseToCharacter, OverrideVelocityZ) == 0x000018, "Member 'BPI_Character_C_AddImpulseToCharacter::OverrideVelocityZ' has a wrong offset!");
static_assert(offsetof(BPI_Character_C_AddImpulseToCharacter, StopClimb) == 0x000019, "Member 'BPI_Character_C_AddImpulseToCharacter::StopClimb' has a wrong offset!");
static_assert(offsetof(BPI_Character_C_AddImpulseToCharacter, ShuffleAirControl) == 0x00001A, "Member 'BPI_Character_C_AddImpulseToCharacter::ShuffleAirControl' has a wrong offset!");
static_assert(offsetof(BPI_Character_C_AddImpulseToCharacter, IgnoreDoOnce) == 0x00001B, "Member 'BPI_Character_C_AddImpulseToCharacter::IgnoreDoOnce' has a wrong offset!");
static_assert(offsetof(BPI_Character_C_AddImpulseToCharacter, PushedByObstacle) == 0x00001C, "Member 'BPI_Character_C_AddImpulseToCharacter::PushedByObstacle' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.AddWaterVolume
// 0x0001 (0x0001 - 0x0000)
struct BPI_Character_C_AddWaterVolume final
{
public:
	bool                                          Remove;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_AddWaterVolume) == 0x000001, "Wrong alignment on BPI_Character_C_AddWaterVolume");
static_assert(sizeof(BPI_Character_C_AddWaterVolume) == 0x000001, "Wrong size on BPI_Character_C_AddWaterVolume");
static_assert(offsetof(BPI_Character_C_AddWaterVolume, Remove) == 0x000000, "Member 'BPI_Character_C_AddWaterVolume::Remove' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.AnulateCharacterVelocity
// 0x0008 (0x0008 - 0x0000)
struct BPI_Character_C_AnulateCharacterVelocity final
{
public:
	double                                        Time;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_AnulateCharacterVelocity) == 0x000008, "Wrong alignment on BPI_Character_C_AnulateCharacterVelocity");
static_assert(sizeof(BPI_Character_C_AnulateCharacterVelocity) == 0x000008, "Wrong size on BPI_Character_C_AnulateCharacterVelocity");
static_assert(offsetof(BPI_Character_C_AnulateCharacterVelocity, Time) == 0x000000, "Member 'BPI_Character_C_AnulateCharacterVelocity::Time' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.BeAttractedBySun
// 0x0008 (0x0008 - 0x0000)
struct BPI_Character_C_BeAttractedBySun final
{
public:
	class UPrimitiveComponent*                    SunMesh;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_BeAttractedBySun) == 0x000008, "Wrong alignment on BPI_Character_C_BeAttractedBySun");
static_assert(sizeof(BPI_Character_C_BeAttractedBySun) == 0x000008, "Wrong size on BPI_Character_C_BeAttractedBySun");
static_assert(offsetof(BPI_Character_C_BeAttractedBySun, SunMesh) == 0x000000, "Member 'BPI_Character_C_BeAttractedBySun::SunMesh' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.BeginCinematic
// 0x0060 (0x0060 - 0x0000)
struct BPI_Character_C_BeginCinematic final
{
public:
	struct FTransform                             BeginTransform;                                    // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_BeginCinematic) == 0x000010, "Wrong alignment on BPI_Character_C_BeginCinematic");
static_assert(sizeof(BPI_Character_C_BeginCinematic) == 0x000060, "Wrong size on BPI_Character_C_BeginCinematic");
static_assert(offsetof(BPI_Character_C_BeginCinematic, BeginTransform) == 0x000000, "Member 'BPI_Character_C_BeginCinematic::BeginTransform' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.BeginPullOtherCharacter
// 0x0010 (0x0010 - 0x0000)
struct BPI_Character_C_BeginPullOtherCharacter final
{
public:
	bool                                          BeginPull;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C8A[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OtherCharacter;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_BeginPullOtherCharacter) == 0x000008, "Wrong alignment on BPI_Character_C_BeginPullOtherCharacter");
static_assert(sizeof(BPI_Character_C_BeginPullOtherCharacter) == 0x000010, "Wrong size on BPI_Character_C_BeginPullOtherCharacter");
static_assert(offsetof(BPI_Character_C_BeginPullOtherCharacter, BeginPull) == 0x000000, "Member 'BPI_Character_C_BeginPullOtherCharacter::BeginPull' has a wrong offset!");
static_assert(offsetof(BPI_Character_C_BeginPullOtherCharacter, OtherCharacter) == 0x000008, "Member 'BPI_Character_C_BeginPullOtherCharacter::OtherCharacter' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.ChangeCurrentVehicle
// 0x0008 (0x0008 - 0x0000)
struct BPI_Character_C_ChangeCurrentVehicle final
{
public:
	class AActor*                                 Vehicle;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_ChangeCurrentVehicle) == 0x000008, "Wrong alignment on BPI_Character_C_ChangeCurrentVehicle");
static_assert(sizeof(BPI_Character_C_ChangeCurrentVehicle) == 0x000008, "Wrong size on BPI_Character_C_ChangeCurrentVehicle");
static_assert(offsetof(BPI_Character_C_ChangeCurrentVehicle, Vehicle) == 0x000000, "Member 'BPI_Character_C_ChangeCurrentVehicle::Vehicle' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.Character Bounce
// 0x0008 (0x0008 - 0x0000)
struct BPI_Character_C_Character_Bounce final
{
public:
	double                                        Force;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_Character_Bounce) == 0x000008, "Wrong alignment on BPI_Character_C_Character_Bounce");
static_assert(sizeof(BPI_Character_C_Character_Bounce) == 0x000008, "Wrong size on BPI_Character_C_Character_Bounce");
static_assert(offsetof(BPI_Character_C_Character_Bounce, Force) == 0x000000, "Member 'BPI_Character_C_Character_Bounce::Force' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.Get Belt Fall Cam Loc Rot
// 0x0030 (0x0030 - 0x0000)
struct BPI_Character_C_Get_Belt_Fall_Cam_Loc_Rot final
{
public:
	struct FVector                                Loc;                                               // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rot;                                               // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_Character_C_Get_Belt_Fall_Cam_Loc_Rot) == 0x000008, "Wrong alignment on BPI_Character_C_Get_Belt_Fall_Cam_Loc_Rot");
static_assert(sizeof(BPI_Character_C_Get_Belt_Fall_Cam_Loc_Rot) == 0x000030, "Wrong size on BPI_Character_C_Get_Belt_Fall_Cam_Loc_Rot");
static_assert(offsetof(BPI_Character_C_Get_Belt_Fall_Cam_Loc_Rot, Loc) == 0x000000, "Member 'BPI_Character_C_Get_Belt_Fall_Cam_Loc_Rot::Loc' has a wrong offset!");
static_assert(offsetof(BPI_Character_C_Get_Belt_Fall_Cam_Loc_Rot, Rot) == 0x000018, "Member 'BPI_Character_C_Get_Belt_Fall_Cam_Loc_Rot::Rot' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.GetAnimVariables
// 0x0080 (0x0080 - 0x0000)
struct BPI_Character_C_GetAnimVariables final
{
public:
	bool                                          Jump;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Fall;                                              // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C8B[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RadialVelocity;                                    // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              MoveInput;                                         // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Climb;                                             // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Pull;                                              // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C8C[0x6];                                     // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 PulledCharacter;                                   // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDriving;                                         // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C8D[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DriveLeftHand;                                     // 0x0048(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DriveRightHand;                                    // 0x0060(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LookAround;                                        // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_GetAnimVariables) == 0x000008, "Wrong alignment on BPI_Character_C_GetAnimVariables");
static_assert(sizeof(BPI_Character_C_GetAnimVariables) == 0x000080, "Wrong size on BPI_Character_C_GetAnimVariables");
static_assert(offsetof(BPI_Character_C_GetAnimVariables, Jump) == 0x000000, "Member 'BPI_Character_C_GetAnimVariables::Jump' has a wrong offset!");
static_assert(offsetof(BPI_Character_C_GetAnimVariables, Fall) == 0x000001, "Member 'BPI_Character_C_GetAnimVariables::Fall' has a wrong offset!");
static_assert(offsetof(BPI_Character_C_GetAnimVariables, RadialVelocity) == 0x000008, "Member 'BPI_Character_C_GetAnimVariables::RadialVelocity' has a wrong offset!");
static_assert(offsetof(BPI_Character_C_GetAnimVariables, MoveInput) == 0x000020, "Member 'BPI_Character_C_GetAnimVariables::MoveInput' has a wrong offset!");
static_assert(offsetof(BPI_Character_C_GetAnimVariables, Climb) == 0x000030, "Member 'BPI_Character_C_GetAnimVariables::Climb' has a wrong offset!");
static_assert(offsetof(BPI_Character_C_GetAnimVariables, Pull) == 0x000031, "Member 'BPI_Character_C_GetAnimVariables::Pull' has a wrong offset!");
static_assert(offsetof(BPI_Character_C_GetAnimVariables, PulledCharacter) == 0x000038, "Member 'BPI_Character_C_GetAnimVariables::PulledCharacter' has a wrong offset!");
static_assert(offsetof(BPI_Character_C_GetAnimVariables, IsDriving) == 0x000040, "Member 'BPI_Character_C_GetAnimVariables::IsDriving' has a wrong offset!");
static_assert(offsetof(BPI_Character_C_GetAnimVariables, DriveLeftHand) == 0x000048, "Member 'BPI_Character_C_GetAnimVariables::DriveLeftHand' has a wrong offset!");
static_assert(offsetof(BPI_Character_C_GetAnimVariables, DriveRightHand) == 0x000060, "Member 'BPI_Character_C_GetAnimVariables::DriveRightHand' has a wrong offset!");
static_assert(offsetof(BPI_Character_C_GetAnimVariables, LookAround) == 0x000078, "Member 'BPI_Character_C_GetAnimVariables::LookAround' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.GetAttachedCharacters
// 0x0010 (0x0010 - 0x0000)
struct BPI_Character_C_GetAttachedCharacters final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(BPI_Character_C_GetAttachedCharacters) == 0x000008, "Wrong alignment on BPI_Character_C_GetAttachedCharacters");
static_assert(sizeof(BPI_Character_C_GetAttachedCharacters) == 0x000010, "Wrong size on BPI_Character_C_GetAttachedCharacters");
static_assert(offsetof(BPI_Character_C_GetAttachedCharacters, ReturnValue) == 0x000000, "Member 'BPI_Character_C_GetAttachedCharacters::ReturnValue' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.GetBaseLocation
// 0x0018 (0x0018 - 0x0000)
struct BPI_Character_C_GetBaseLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_GetBaseLocation) == 0x000008, "Wrong alignment on BPI_Character_C_GetBaseLocation");
static_assert(sizeof(BPI_Character_C_GetBaseLocation) == 0x000018, "Wrong size on BPI_Character_C_GetBaseLocation");
static_assert(offsetof(BPI_Character_C_GetBaseLocation, Location) == 0x000000, "Member 'BPI_Character_C_GetBaseLocation::Location' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.GetBeltLocation
// 0x0018 (0x0018 - 0x0000)
struct BPI_Character_C_GetBeltLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_GetBeltLocation) == 0x000008, "Wrong alignment on BPI_Character_C_GetBeltLocation");
static_assert(sizeof(BPI_Character_C_GetBeltLocation) == 0x000018, "Wrong size on BPI_Character_C_GetBeltLocation");
static_assert(offsetof(BPI_Character_C_GetBeltLocation, Location) == 0x000000, "Member 'BPI_Character_C_GetBeltLocation::Location' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.GetBeltSocket
// 0x0008 (0x0008 - 0x0000)
struct BPI_Character_C_GetBeltSocket final
{
public:
	class USceneComponent*                        Comp;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_GetBeltSocket) == 0x000008, "Wrong alignment on BPI_Character_C_GetBeltSocket");
static_assert(sizeof(BPI_Character_C_GetBeltSocket) == 0x000008, "Wrong size on BPI_Character_C_GetBeltSocket");
static_assert(offsetof(BPI_Character_C_GetBeltSocket, Comp) == 0x000000, "Member 'BPI_Character_C_GetBeltSocket::Comp' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.GetCapsuleBase
// 0x0008 (0x0008 - 0x0000)
struct BPI_Character_C_GetCapsuleBase final
{
public:
	class USphereComponent*                       base;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_GetCapsuleBase) == 0x000008, "Wrong alignment on BPI_Character_C_GetCapsuleBase");
static_assert(sizeof(BPI_Character_C_GetCapsuleBase) == 0x000008, "Wrong size on BPI_Character_C_GetCapsuleBase");
static_assert(offsetof(BPI_Character_C_GetCapsuleBase, base) == 0x000000, "Member 'BPI_Character_C_GetCapsuleBase::base' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.GetCapsuleComponent
// 0x0008 (0x0008 - 0x0000)
struct BPI_Character_C_GetCapsuleComponent final
{
public:
	class UCapsuleComponent*                      Capsule;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_GetCapsuleComponent) == 0x000008, "Wrong alignment on BPI_Character_C_GetCapsuleComponent");
static_assert(sizeof(BPI_Character_C_GetCapsuleComponent) == 0x000008, "Wrong size on BPI_Character_C_GetCapsuleComponent");
static_assert(offsetof(BPI_Character_C_GetCapsuleComponent, Capsule) == 0x000000, "Member 'BPI_Character_C_GetCapsuleComponent::Capsule' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.GetCapsuleLocation
// 0x0018 (0x0018 - 0x0000)
struct BPI_Character_C_GetCapsuleLocation final
{
public:
	struct FVector                                NewParam;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_GetCapsuleLocation) == 0x000008, "Wrong alignment on BPI_Character_C_GetCapsuleLocation");
static_assert(sizeof(BPI_Character_C_GetCapsuleLocation) == 0x000018, "Wrong size on BPI_Character_C_GetCapsuleLocation");
static_assert(offsetof(BPI_Character_C_GetCapsuleLocation, NewParam) == 0x000000, "Member 'BPI_Character_C_GetCapsuleLocation::NewParam' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.GetCapsuleRotation
// 0x0018 (0x0018 - 0x0000)
struct BPI_Character_C_GetCapsuleRotation final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_Character_C_GetCapsuleRotation) == 0x000008, "Wrong alignment on BPI_Character_C_GetCapsuleRotation");
static_assert(sizeof(BPI_Character_C_GetCapsuleRotation) == 0x000018, "Wrong size on BPI_Character_C_GetCapsuleRotation");
static_assert(offsetof(BPI_Character_C_GetCapsuleRotation, Rotation) == 0x000000, "Member 'BPI_Character_C_GetCapsuleRotation::Rotation' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.GetCharacter
// 0x0001 (0x0001 - 0x0000)
struct BPI_Character_C_GetCharacter final
{
public:
	E_ChoosenChar                                 Character;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_GetCharacter) == 0x000001, "Wrong alignment on BPI_Character_C_GetCharacter");
static_assert(sizeof(BPI_Character_C_GetCharacter) == 0x000001, "Wrong size on BPI_Character_C_GetCharacter");
static_assert(offsetof(BPI_Character_C_GetCharacter, Character) == 0x000000, "Member 'BPI_Character_C_GetCharacter::Character' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.GetConnectedChains
// 0x0010 (0x0010 - 0x0000)
struct BPI_Character_C_GetConnectedChains final
{
public:
	TArray<class AActor*>                         Chains;                                            // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(BPI_Character_C_GetConnectedChains) == 0x000008, "Wrong alignment on BPI_Character_C_GetConnectedChains");
static_assert(sizeof(BPI_Character_C_GetConnectedChains) == 0x000010, "Wrong size on BPI_Character_C_GetConnectedChains");
static_assert(offsetof(BPI_Character_C_GetConnectedChains, Chains) == 0x000000, "Member 'BPI_Character_C_GetConnectedChains::Chains' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.GetCurrentVehicle
// 0x0008 (0x0008 - 0x0000)
struct BPI_Character_C_GetCurrentVehicle final
{
public:
	class AActor*                                 Vehicle;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_GetCurrentVehicle) == 0x000008, "Wrong alignment on BPI_Character_C_GetCurrentVehicle");
static_assert(sizeof(BPI_Character_C_GetCurrentVehicle) == 0x000008, "Wrong size on BPI_Character_C_GetCurrentVehicle");
static_assert(offsetof(BPI_Character_C_GetCurrentVehicle, Vehicle) == 0x000000, "Member 'BPI_Character_C_GetCurrentVehicle::Vehicle' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.GetFakeChainSocket
// 0x0008 (0x0008 - 0x0000)
struct BPI_Character_C_GetFakeChainSocket final
{
public:
	class USceneComponent*                        Socket;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_GetFakeChainSocket) == 0x000008, "Wrong alignment on BPI_Character_C_GetFakeChainSocket");
static_assert(sizeof(BPI_Character_C_GetFakeChainSocket) == 0x000008, "Wrong size on BPI_Character_C_GetFakeChainSocket");
static_assert(offsetof(BPI_Character_C_GetFakeChainSocket, Socket) == 0x000000, "Member 'BPI_Character_C_GetFakeChainSocket::Socket' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.GetHandLocation
// 0x0018 (0x0018 - 0x0000)
struct BPI_Character_C_GetHandLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_GetHandLocation) == 0x000008, "Wrong alignment on BPI_Character_C_GetHandLocation");
static_assert(sizeof(BPI_Character_C_GetHandLocation) == 0x000018, "Wrong size on BPI_Character_C_GetHandLocation");
static_assert(offsetof(BPI_Character_C_GetHandLocation, Location) == 0x000000, "Member 'BPI_Character_C_GetHandLocation::Location' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.GetIsDetectableByPlacingBlocks
// 0x0001 (0x0001 - 0x0000)
struct BPI_Character_C_GetIsDetectableByPlacingBlocks final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_GetIsDetectableByPlacingBlocks) == 0x000001, "Wrong alignment on BPI_Character_C_GetIsDetectableByPlacingBlocks");
static_assert(sizeof(BPI_Character_C_GetIsDetectableByPlacingBlocks) == 0x000001, "Wrong size on BPI_Character_C_GetIsDetectableByPlacingBlocks");
static_assert(offsetof(BPI_Character_C_GetIsDetectableByPlacingBlocks, ReturnValue) == 0x000000, "Member 'BPI_Character_C_GetIsDetectableByPlacingBlocks::ReturnValue' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.GetLastUpdateRotation
// 0x0018 (0x0018 - 0x0000)
struct BPI_Character_C_GetLastUpdateRotation final
{
public:
	struct FRotator                               Rot;                                               // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_Character_C_GetLastUpdateRotation) == 0x000008, "Wrong alignment on BPI_Character_C_GetLastUpdateRotation");
static_assert(sizeof(BPI_Character_C_GetLastUpdateRotation) == 0x000018, "Wrong size on BPI_Character_C_GetLastUpdateRotation");
static_assert(offsetof(BPI_Character_C_GetLastUpdateRotation, Rot) == 0x000000, "Member 'BPI_Character_C_GetLastUpdateRotation::Rot' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.GetMovementState
// 0x0001 (0x0001 - 0x0000)
struct BPI_Character_C_GetMovementState final
{
public:
	EALS_MovementState                            State;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_GetMovementState) == 0x000001, "Wrong alignment on BPI_Character_C_GetMovementState");
static_assert(sizeof(BPI_Character_C_GetMovementState) == 0x000001, "Wrong size on BPI_Character_C_GetMovementState");
static_assert(offsetof(BPI_Character_C_GetMovementState, State) == 0x000000, "Member 'BPI_Character_C_GetMovementState::State' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.GetSkeletalMesh
// 0x0008 (0x0008 - 0x0000)
struct BPI_Character_C_GetSkeletalMesh final
{
public:
	class USkeletalMeshComponent*                 SKM;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_GetSkeletalMesh) == 0x000008, "Wrong alignment on BPI_Character_C_GetSkeletalMesh");
static_assert(sizeof(BPI_Character_C_GetSkeletalMesh) == 0x000008, "Wrong size on BPI_Character_C_GetSkeletalMesh");
static_assert(offsetof(BPI_Character_C_GetSkeletalMesh, SKM) == 0x000000, "Member 'BPI_Character_C_GetSkeletalMesh::SKM' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.GetWalkMagnitude
// 0x0008 (0x0008 - 0x0000)
struct BPI_Character_C_GetWalkMagnitude final
{
public:
	double                                        Magnitude;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_GetWalkMagnitude) == 0x000008, "Wrong alignment on BPI_Character_C_GetWalkMagnitude");
static_assert(sizeof(BPI_Character_C_GetWalkMagnitude) == 0x000008, "Wrong size on BPI_Character_C_GetWalkMagnitude");
static_assert(offsetof(BPI_Character_C_GetWalkMagnitude, Magnitude) == 0x000000, "Member 'BPI_Character_C_GetWalkMagnitude::Magnitude' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.IsBeingAttracted
// 0x0001 (0x0001 - 0x0000)
struct BPI_Character_C_IsBeingAttracted final
{
public:
	bool                                          Attracted;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_IsBeingAttracted) == 0x000001, "Wrong alignment on BPI_Character_C_IsBeingAttracted");
static_assert(sizeof(BPI_Character_C_IsBeingAttracted) == 0x000001, "Wrong size on BPI_Character_C_IsBeingAttracted");
static_assert(offsetof(BPI_Character_C_IsBeingAttracted, Attracted) == 0x000000, "Member 'BPI_Character_C_IsBeingAttracted::Attracted' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.IsChained
// 0x0001 (0x0001 - 0x0000)
struct BPI_Character_C_IsChained final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_IsChained) == 0x000001, "Wrong alignment on BPI_Character_C_IsChained");
static_assert(sizeof(BPI_Character_C_IsChained) == 0x000001, "Wrong size on BPI_Character_C_IsChained");
static_assert(offsetof(BPI_Character_C_IsChained, ReturnValue) == 0x000000, "Member 'BPI_Character_C_IsChained::ReturnValue' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.IsClimbing
// 0x0001 (0x0001 - 0x0000)
struct BPI_Character_C_IsClimbing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_IsClimbing) == 0x000001, "Wrong alignment on BPI_Character_C_IsClimbing");
static_assert(sizeof(BPI_Character_C_IsClimbing) == 0x000001, "Wrong size on BPI_Character_C_IsClimbing");
static_assert(offsetof(BPI_Character_C_IsClimbing, ReturnValue) == 0x000000, "Member 'BPI_Character_C_IsClimbing::ReturnValue' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.IsGrounded
// 0x0001 (0x0001 - 0x0000)
struct BPI_Character_C_IsGrounded final
{
public:
	bool                                          Grounded;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_IsGrounded) == 0x000001, "Wrong alignment on BPI_Character_C_IsGrounded");
static_assert(sizeof(BPI_Character_C_IsGrounded) == 0x000001, "Wrong size on BPI_Character_C_IsGrounded");
static_assert(offsetof(BPI_Character_C_IsGrounded, Grounded) == 0x000000, "Member 'BPI_Character_C_IsGrounded::Grounded' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.IsInCinematicMode
// 0x0001 (0x0001 - 0x0000)
struct BPI_Character_C_IsInCinematicMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_IsInCinematicMode) == 0x000001, "Wrong alignment on BPI_Character_C_IsInCinematicMode");
static_assert(sizeof(BPI_Character_C_IsInCinematicMode) == 0x000001, "Wrong size on BPI_Character_C_IsInCinematicMode");
static_assert(offsetof(BPI_Character_C_IsInCinematicMode, ReturnValue) == 0x000000, "Member 'BPI_Character_C_IsInCinematicMode::ReturnValue' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.IsOnTyrolienne
// 0x0001 (0x0001 - 0x0000)
struct BPI_Character_C_IsOnTyrolienne final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_IsOnTyrolienne) == 0x000001, "Wrong alignment on BPI_Character_C_IsOnTyrolienne");
static_assert(sizeof(BPI_Character_C_IsOnTyrolienne) == 0x000001, "Wrong size on BPI_Character_C_IsOnTyrolienne");
static_assert(offsetof(BPI_Character_C_IsOnTyrolienne, ReturnValue) == 0x000000, "Member 'BPI_Character_C_IsOnTyrolienne::ReturnValue' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.IsPulling
// 0x0001 (0x0001 - 0x0000)
struct BPI_Character_C_IsPulling final
{
public:
	bool                                          Pulling;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_IsPulling) == 0x000001, "Wrong alignment on BPI_Character_C_IsPulling");
static_assert(sizeof(BPI_Character_C_IsPulling) == 0x000001, "Wrong size on BPI_Character_C_IsPulling");
static_assert(offsetof(BPI_Character_C_IsPulling, Pulling) == 0x000000, "Member 'BPI_Character_C_IsPulling::Pulling' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.IsSwimming
// 0x0001 (0x0001 - 0x0000)
struct BPI_Character_C_IsSwimming final
{
public:
	bool                                          Swim;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_IsSwimming) == 0x000001, "Wrong alignment on BPI_Character_C_IsSwimming");
static_assert(sizeof(BPI_Character_C_IsSwimming) == 0x000001, "Wrong size on BPI_Character_C_IsSwimming");
static_assert(offsetof(BPI_Character_C_IsSwimming, Swim) == 0x000000, "Member 'BPI_Character_C_IsSwimming::Swim' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.IsWalkableSurface
// 0x00F0 (0x00F0 - 0x0000)
struct BPI_Character_C_IsWalkableSurface final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x00E8)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x00E8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_IsWalkableSurface) == 0x000008, "Wrong alignment on BPI_Character_C_IsWalkableSurface");
static_assert(sizeof(BPI_Character_C_IsWalkableSurface) == 0x0000F0, "Wrong size on BPI_Character_C_IsWalkableSurface");
static_assert(offsetof(BPI_Character_C_IsWalkableSurface, Hit) == 0x000000, "Member 'BPI_Character_C_IsWalkableSurface::Hit' has a wrong offset!");
static_assert(offsetof(BPI_Character_C_IsWalkableSurface, ReturnValue) == 0x0000E8, "Member 'BPI_Character_C_IsWalkableSurface::ReturnValue' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.MantleCheckShuffle
// 0x0008 (0x0008 - 0x0000)
struct BPI_Character_C_MantleCheckShuffle final
{
public:
	double                                        Delay;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_MantleCheckShuffle) == 0x000008, "Wrong alignment on BPI_Character_C_MantleCheckShuffle");
static_assert(sizeof(BPI_Character_C_MantleCheckShuffle) == 0x000008, "Wrong size on BPI_Character_C_MantleCheckShuffle");
static_assert(offsetof(BPI_Character_C_MantleCheckShuffle, Delay) == 0x000000, "Member 'BPI_Character_C_MantleCheckShuffle::Delay' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.PlayVoiceSRV
// 0x0010 (0x0010 - 0x0000)
struct BPI_Character_C_PlayVoiceSRV final
{
public:
	TArray<uint8>                                 Data;                                              // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BPI_Character_C_PlayVoiceSRV) == 0x000008, "Wrong alignment on BPI_Character_C_PlayVoiceSRV");
static_assert(sizeof(BPI_Character_C_PlayVoiceSRV) == 0x000010, "Wrong size on BPI_Character_C_PlayVoiceSRV");
static_assert(offsetof(BPI_Character_C_PlayVoiceSRV, Data) == 0x000000, "Member 'BPI_Character_C_PlayVoiceSRV::Data' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.ReplicatePseudo
// 0x0010 (0x0010 - 0x0000)
struct BPI_Character_C_ReplicatePseudo final
{
public:
	class FString                                 Pseudo;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_ReplicatePseudo) == 0x000008, "Wrong alignment on BPI_Character_C_ReplicatePseudo");
static_assert(sizeof(BPI_Character_C_ReplicatePseudo) == 0x000010, "Wrong size on BPI_Character_C_ReplicatePseudo");
static_assert(offsetof(BPI_Character_C_ReplicatePseudo, Pseudo) == 0x000000, "Member 'BPI_Character_C_ReplicatePseudo::Pseudo' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.RescueTeleport
// 0x0030 (0x0030 - 0x0000)
struct BPI_Character_C_RescueTeleport final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_Character_C_RescueTeleport) == 0x000008, "Wrong alignment on BPI_Character_C_RescueTeleport");
static_assert(sizeof(BPI_Character_C_RescueTeleport) == 0x000030, "Wrong size on BPI_Character_C_RescueTeleport");
static_assert(offsetof(BPI_Character_C_RescueTeleport, Location) == 0x000000, "Member 'BPI_Character_C_RescueTeleport::Location' has a wrong offset!");
static_assert(offsetof(BPI_Character_C_RescueTeleport, Rotation) == 0x000018, "Member 'BPI_Character_C_RescueTeleport::Rotation' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.RessortImpulse
// 0x0018 (0x0018 - 0x0000)
struct BPI_Character_C_RessortImpulse final
{
public:
	struct FVector                                Impulse;                                           // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_RessortImpulse) == 0x000008, "Wrong alignment on BPI_Character_C_RessortImpulse");
static_assert(sizeof(BPI_Character_C_RessortImpulse) == 0x000018, "Wrong size on BPI_Character_C_RessortImpulse");
static_assert(offsetof(BPI_Character_C_RessortImpulse, Impulse) == 0x000000, "Member 'BPI_Character_C_RessortImpulse::Impulse' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.SetCameraRotation
// 0x0018 (0x0018 - 0x0000)
struct BPI_Character_C_SetCameraRotation final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_Character_C_SetCameraRotation) == 0x000008, "Wrong alignment on BPI_Character_C_SetCameraRotation");
static_assert(sizeof(BPI_Character_C_SetCameraRotation) == 0x000018, "Wrong size on BPI_Character_C_SetCameraRotation");
static_assert(offsetof(BPI_Character_C_SetCameraRotation, Rotation) == 0x000000, "Member 'BPI_Character_C_SetCameraRotation::Rotation' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.SetChainComp
// 0x0008 (0x0008 - 0x0000)
struct BPI_Character_C_SetChainComp final
{
public:
	class UStaticMeshComponent*                   Comp;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_SetChainComp) == 0x000008, "Wrong alignment on BPI_Character_C_SetChainComp");
static_assert(sizeof(BPI_Character_C_SetChainComp) == 0x000008, "Wrong size on BPI_Character_C_SetChainComp");
static_assert(offsetof(BPI_Character_C_SetChainComp, Comp) == 0x000000, "Member 'BPI_Character_C_SetChainComp::Comp' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.SetCollisionResponse
// 0x0002 (0x0002 - 0x0000)
struct BPI_Character_C_SetCollisionResponse final
{
public:
	ECollisionChannel                             Collision;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionResponse                            Response;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_SetCollisionResponse) == 0x000001, "Wrong alignment on BPI_Character_C_SetCollisionResponse");
static_assert(sizeof(BPI_Character_C_SetCollisionResponse) == 0x000002, "Wrong size on BPI_Character_C_SetCollisionResponse");
static_assert(offsetof(BPI_Character_C_SetCollisionResponse, Collision) == 0x000000, "Member 'BPI_Character_C_SetCollisionResponse::Collision' has a wrong offset!");
static_assert(offsetof(BPI_Character_C_SetCollisionResponse, Response) == 0x000001, "Member 'BPI_Character_C_SetCollisionResponse::Response' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.SetController
// 0x0018 (0x0018 - 0x0000)
struct BPI_Character_C_SetController final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_SetController) == 0x000008, "Wrong alignment on BPI_Character_C_SetController");
static_assert(sizeof(BPI_Character_C_SetController) == 0x000018, "Wrong size on BPI_Character_C_SetController");
static_assert(offsetof(BPI_Character_C_SetController, Location) == 0x000000, "Member 'BPI_Character_C_SetController::Location' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.SetCosmeticChainFixSocket
// 0x0010 (0x0010 - 0x0000)
struct BPI_Character_C_SetCosmeticChainFixSocket final
{
public:
	class UPrimitiveComponent*                    Socket;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   Param_Name;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_SetCosmeticChainFixSocket) == 0x000008, "Wrong alignment on BPI_Character_C_SetCosmeticChainFixSocket");
static_assert(sizeof(BPI_Character_C_SetCosmeticChainFixSocket) == 0x000010, "Wrong size on BPI_Character_C_SetCosmeticChainFixSocket");
static_assert(offsetof(BPI_Character_C_SetCosmeticChainFixSocket, Socket) == 0x000000, "Member 'BPI_Character_C_SetCosmeticChainFixSocket::Socket' has a wrong offset!");
static_assert(offsetof(BPI_Character_C_SetCosmeticChainFixSocket, Param_Name) == 0x000008, "Member 'BPI_Character_C_SetCosmeticChainFixSocket::Param_Name' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.SetFlyMode
// 0x0001 (0x0001 - 0x0000)
struct BPI_Character_C_SetFlyMode final
{
public:
	bool                                          FlyMode;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_SetFlyMode) == 0x000001, "Wrong alignment on BPI_Character_C_SetFlyMode");
static_assert(sizeof(BPI_Character_C_SetFlyMode) == 0x000001, "Wrong size on BPI_Character_C_SetFlyMode");
static_assert(offsetof(BPI_Character_C_SetFlyMode, FlyMode) == 0x000000, "Member 'BPI_Character_C_SetFlyMode::FlyMode' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.SetInAirDamping
// 0x0008 (0x0008 - 0x0000)
struct BPI_Character_C_SetInAirDamping final
{
public:
	double                                        Damping;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_SetInAirDamping) == 0x000008, "Wrong alignment on BPI_Character_C_SetInAirDamping");
static_assert(sizeof(BPI_Character_C_SetInAirDamping) == 0x000008, "Wrong size on BPI_Character_C_SetInAirDamping");
static_assert(offsetof(BPI_Character_C_SetInAirDamping, Damping) == 0x000000, "Member 'BPI_Character_C_SetInAirDamping::Damping' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.SetIsDetectableByPlacingBlocks
// 0x0001 (0x0001 - 0x0000)
struct BPI_Character_C_SetIsDetectableByPlacingBlocks final
{
public:
	bool                                          Detectable;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_SetIsDetectableByPlacingBlocks) == 0x000001, "Wrong alignment on BPI_Character_C_SetIsDetectableByPlacingBlocks");
static_assert(sizeof(BPI_Character_C_SetIsDetectableByPlacingBlocks) == 0x000001, "Wrong size on BPI_Character_C_SetIsDetectableByPlacingBlocks");
static_assert(offsetof(BPI_Character_C_SetIsDetectableByPlacingBlocks, Detectable) == 0x000000, "Member 'BPI_Character_C_SetIsDetectableByPlacingBlocks::Detectable' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.SetIsDriving
// 0x0001 (0x0001 - 0x0000)
struct BPI_Character_C_SetIsDriving final
{
public:
	bool                                          Driving;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_SetIsDriving) == 0x000001, "Wrong alignment on BPI_Character_C_SetIsDriving");
static_assert(sizeof(BPI_Character_C_SetIsDriving) == 0x000001, "Wrong size on BPI_Character_C_SetIsDriving");
static_assert(offsetof(BPI_Character_C_SetIsDriving, Driving) == 0x000000, "Member 'BPI_Character_C_SetIsDriving::Driving' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.SetIsInMovingObject
// 0x0001 (0x0001 - 0x0000)
struct BPI_Character_C_SetIsInMovingObject final
{
public:
	bool                                          InMovingObject;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_SetIsInMovingObject) == 0x000001, "Wrong alignment on BPI_Character_C_SetIsInMovingObject");
static_assert(sizeof(BPI_Character_C_SetIsInMovingObject) == 0x000001, "Wrong size on BPI_Character_C_SetIsInMovingObject");
static_assert(offsetof(BPI_Character_C_SetIsInMovingObject, InMovingObject) == 0x000000, "Member 'BPI_Character_C_SetIsInMovingObject::InMovingObject' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.SetIsSwimming
// 0x0001 (0x0001 - 0x0000)
struct BPI_Character_C_SetIsSwimming final
{
public:
	bool                                          Swim;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_SetIsSwimming) == 0x000001, "Wrong alignment on BPI_Character_C_SetIsSwimming");
static_assert(sizeof(BPI_Character_C_SetIsSwimming) == 0x000001, "Wrong size on BPI_Character_C_SetIsSwimming");
static_assert(offsetof(BPI_Character_C_SetIsSwimming, Swim) == 0x000000, "Member 'BPI_Character_C_SetIsSwimming::Swim' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.SetLookAround
// 0x0001 (0x0001 - 0x0000)
struct BPI_Character_C_SetLookAround final
{
public:
	bool                                          LookAround;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_SetLookAround) == 0x000001, "Wrong alignment on BPI_Character_C_SetLookAround");
static_assert(sizeof(BPI_Character_C_SetLookAround) == 0x000001, "Wrong size on BPI_Character_C_SetLookAround");
static_assert(offsetof(BPI_Character_C_SetLookAround, LookAround) == 0x000000, "Member 'BPI_Character_C_SetLookAround::LookAround' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.SetPlayerNameSRV
// 0x0010 (0x0010 - 0x0000)
struct BPI_Character_C_SetPlayerNameSRV final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_SetPlayerNameSRV) == 0x000008, "Wrong alignment on BPI_Character_C_SetPlayerNameSRV");
static_assert(sizeof(BPI_Character_C_SetPlayerNameSRV) == 0x000010, "Wrong size on BPI_Character_C_SetPlayerNameSRV");
static_assert(offsetof(BPI_Character_C_SetPlayerNameSRV, PlayerName) == 0x000000, "Member 'BPI_Character_C_SetPlayerNameSRV::PlayerName' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.SetRotation
// 0x0018 (0x0018 - 0x0000)
struct BPI_Character_C_SetRotation final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_Character_C_SetRotation) == 0x000008, "Wrong alignment on BPI_Character_C_SetRotation");
static_assert(sizeof(BPI_Character_C_SetRotation) == 0x000018, "Wrong size on BPI_Character_C_SetRotation");
static_assert(offsetof(BPI_Character_C_SetRotation, Rotation) == 0x000000, "Member 'BPI_Character_C_SetRotation::Rotation' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.SetZLocation
// 0x0008 (0x0008 - 0x0000)
struct BPI_Character_C_SetZLocation final
{
public:
	double                                        Z;                                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_SetZLocation) == 0x000008, "Wrong alignment on BPI_Character_C_SetZLocation");
static_assert(sizeof(BPI_Character_C_SetZLocation) == 0x000008, "Wrong size on BPI_Character_C_SetZLocation");
static_assert(offsetof(BPI_Character_C_SetZLocation, Z) == 0x000000, "Member 'BPI_Character_C_SetZLocation::Z' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.ShowHidePullWidget
// 0x0001 (0x0001 - 0x0000)
struct BPI_Character_C_ShowHidePullWidget final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_ShowHidePullWidget) == 0x000001, "Wrong alignment on BPI_Character_C_ShowHidePullWidget");
static_assert(sizeof(BPI_Character_C_ShowHidePullWidget) == 0x000001, "Wrong size on BPI_Character_C_ShowHidePullWidget");
static_assert(offsetof(BPI_Character_C_ShowHidePullWidget, Show) == 0x000000, "Member 'BPI_Character_C_ShowHidePullWidget::Show' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.ShuffleHardSnap
// 0x0008 (0x0008 - 0x0000)
struct BPI_Character_C_ShuffleHardSnap final
{
public:
	double                                        Delay;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_ShuffleHardSnap) == 0x000008, "Wrong alignment on BPI_Character_C_ShuffleHardSnap");
static_assert(sizeof(BPI_Character_C_ShuffleHardSnap) == 0x000008, "Wrong size on BPI_Character_C_ShuffleHardSnap");
static_assert(offsetof(BPI_Character_C_ShuffleHardSnap, Delay) == 0x000000, "Member 'BPI_Character_C_ShuffleHardSnap::Delay' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.ShuffleReplicationScale
// 0x0010 (0x0010 - 0x0000)
struct BPI_Character_C_ShuffleReplicationScale final
{
public:
	double                                        NullDuration;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TimelineDuration;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_ShuffleReplicationScale) == 0x000008, "Wrong alignment on BPI_Character_C_ShuffleReplicationScale");
static_assert(sizeof(BPI_Character_C_ShuffleReplicationScale) == 0x000010, "Wrong size on BPI_Character_C_ShuffleReplicationScale");
static_assert(offsetof(BPI_Character_C_ShuffleReplicationScale, NullDuration) == 0x000000, "Member 'BPI_Character_C_ShuffleReplicationScale::NullDuration' has a wrong offset!");
static_assert(offsetof(BPI_Character_C_ShuffleReplicationScale, TimelineDuration) == 0x000008, "Member 'BPI_Character_C_ShuffleReplicationScale::TimelineDuration' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.SnapCharacterToVehicle
// 0x0008 (0x0008 - 0x0000)
struct BPI_Character_C_SnapCharacterToVehicle final
{
public:
	class USphereComponent*                       DriverSocket;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_SnapCharacterToVehicle) == 0x000008, "Wrong alignment on BPI_Character_C_SnapCharacterToVehicle");
static_assert(sizeof(BPI_Character_C_SnapCharacterToVehicle) == 0x000008, "Wrong size on BPI_Character_C_SnapCharacterToVehicle");
static_assert(offsetof(BPI_Character_C_SnapCharacterToVehicle, DriverSocket) == 0x000000, "Member 'BPI_Character_C_SnapCharacterToVehicle::DriverSocket' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.SwitchToTyrolienne
// 0x0008 (0x0008 - 0x0000)
struct BPI_Character_C_SwitchToTyrolienne final
{
public:
	class ABP_Tyrolienne_C*                       Tyrolienne;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_SwitchToTyrolienne) == 0x000008, "Wrong alignment on BPI_Character_C_SwitchToTyrolienne");
static_assert(sizeof(BPI_Character_C_SwitchToTyrolienne) == 0x000008, "Wrong size on BPI_Character_C_SwitchToTyrolienne");
static_assert(offsetof(BPI_Character_C_SwitchToTyrolienne, Tyrolienne) == 0x000000, "Member 'BPI_Character_C_SwitchToTyrolienne::Tyrolienne' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.TrampolineBounce
// 0x0010 (0x0010 - 0x0000)
struct BPI_Character_C_TrampolineBounce final
{
public:
	double                                        Force;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Instigator;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseControlRot;                                     // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_TrampolineBounce) == 0x000008, "Wrong alignment on BPI_Character_C_TrampolineBounce");
static_assert(sizeof(BPI_Character_C_TrampolineBounce) == 0x000010, "Wrong size on BPI_Character_C_TrampolineBounce");
static_assert(offsetof(BPI_Character_C_TrampolineBounce, Force) == 0x000000, "Member 'BPI_Character_C_TrampolineBounce::Force' has a wrong offset!");
static_assert(offsetof(BPI_Character_C_TrampolineBounce, Instigator) == 0x000008, "Member 'BPI_Character_C_TrampolineBounce::Instigator' has a wrong offset!");
static_assert(offsetof(BPI_Character_C_TrampolineBounce, UseControlRot) == 0x000009, "Member 'BPI_Character_C_TrampolineBounce::UseControlRot' has a wrong offset!");

// Function BPI_Character.BPI_Character_C.UpdateDriveHands
// 0x0030 (0x0030 - 0x0000)
struct BPI_Character_C_UpdateDriveHands final
{
public:
	struct FVector                                Left;                                              // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Right;                                             // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Character_C_UpdateDriveHands) == 0x000008, "Wrong alignment on BPI_Character_C_UpdateDriveHands");
static_assert(sizeof(BPI_Character_C_UpdateDriveHands) == 0x000030, "Wrong size on BPI_Character_C_UpdateDriveHands");
static_assert(offsetof(BPI_Character_C_UpdateDriveHands, Left) == 0x000000, "Member 'BPI_Character_C_UpdateDriveHands::Left' has a wrong offset!");
static_assert(offsetof(BPI_Character_C_UpdateDriveHands, Right) == 0x000018, "Member 'BPI_Character_C_UpdateDriveHands::Right' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DrawScreenManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DrawScreenManager.BP_DrawScreenManager_C
// 0x0048 (0x02E0 - 0x0298)
class ABP_DrawScreenManager_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBillboardComponent*                    Billboard;                                         // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_DrawPad_C*>                  DrawPads;                                          // 0x02B0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, ExposeOnSpawn)
	class ABP_DrawScreen_C*                       DrawScreen;                                        // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<class AActor*>                         ActorsToShow;                                      // 0x02C8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, ExposeOnSpawn)
	bool                                          Over;                                              // 0x02D8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)

public:
	void CheckDrawing();
	bool CheckDrawPadsOn(int32 InInt);
	int32 CountActivatedPads();
	void ExecuteUbergraph_BP_DrawScreenManager(int32 EntryPoint);
	void GetDrawPads();
	void OnRep_Over();
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DrawScreenManager_C">();
	}
	static class ABP_DrawScreenManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DrawScreenManager_C>();
	}
};
static_assert(alignof(ABP_DrawScreenManager_C) == 0x000008, "Wrong alignment on ABP_DrawScreenManager_C");
static_assert(sizeof(ABP_DrawScreenManager_C) == 0x0002E0, "Wrong size on ABP_DrawScreenManager_C");
static_assert(offsetof(ABP_DrawScreenManager_C, UberGraphFrame) == 0x000298, "Member 'ABP_DrawScreenManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_DrawScreenManager_C, Billboard) == 0x0002A0, "Member 'ABP_DrawScreenManager_C::Billboard' has a wrong offset!");
static_assert(offsetof(ABP_DrawScreenManager_C, DefaultSceneRoot) == 0x0002A8, "Member 'ABP_DrawScreenManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_DrawScreenManager_C, DrawPads) == 0x0002B0, "Member 'ABP_DrawScreenManager_C::DrawPads' has a wrong offset!");
static_assert(offsetof(ABP_DrawScreenManager_C, DrawScreen) == 0x0002C0, "Member 'ABP_DrawScreenManager_C::DrawScreen' has a wrong offset!");
static_assert(offsetof(ABP_DrawScreenManager_C, ActorsToShow) == 0x0002C8, "Member 'ABP_DrawScreenManager_C::ActorsToShow' has a wrong offset!");
static_assert(offsetof(ABP_DrawScreenManager_C, Over) == 0x0002D8, "Member 'ABP_DrawScreenManager_C::Over' has a wrong offset!");

}


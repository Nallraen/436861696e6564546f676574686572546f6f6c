#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MovingObject

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MovingObject.BP_MovingObject_C
// 0x01B8 (0x0450 - 0x0298)
class ABP_MovingObject_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       ZFix_Socket;                                       // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          FixPlayerZBox;                                     // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Elevator_SoundEffect;                              // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   EndMesh;                                           // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       Spline;                                            // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Move_TL_SoundVolume_998D6B6D458EF33B2066ADA78CB20708; // 0x02E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Move_TL_Move_Alpha_998D6B6D458EF33B2066ADA78CB20708; // 0x02E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Move_TL__Direction_998D6B6D458EF33B2066ADA78CB20708; // 0x02E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2EDA[0x7];                                     // 0x02E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Move_TL;                                           // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Moving;                                            // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2EDB[0x7];                                     // 0x02F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  Character;                                         // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InitialLoc;                                        // 0x0308(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Seconds;                                           // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UStaticMesh*                            Mesh;                                              // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector                                Scale;                                             // 0x0330(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        BoxSize;                                           // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x0350(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	double                                        Delay;                                             // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          AdaptRotation_;                                    // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_2EDC[0x7];                                     // 0x0371(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               InitRot;                                           // 0x0378(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                             SoundToPlay;                                       // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          PlaySound;                                         // 0x0398(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          SnapToEnd_Test_;                                   // 0x0399(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          BlockCamera;                                       // 0x039A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_2EDD[0x5];                                     // 0x039B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MaxDistanceBeforeReset;                            // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          LockY;                                             // 0x03A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          LockX;                                             // 0x03A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          LockZ;                                             // 0x03AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_2EDE[0x5];                                     // 0x03AB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Z;                                                 // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AStaticMeshActor*>               CustomCollision;                                   // 0x03B8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, ExposeOnSpawn)
	int32                                         NewVar;                                            // 0x03C8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2EDF[0x4];                                     // 0x03CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InitTransform;                                     // 0x03D0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FixPlayersZ;                                       // 0x0430(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_2EE0[0x7];                                     // 0x0431(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_CityHoleDoors_C*>            Doors;                                             // 0x0438(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, ExposeOnSpawn)
	bool                                          AllPlayersMustBeInside;                            // 0x0448(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          CanReset;                                          // 0x0449(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DeactivateChainCollisionWhenStopped;               // 0x044A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void BeginMove();
	void BeginMoveAll();
	void BndEvt__BP_MovingObject_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void CheckReset();
	void ExecuteUbergraph_BP_MovingObject(int32 EntryPoint);
	void Move_TL__FinishedFunc();
	void Move_TL__UpdateFunc();
	bool OnBoxDetection(class UObject* Object);
	void OpenCloseDoor(int32 Param_Index, bool Open);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void Reset();
	void ResetAll();
	void ResetDetectionOnEndMoving();
	void ResetReset();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MovingObject_C">();
	}
	static class ABP_MovingObject_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MovingObject_C>();
	}
};
static_assert(alignof(ABP_MovingObject_C) == 0x000010, "Wrong alignment on ABP_MovingObject_C");
static_assert(sizeof(ABP_MovingObject_C) == 0x000450, "Wrong size on ABP_MovingObject_C");
static_assert(offsetof(ABP_MovingObject_C, UberGraphFrame) == 0x000298, "Member 'ABP_MovingObject_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_MovingObject_C, ZFix_Socket) == 0x0002A0, "Member 'ABP_MovingObject_C::ZFix_Socket' has a wrong offset!");
static_assert(offsetof(ABP_MovingObject_C, FixPlayerZBox) == 0x0002A8, "Member 'ABP_MovingObject_C::FixPlayerZBox' has a wrong offset!");
static_assert(offsetof(ABP_MovingObject_C, Box) == 0x0002B0, "Member 'ABP_MovingObject_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_MovingObject_C, Elevator_SoundEffect) == 0x0002B8, "Member 'ABP_MovingObject_C::Elevator_SoundEffect' has a wrong offset!");
static_assert(offsetof(ABP_MovingObject_C, EndMesh) == 0x0002C0, "Member 'ABP_MovingObject_C::EndMesh' has a wrong offset!");
static_assert(offsetof(ABP_MovingObject_C, Spline) == 0x0002C8, "Member 'ABP_MovingObject_C::Spline' has a wrong offset!");
static_assert(offsetof(ABP_MovingObject_C, StaticMesh) == 0x0002D0, "Member 'ABP_MovingObject_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_MovingObject_C, DefaultSceneRoot) == 0x0002D8, "Member 'ABP_MovingObject_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_MovingObject_C, Move_TL_SoundVolume_998D6B6D458EF33B2066ADA78CB20708) == 0x0002E0, "Member 'ABP_MovingObject_C::Move_TL_SoundVolume_998D6B6D458EF33B2066ADA78CB20708' has a wrong offset!");
static_assert(offsetof(ABP_MovingObject_C, Move_TL_Move_Alpha_998D6B6D458EF33B2066ADA78CB20708) == 0x0002E4, "Member 'ABP_MovingObject_C::Move_TL_Move_Alpha_998D6B6D458EF33B2066ADA78CB20708' has a wrong offset!");
static_assert(offsetof(ABP_MovingObject_C, Move_TL__Direction_998D6B6D458EF33B2066ADA78CB20708) == 0x0002E8, "Member 'ABP_MovingObject_C::Move_TL__Direction_998D6B6D458EF33B2066ADA78CB20708' has a wrong offset!");
static_assert(offsetof(ABP_MovingObject_C, Move_TL) == 0x0002F0, "Member 'ABP_MovingObject_C::Move_TL' has a wrong offset!");
static_assert(offsetof(ABP_MovingObject_C, Moving) == 0x0002F8, "Member 'ABP_MovingObject_C::Moving' has a wrong offset!");
static_assert(offsetof(ABP_MovingObject_C, Character) == 0x000300, "Member 'ABP_MovingObject_C::Character' has a wrong offset!");
static_assert(offsetof(ABP_MovingObject_C, InitialLoc) == 0x000308, "Member 'ABP_MovingObject_C::InitialLoc' has a wrong offset!");
static_assert(offsetof(ABP_MovingObject_C, Seconds) == 0x000320, "Member 'ABP_MovingObject_C::Seconds' has a wrong offset!");
static_assert(offsetof(ABP_MovingObject_C, Mesh) == 0x000328, "Member 'ABP_MovingObject_C::Mesh' has a wrong offset!");
static_assert(offsetof(ABP_MovingObject_C, Scale) == 0x000330, "Member 'ABP_MovingObject_C::Scale' has a wrong offset!");
static_assert(offsetof(ABP_MovingObject_C, BoxSize) == 0x000348, "Member 'ABP_MovingObject_C::BoxSize' has a wrong offset!");
static_assert(offsetof(ABP_MovingObject_C, Rotation) == 0x000350, "Member 'ABP_MovingObject_C::Rotation' has a wrong offset!");
static_assert(offsetof(ABP_MovingObject_C, Delay) == 0x000368, "Member 'ABP_MovingObject_C::Delay' has a wrong offset!");
static_assert(offsetof(ABP_MovingObject_C, AdaptRotation_) == 0x000370, "Member 'ABP_MovingObject_C::AdaptRotation_' has a wrong offset!");
static_assert(offsetof(ABP_MovingObject_C, InitRot) == 0x000378, "Member 'ABP_MovingObject_C::InitRot' has a wrong offset!");
static_assert(offsetof(ABP_MovingObject_C, SoundToPlay) == 0x000390, "Member 'ABP_MovingObject_C::SoundToPlay' has a wrong offset!");
static_assert(offsetof(ABP_MovingObject_C, PlaySound) == 0x000398, "Member 'ABP_MovingObject_C::PlaySound' has a wrong offset!");
static_assert(offsetof(ABP_MovingObject_C, SnapToEnd_Test_) == 0x000399, "Member 'ABP_MovingObject_C::SnapToEnd_Test_' has a wrong offset!");
static_assert(offsetof(ABP_MovingObject_C, BlockCamera) == 0x00039A, "Member 'ABP_MovingObject_C::BlockCamera' has a wrong offset!");
static_assert(offsetof(ABP_MovingObject_C, MaxDistanceBeforeReset) == 0x0003A0, "Member 'ABP_MovingObject_C::MaxDistanceBeforeReset' has a wrong offset!");
static_assert(offsetof(ABP_MovingObject_C, LockY) == 0x0003A8, "Member 'ABP_MovingObject_C::LockY' has a wrong offset!");
static_assert(offsetof(ABP_MovingObject_C, LockX) == 0x0003A9, "Member 'ABP_MovingObject_C::LockX' has a wrong offset!");
static_assert(offsetof(ABP_MovingObject_C, LockZ) == 0x0003AA, "Member 'ABP_MovingObject_C::LockZ' has a wrong offset!");
static_assert(offsetof(ABP_MovingObject_C, Z) == 0x0003B0, "Member 'ABP_MovingObject_C::Z' has a wrong offset!");
static_assert(offsetof(ABP_MovingObject_C, CustomCollision) == 0x0003B8, "Member 'ABP_MovingObject_C::CustomCollision' has a wrong offset!");
static_assert(offsetof(ABP_MovingObject_C, NewVar) == 0x0003C8, "Member 'ABP_MovingObject_C::NewVar' has a wrong offset!");
static_assert(offsetof(ABP_MovingObject_C, InitTransform) == 0x0003D0, "Member 'ABP_MovingObject_C::InitTransform' has a wrong offset!");
static_assert(offsetof(ABP_MovingObject_C, FixPlayersZ) == 0x000430, "Member 'ABP_MovingObject_C::FixPlayersZ' has a wrong offset!");
static_assert(offsetof(ABP_MovingObject_C, Doors) == 0x000438, "Member 'ABP_MovingObject_C::Doors' has a wrong offset!");
static_assert(offsetof(ABP_MovingObject_C, AllPlayersMustBeInside) == 0x000448, "Member 'ABP_MovingObject_C::AllPlayersMustBeInside' has a wrong offset!");
static_assert(offsetof(ABP_MovingObject_C, CanReset) == 0x000449, "Member 'ABP_MovingObject_C::CanReset' has a wrong offset!");
static_assert(offsetof(ABP_MovingObject_C, DeactivateChainCollisionWhenStopped) == 0x00044A, "Member 'ABP_MovingObject_C::DeactivateChainCollisionWhenStopped' has a wrong offset!");

}


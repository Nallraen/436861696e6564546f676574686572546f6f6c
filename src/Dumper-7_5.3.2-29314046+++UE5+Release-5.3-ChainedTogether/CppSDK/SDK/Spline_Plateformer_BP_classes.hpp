#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Spline_Plateformer_BP

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Spline_Plateformer_BP.Spline_Plateformer_BP_C
// 0x00D0 (0x0368 - 0x0298)
class ASpline_Plateformer_BP_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USplineComponent*                       Spline;                                            // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_NewTrack_0_25861999488133CF1CBB3AB0A19273DD; // 0x02B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline__Direction_25861999488133CF1CBB3AB0A19273DD; // 0x02B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3785[0x3];                                     // 0x02B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline;                                          // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TMap<class UStaticMesh*, struct FTransform>   Meshes;                                            // 0x02C0(0x0050)(Edit, BlueprintVisible, ExposeOnSpawn)
	int32                                         PlateformeNumber;                                  // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         PlateformeNumber1P;                                // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         NumberofPlayer;                                    // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SmallRotations;                                    // 0x031C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_3786[0x3];                                     // 0x031D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBoxComponent*                          Box;                                               // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          SimulatePhysics;                                   // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3787[0x7];                                     // 0x0329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Position_Strength;                                 // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          ShouldBounce;                                      // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_3788[0x3];                                     // 0x0339(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRandomStream                          Stream;                                            // 0x033C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor)
	bool                                          UseTimer;                                          // 0x0344(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_3789[0x3];                                     // 0x0345(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MinTime;                                           // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UAudioComponent*                        ActionSound;                                       // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UW_Timer_C*                             TimelineWidget;                                    // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        MaxTime;                                           // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void BndEvt__Spline_Plateformer_BP_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__Spline_Plateformer_BP_Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void ExecuteUbergraph_Spline_Plateformer_BP(int32 EntryPoint);
	void Generate_Path();
	void IsActivated(bool* Activated);
	void Pushed();
	void ReceiveBeginPlay();
	void Released();
	void ResetSpawn();
	void SpawnOnAll();
	void Timeline__FinishedFunc();
	void Timeline__UpdateFunc();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Spline_Plateformer_BP_C">();
	}
	static class ASpline_Plateformer_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASpline_Plateformer_BP_C>();
	}
};
static_assert(alignof(ASpline_Plateformer_BP_C) == 0x000008, "Wrong alignment on ASpline_Plateformer_BP_C");
static_assert(sizeof(ASpline_Plateformer_BP_C) == 0x000368, "Wrong size on ASpline_Plateformer_BP_C");
static_assert(offsetof(ASpline_Plateformer_BP_C, UberGraphFrame) == 0x000298, "Member 'ASpline_Plateformer_BP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ASpline_Plateformer_BP_C, Spline) == 0x0002A0, "Member 'ASpline_Plateformer_BP_C::Spline' has a wrong offset!");
static_assert(offsetof(ASpline_Plateformer_BP_C, DefaultSceneRoot) == 0x0002A8, "Member 'ASpline_Plateformer_BP_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ASpline_Plateformer_BP_C, Timeline_NewTrack_0_25861999488133CF1CBB3AB0A19273DD) == 0x0002B0, "Member 'ASpline_Plateformer_BP_C::Timeline_NewTrack_0_25861999488133CF1CBB3AB0A19273DD' has a wrong offset!");
static_assert(offsetof(ASpline_Plateformer_BP_C, Timeline__Direction_25861999488133CF1CBB3AB0A19273DD) == 0x0002B4, "Member 'ASpline_Plateformer_BP_C::Timeline__Direction_25861999488133CF1CBB3AB0A19273DD' has a wrong offset!");
static_assert(offsetof(ASpline_Plateformer_BP_C, Timeline) == 0x0002B8, "Member 'ASpline_Plateformer_BP_C::Timeline' has a wrong offset!");
static_assert(offsetof(ASpline_Plateformer_BP_C, Meshes) == 0x0002C0, "Member 'ASpline_Plateformer_BP_C::Meshes' has a wrong offset!");
static_assert(offsetof(ASpline_Plateformer_BP_C, PlateformeNumber) == 0x000310, "Member 'ASpline_Plateformer_BP_C::PlateformeNumber' has a wrong offset!");
static_assert(offsetof(ASpline_Plateformer_BP_C, PlateformeNumber1P) == 0x000314, "Member 'ASpline_Plateformer_BP_C::PlateformeNumber1P' has a wrong offset!");
static_assert(offsetof(ASpline_Plateformer_BP_C, NumberofPlayer) == 0x000318, "Member 'ASpline_Plateformer_BP_C::NumberofPlayer' has a wrong offset!");
static_assert(offsetof(ASpline_Plateformer_BP_C, SmallRotations) == 0x00031C, "Member 'ASpline_Plateformer_BP_C::SmallRotations' has a wrong offset!");
static_assert(offsetof(ASpline_Plateformer_BP_C, Box) == 0x000320, "Member 'ASpline_Plateformer_BP_C::Box' has a wrong offset!");
static_assert(offsetof(ASpline_Plateformer_BP_C, SimulatePhysics) == 0x000328, "Member 'ASpline_Plateformer_BP_C::SimulatePhysics' has a wrong offset!");
static_assert(offsetof(ASpline_Plateformer_BP_C, Position_Strength) == 0x000330, "Member 'ASpline_Plateformer_BP_C::Position_Strength' has a wrong offset!");
static_assert(offsetof(ASpline_Plateformer_BP_C, ShouldBounce) == 0x000338, "Member 'ASpline_Plateformer_BP_C::ShouldBounce' has a wrong offset!");
static_assert(offsetof(ASpline_Plateformer_BP_C, Stream) == 0x00033C, "Member 'ASpline_Plateformer_BP_C::Stream' has a wrong offset!");
static_assert(offsetof(ASpline_Plateformer_BP_C, UseTimer) == 0x000344, "Member 'ASpline_Plateformer_BP_C::UseTimer' has a wrong offset!");
static_assert(offsetof(ASpline_Plateformer_BP_C, MinTime) == 0x000348, "Member 'ASpline_Plateformer_BP_C::MinTime' has a wrong offset!");
static_assert(offsetof(ASpline_Plateformer_BP_C, ActionSound) == 0x000350, "Member 'ASpline_Plateformer_BP_C::ActionSound' has a wrong offset!");
static_assert(offsetof(ASpline_Plateformer_BP_C, TimelineWidget) == 0x000358, "Member 'ASpline_Plateformer_BP_C::TimelineWidget' has a wrong offset!");
static_assert(offsetof(ASpline_Plateformer_BP_C, MaxTime) == 0x000360, "Member 'ASpline_Plateformer_BP_C::MaxTime' has a wrong offset!");

}


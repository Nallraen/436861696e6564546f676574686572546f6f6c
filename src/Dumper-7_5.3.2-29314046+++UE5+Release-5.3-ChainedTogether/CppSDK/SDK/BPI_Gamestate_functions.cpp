#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_Gamestate

#include "Basic.hpp"

#include "BPI_Gamestate_classes.hpp"
#include "BPI_Gamestate_parameters.hpp"


namespace SDK
{

// Function BPI_Gamestate.BPI_Gamestate_C.AddRescuePoint
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_RescuePoint_C*                RescuePoint                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_Gamestate_C::AddRescuePoint(class ABP_RescuePoint_C* RescuePoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Gamestate_C", "AddRescuePoint");

	Params::BPI_Gamestate_C_AddRescuePoint Parms{};

	Parms.RescuePoint = RescuePoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Gamestate.BPI_Gamestate_C.EndCinematicPassed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool IBPI_Gamestate_C::EndCinematicPassed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Gamestate_C", "EndCinematicPassed");

	Params::BPI_Gamestate_C_EndCinematicPassed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BPI_Gamestate.BPI_Gamestate_C.EveryoneIsFalling
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Falling                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Gamestate_C::EveryoneIsFalling(bool* Falling)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Gamestate_C", "EveryoneIsFalling");

	Params::BPI_Gamestate_C_EveryoneIsFalling Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Falling != nullptr)
		*Falling = Parms.Falling;
}


// Function BPI_Gamestate.BPI_Gamestate_C.FindPlayerStart
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool IBPI_Gamestate_C::FindPlayerStart(struct FTransform* Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Gamestate_C", "FindPlayerStart");

	Params::BPI_Gamestate_C_FindPlayerStart Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Transform != nullptr)
		*Transform = std::move(Parms.Transform);

	return Parms.ReturnValue;
}


// Function BPI_Gamestate.BPI_Gamestate_C.GetChainMiddleLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Attached01                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Attached02                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FVector                          RepLocation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Gamestate_C::GetChainMiddleLocation(const class FString& Attached01, const class FString& Attached02, struct FVector* RepLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Gamestate_C", "GetChainMiddleLocation");

	Params::BPI_Gamestate_C_GetChainMiddleLocation Parms{};

	Parms.Attached01 = std::move(Attached01);
	Parms.Attached02 = std::move(Attached02);

	UObject::ProcessEvent(Func, &Parms);

	if (RepLocation != nullptr)
		*RepLocation = std::move(Parms.RepLocation);
}


// Function BPI_Gamestate.BPI_Gamestate_C.GetGameBegun
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    HasBegun                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Gamestate_C::GetGameBegun(bool* HasBegun)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Gamestate_C", "GetGameBegun");

	Params::BPI_Gamestate_C_GetGameBegun Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HasBegun != nullptr)
		*HasBegun = Parms.HasBegun;
}


// Function BPI_Gamestate.BPI_Gamestate_C.GetHighestRescuePoint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_RescuePoint_C*                Return                                                 (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Gamestate_C::GetHighestRescuePoint(class ABP_RescuePoint_C** Return, bool* Found)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Gamestate_C", "GetHighestRescuePoint");

	Params::BPI_Gamestate_C_GetHighestRescuePoint Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;

	if (Found != nullptr)
		*Found = Parms.Found;
}


// Function BPI_Gamestate.BPI_Gamestate_C.GetLavaDead
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dead                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Gamestate_C::GetLavaDead(bool* Dead)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Gamestate_C", "GetLavaDead");

	Params::BPI_Gamestate_C_GetLavaDead Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dead != nullptr)
		*Dead = Parms.Dead;
}


// Function BPI_Gamestate.BPI_Gamestate_C.GetLaveMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Lava                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Gamestate_C::GetLaveMode(bool* Lava)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Gamestate_C", "GetLaveMode");

	Params::BPI_Gamestate_C_GetLaveMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Lava != nullptr)
		*Lava = Parms.Lava;
}


// Function BPI_Gamestate.BPI_Gamestate_C.GetNearestRescueByLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_RescuePoint_C*                Rescue                                                 (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Gamestate_C::GetNearestRescueByLocation(const struct FVector& Location, class ABP_RescuePoint_C** Rescue, bool* Found)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Gamestate_C", "GetNearestRescueByLocation");

	Params::BPI_Gamestate_C_GetNearestRescueByLocation Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);

	if (Rescue != nullptr)
		*Rescue = Parms.Rescue;

	if (Found != nullptr)
		*Found = Parms.Found;
}


// Function BPI_Gamestate.BPI_Gamestate_C.GetPawnArray
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class APawn*>                    Array                                                  (Parm, OutParm)

void IBPI_Gamestate_C::GetPawnArray(TArray<class APawn*>* Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Gamestate_C", "GetPawnArray");

	Params::BPI_Gamestate_C_GetPawnArray Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}


// Function BPI_Gamestate.BPI_Gamestate_C.GetPlayersMiddle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Gamestate_C::GetPlayersMiddle(struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Gamestate_C", "GetPlayersMiddle");

	Params::BPI_Gamestate_C_GetPlayersMiddle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function BPI_Gamestate.BPI_Gamestate_C.GetTchat
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FS_TchatElement>          Tchat                                                  (Parm, OutParm)

void IBPI_Gamestate_C::GetTchat(TArray<struct FS_TchatElement>* Tchat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Gamestate_C", "GetTchat");

	Params::BPI_Gamestate_C_GetTchat Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Tchat != nullptr)
		*Tchat = std::move(Parms.Tchat);
}


// Function BPI_Gamestate.BPI_Gamestate_C.GetTimer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Timer                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Gamestate_C::GetTimer(int32* Timer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Gamestate_C", "GetTimer");

	Params::BPI_Gamestate_C_GetTimer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Timer != nullptr)
		*Timer = Parms.Timer;
}


// Function BPI_Gamestate.BPI_Gamestate_C.IncrementSpawnedCharacter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Gamestate_C::IncrementSpawnedCharacter(int32* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Gamestate_C", "IncrementSpawnedCharacter");

	Params::BPI_Gamestate_C_IncrementSpawnedCharacter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BPI_Gamestate.BPI_Gamestate_C.LavaDeath(SRV)
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Gamestate_C::LavaDeath_SRV_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Gamestate_C", "LavaDeath(SRV)");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_Gamestate.BPI_Gamestate_C.NearestRescuePoint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Lava                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_RescuePoint_C*                RescuePoint                                            (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_Gamestate_C::NearestRescuePoint(bool Lava, bool* Found, class ABP_RescuePoint_C** RescuePoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Gamestate_C", "NearestRescuePoint");

	Params::BPI_Gamestate_C_NearestRescuePoint Parms{};

	Parms.Lava = Lava;

	UObject::ProcessEvent(Func, &Parms);

	if (Found != nullptr)
		*Found = Parms.Found;

	if (RescuePoint != nullptr)
		*RescuePoint = Parms.RescuePoint;
}


// Function BPI_Gamestate.BPI_Gamestate_C.SendToChatSRV
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Param_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Message                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Gamestate_C::SendToChatSRV(const class FString& Param_Name, const class FString& Message, const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Gamestate_C", "SendToChatSRV");

	Params::BPI_Gamestate_C_SendToChatSRV Parms{};

	Parms.Param_Name = std::move(Param_Name);
	Parms.Message = std::move(Message);
	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Gamestate.BPI_Gamestate_C.ServerTravel
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void IBPI_Gamestate_C::ServerTravel(const class FString& Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Gamestate_C", "ServerTravel");

	Params::BPI_Gamestate_C_ServerTravel Parms{};

	Parms.Command = std::move(Command);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Gamestate.BPI_Gamestate_C.SetTimer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Timer                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Gamestate_C::SetTimer(int32 Timer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Gamestate_C", "SetTimer");

	Params::BPI_Gamestate_C_SetTimer Parms{};

	Parms.Timer = Timer;

	UObject::ProcessEvent(Func, &Parms);
}

}


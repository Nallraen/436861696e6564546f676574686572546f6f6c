#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PS_Game

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function PS_Game.PS_Game_C.ExecuteUbergraph_PS_Game
// 0x0094 (0x0094 - 0x0000)
struct PS_Game_C_ExecuteUbergraph_PS_Game final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_2;                            // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_3;                            // 0x0034(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_4;                            // 0x0044(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_5;                            // 0x0054(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_6;                            // 0x0064(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_1;                     // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0076(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_1;               // 0x0077(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2EAA[0x3];                                     // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0084(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PS_Game_C_ExecuteUbergraph_PS_Game) == 0x000004, "Wrong alignment on PS_Game_C_ExecuteUbergraph_PS_Game");
static_assert(sizeof(PS_Game_C_ExecuteUbergraph_PS_Game) == 0x000094, "Wrong size on PS_Game_C_ExecuteUbergraph_PS_Game");
static_assert(offsetof(PS_Game_C_ExecuteUbergraph_PS_Game, EntryPoint) == 0x000000, "Member 'PS_Game_C_ExecuteUbergraph_PS_Game::EntryPoint' has a wrong offset!");
static_assert(offsetof(PS_Game_C_ExecuteUbergraph_PS_Game, Temp_struct_Variable) == 0x000004, "Member 'PS_Game_C_ExecuteUbergraph_PS_Game::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(PS_Game_C_ExecuteUbergraph_PS_Game, Temp_struct_Variable_1) == 0x000014, "Member 'PS_Game_C_ExecuteUbergraph_PS_Game::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(PS_Game_C_ExecuteUbergraph_PS_Game, Temp_struct_Variable_2) == 0x000024, "Member 'PS_Game_C_ExecuteUbergraph_PS_Game::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(PS_Game_C_ExecuteUbergraph_PS_Game, Temp_struct_Variable_3) == 0x000034, "Member 'PS_Game_C_ExecuteUbergraph_PS_Game::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(PS_Game_C_ExecuteUbergraph_PS_Game, Temp_struct_Variable_4) == 0x000044, "Member 'PS_Game_C_ExecuteUbergraph_PS_Game::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(PS_Game_C_ExecuteUbergraph_PS_Game, Temp_struct_Variable_5) == 0x000054, "Member 'PS_Game_C_ExecuteUbergraph_PS_Game::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(PS_Game_C_ExecuteUbergraph_PS_Game, Temp_struct_Variable_6) == 0x000064, "Member 'PS_Game_C_ExecuteUbergraph_PS_Game::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(PS_Game_C_ExecuteUbergraph_PS_Game, Temp_bool_IsClosed_Variable) == 0x000074, "Member 'PS_Game_C_ExecuteUbergraph_PS_Game::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(PS_Game_C_ExecuteUbergraph_PS_Game, Temp_bool_IsClosed_Variable_1) == 0x000075, "Member 'PS_Game_C_ExecuteUbergraph_PS_Game::Temp_bool_IsClosed_Variable_1' has a wrong offset!");
static_assert(offsetof(PS_Game_C_ExecuteUbergraph_PS_Game, Temp_bool_Has_Been_Initd_Variable) == 0x000076, "Member 'PS_Game_C_ExecuteUbergraph_PS_Game::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(PS_Game_C_ExecuteUbergraph_PS_Game, Temp_bool_Has_Been_Initd_Variable_1) == 0x000077, "Member 'PS_Game_C_ExecuteUbergraph_PS_Game::Temp_bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(PS_Game_C_ExecuteUbergraph_PS_Game, Temp_int_Variable) == 0x000078, "Member 'PS_Game_C_ExecuteUbergraph_PS_Game::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(PS_Game_C_ExecuteUbergraph_PS_Game, CallFunc_HasAuthority_ReturnValue) == 0x00007C, "Member 'PS_Game_C_ExecuteUbergraph_PS_Game::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(PS_Game_C_ExecuteUbergraph_PS_Game, CallFunc_RandomIntegerInRange_ReturnValue) == 0x000080, "Member 'PS_Game_C_ExecuteUbergraph_PS_Game::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(PS_Game_C_ExecuteUbergraph_PS_Game, K2Node_Select_Default) == 0x000084, "Member 'PS_Game_C_ExecuteUbergraph_PS_Game::K2Node_Select_Default' has a wrong offset!");

// Function PS_Game.PS_Game_C.GetColor
// 0x0010 (0x0010 - 0x0000)
struct PS_Game_C_GetColor final
{
public:
	struct FLinearColor                           Param_Color;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PS_Game_C_GetColor) == 0x000004, "Wrong alignment on PS_Game_C_GetColor");
static_assert(sizeof(PS_Game_C_GetColor) == 0x000010, "Wrong size on PS_Game_C_GetColor");
static_assert(offsetof(PS_Game_C_GetColor, Param_Color) == 0x000000, "Member 'PS_Game_C_GetColor::Param_Color' has a wrong offset!");

// Function PS_Game.PS_Game_C.OnRep_BeginLevelsLoaded
// 0x0040 (0x0040 - 0x0000)
struct PS_Game_C_OnRep_BeginLevelsLoaded final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2EAB[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGS_Game_C*                             K2Node_DynamicCast_AsGS_Game;                      // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PS_Game_C_OnRep_BeginLevelsLoaded) == 0x000008, "Wrong alignment on PS_Game_C_OnRep_BeginLevelsLoaded");
static_assert(sizeof(PS_Game_C_OnRep_BeginLevelsLoaded) == 0x000040, "Wrong size on PS_Game_C_OnRep_BeginLevelsLoaded");
static_assert(offsetof(PS_Game_C_OnRep_BeginLevelsLoaded, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'PS_Game_C_OnRep_BeginLevelsLoaded::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(PS_Game_C_OnRep_BeginLevelsLoaded, CallFunc_GetDisplayName_ReturnValue) == 0x000008, "Member 'PS_Game_C_OnRep_BeginLevelsLoaded::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(PS_Game_C_OnRep_BeginLevelsLoaded, CallFunc_Concat_StrStr_ReturnValue) == 0x000018, "Member 'PS_Game_C_OnRep_BeginLevelsLoaded::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(PS_Game_C_OnRep_BeginLevelsLoaded, CallFunc_GetGameState_ReturnValue) == 0x000028, "Member 'PS_Game_C_OnRep_BeginLevelsLoaded::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(PS_Game_C_OnRep_BeginLevelsLoaded, K2Node_DynamicCast_AsGS_Game) == 0x000030, "Member 'PS_Game_C_OnRep_BeginLevelsLoaded::K2Node_DynamicCast_AsGS_Game' has a wrong offset!");
static_assert(offsetof(PS_Game_C_OnRep_BeginLevelsLoaded, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'PS_Game_C_OnRep_BeginLevelsLoaded::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CustomCar

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_ChoosenChar_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CustomCar.BP_CustomCar_C
// 0x0400 (0x0720 - 0x0320)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_CustomCar_C : public APawn
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0320(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USkeletalMeshComponent*                 DriverMesh;                                        // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Maillons_U4;                                       // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Maillons_U3;                                       // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Maillons_U2;                                       // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Maillons_U1;                                       // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Maillons_U;                                        // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Sit03;                                             // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Sit02;                                             // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Sit01;                                             // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Planche;                                           // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        EngineSound;                                       // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               ParticleSystem1;                                   // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               ParticleSystem;                                    // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow1;                                            // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        ForwardArrow;                                      // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       SteerSocket;                                       // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Camera;                                            // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm;                                         // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DriverSocket;                                      // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       LeftHand;                                          // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       RightHand;                                         // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Volant;                                            // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       Widget;                                            // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       FWR;                                               // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       FWL;                                               // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       BWL;                                               // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Wheelfr;                                           // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Wheelfl;                                           // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Wheelbl;                                           // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Wheelbr;                                           // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       BWR;                                               // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        ArrowFR;                                           // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        ArrowFL;                                           // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        ArrowBL;                                           // 0x0438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        ArrowBR;                                           // 0x0440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            CarStabilize_TL__Direction_B50896E84AD91349FC81AEBBBE80F726; // 0x0450(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3501[0x7];                                     // 0x0451(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     CarStabilize_TL;                                   // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        TraceLengthFront;                                  // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HoverForce;                                        // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Gravity;                                           // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ChoosenChar                                 Driver;                                            // 0x0478(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3502[0x7];                                     // 0x0479(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         AttachedCharacters;                                // 0x0480(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	double                                        Speed;                                             // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SteerForce;                                        // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LerpedMoveForwardAxis;                             // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Grounded;                                          // 0x04A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3503[0x7];                                     // 0x04A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WBL_InitLoc;                                       // 0x04B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WFL_InitLoc;                                       // 0x04C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WBR_InitLoc;                                       // 0x04E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WFR_InitLoc;                                       // 0x04F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            SteerCurve;                                        // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Acceleration;                                      // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MoveForwardAxis;                                   // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LerpedMoveRightAxis;                               // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MoveRightAxis;                                     // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Gate;                                              // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FTransform                             InitTransform;                                     // 0x0540(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WheelHeightFront;                                  // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ServerLocation;                                    // 0x05A8(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ServerVelocity;                                    // 0x05C0(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3504[0x8];                                     // 0x05D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RepTransform;                                      // 0x05E0(0x0060)(Edit, BlueprintVisible, Net, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  DriverToDetach;                                    // 0x0640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        TraceLengthBack;                                   // 0x0648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WheelHeightBack;                                   // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Carosse;                                           // 0x0658(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3505[0x3];                                     // 0x0659(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         New_Length_Car_;                                   // 0x065C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         New_Length_Human_;                                 // 0x0660(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanLeave;                                          // 0x0664(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3506[0x3];                                     // 0x0665(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index_BP_CustomCar_C;                              // 0x0668(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          CanGoBack;                                         // 0x066C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Elevator_Truck;                                 // 0x066D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3507[0x2];                                     // 0x066E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<E_ChoosenChar>                         CharactersPassengers;                              // 0x0670(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        ExitCarHeight;                                     // 0x0680(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Passenger_Camera_Offset;                           // 0x0688(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Passenger_Target_Arm_Length;                       // 0x06A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartCar;                                          // 0x06A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Debug;                                             // 0x06A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_3508[0x6];                                     // 0x06AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDrive_AnimBP_C*                        DriverAnimBP;                                      // 0x06B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_Lava_C*                             LavaRef;                                           // 0x06B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PreviousLocation;                                  // 0x06C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Velocity;                                          // 0x06D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UArrowComponent*>                CarArrows;                                         // 0x06F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FVector                                CarUpVector;                                       // 0x0700(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddImpulseToVehicle(const struct FVector& Impulse);
	void AdditionalGravity();
	void AddPassengerCloth(class USkeletalMesh* NewMesh, const struct FLinearColor& Color, bool CustomMat, class USkeletalMeshComponent* SkeletalMesh, class UMaterialInterface* Material);
	void AutoFlipCar();
	void CalculateVelocity();
	void CanBeUsed(bool* Param_CanBeUsed);
	void CarStabilize_TL__FinishedFunc();
	void CarStabilize_TL__UpdateFunc();
	void CheckClientDriverDisconnect();
	void CheckUnderLava();
	void Constraint();
	void Detected(bool Param_Detected, class APlayerController* PC);
	void DriveForwardGP_Completed();
	void EventDriveForwardGP(double Axis);
	void ExecuteUbergraph_BP_CustomCar(int32 EntryPoint);
	void F_MoveForward(double Param_MoveForwardAxis);
	void F_MoveRight(double Param_MoveRightAxis);
	void GetArrows(TArray<class UArrowComponent*>* Array);
	void GetAttachedComponent(class UPrimitiveComponent** Comp);
	void GetCosmeticSocket(class UPrimitiveComponent** Comp);
	class UPrimitiveComponent* GetDriverSocket();
	void GetForwardRotation(struct FRotator* Rot);
	void GetForwardSpeed(double* Param_Speed);
	void GetRadialVelocityZ(double* Vel);
	void GetRootMesh(class UPrimitiveComponent** Mesh);
	void HorseGrounded(bool* Param_Grounded);
	void Hover(bool* Param_Grounded);
	void Input_Leave_Tyro();
	void IsCarosse(bool* Param_Carosse);
	void IsCarVisible(bool* Visible);
	bool IsDriverEmpty();
	void IsPossessed(bool* Possessed);
	void Jump_Input();
	void LeaveVehicle();
	void LimitVelocity(double Max);
	void LookRight(double Axis);
	void LookUp(double Axis);
	void MoveForward(double Axis);
	void MoveForwardEvent(double Param_MoveForwardAxis);
	void MoveFwdAll(double Axis);
	void MoveFwdSRV(double Axis);
	void MovementReplication();
	void MoveRight(double Axis);
	void MoveRightAll(double Axis);
	void MoveRightSRV(double Axis);
	void OnclientDisconnectAll();
	void OnClientDriverDisconnect_srv_();
	void OnDriverCarosseInvalid();
	void OnDriverCarosseValid();
	void OnPossessedOwner();
	void OnRep_Driver();
	void PossessedAll();
	void RaceEnd();
	void ReceiveBeginPlay();
	void ReceivePossessed(class AController* NewController);
	void ReceiveTick(float DeltaSeconds);
	void Refresh_Skin(class USkeletalMeshComponent* Mesh, E_ChoosenChar Character);
	void RefreshPassagers();
	void RefreshSkin01All(E_ChoosenChar Character);
	void RefreshSkin02All(E_ChoosenChar Character);
	void RefreshSkin03All(E_ChoosenChar Character);
	void ReplicateMov(const struct FTransform& Param_RepTransform, const struct FVector& Param_ServerVelocity);
	void ResetAll(const struct FTransform& NewTransform);
	void ResetTransform();
	void ResetVelocity();
	void ResetWheelLocationByTag(class FName Selection);
	void SetWheelLoc(class USceneComponent* WheelMesh, const struct FVector& InVec);
	void SnapDriverToVehicle();
	void Sprint(bool Param_Sprint);
	void Stabilize(double InterpSpeed);
	void StabilizeVelocity();
	void Stance();
	void SwitchCarVisibility(bool bNewVisibility);
	void TestControlNotify();
	void Transfer_Chains_to_Human__Srv_(const class APawn* InDriver);
	void Transfer_Chains_to_Vehicle__Srv_(const class UObject* InDriver);
	void TransferLoggedPlayerToCar(class AController* Param_Controller);
	void TransferOtherPlayersToCar(class UObject* DriverController);
	void UnpossessVehicle();
	void UnpossessVehicleAll();
	void Update_Driver_Hands();
	void UpdateDamping();
	void UpdateMoveForward();
	void UpdateSound();
	void UpdateSpeed();
	void UpdateSteerFromVelocity(double Steer, double* NewSteer);
	void Use(class AController* Param_Controller, class AActor* ControlledActor);
	void UserConstructionScript();
	void WheelLeftRight(double NewRotation_Yaw);
	void WheelRotation();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CustomCar_C">();
	}
	static class ABP_CustomCar_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CustomCar_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_CustomCar_C) == 0x000010, "Wrong alignment on ABP_CustomCar_C");
static_assert(sizeof(ABP_CustomCar_C) == 0x000720, "Wrong size on ABP_CustomCar_C");
static_assert(offsetof(ABP_CustomCar_C, UberGraphFrame) == 0x000320, "Member 'ABP_CustomCar_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, DriverMesh) == 0x000328, "Member 'ABP_CustomCar_C::DriverMesh' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, Maillons_U4) == 0x000330, "Member 'ABP_CustomCar_C::Maillons_U4' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, Maillons_U3) == 0x000338, "Member 'ABP_CustomCar_C::Maillons_U3' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, Maillons_U2) == 0x000340, "Member 'ABP_CustomCar_C::Maillons_U2' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, Maillons_U1) == 0x000348, "Member 'ABP_CustomCar_C::Maillons_U1' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, Maillons_U) == 0x000350, "Member 'ABP_CustomCar_C::Maillons_U' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, Sit03) == 0x000358, "Member 'ABP_CustomCar_C::Sit03' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, Sit02) == 0x000360, "Member 'ABP_CustomCar_C::Sit02' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, Sit01) == 0x000368, "Member 'ABP_CustomCar_C::Sit01' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, Planche) == 0x000370, "Member 'ABP_CustomCar_C::Planche' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, EngineSound) == 0x000378, "Member 'ABP_CustomCar_C::EngineSound' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, ParticleSystem1) == 0x000380, "Member 'ABP_CustomCar_C::ParticleSystem1' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, ParticleSystem) == 0x000388, "Member 'ABP_CustomCar_C::ParticleSystem' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, Arrow1) == 0x000390, "Member 'ABP_CustomCar_C::Arrow1' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, ForwardArrow) == 0x000398, "Member 'ABP_CustomCar_C::ForwardArrow' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, SteerSocket) == 0x0003A0, "Member 'ABP_CustomCar_C::SteerSocket' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, Camera) == 0x0003A8, "Member 'ABP_CustomCar_C::Camera' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, SpringArm) == 0x0003B0, "Member 'ABP_CustomCar_C::SpringArm' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, DriverSocket) == 0x0003B8, "Member 'ABP_CustomCar_C::DriverSocket' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, LeftHand) == 0x0003C0, "Member 'ABP_CustomCar_C::LeftHand' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, RightHand) == 0x0003C8, "Member 'ABP_CustomCar_C::RightHand' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, Volant) == 0x0003D0, "Member 'ABP_CustomCar_C::Volant' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, Sphere) == 0x0003D8, "Member 'ABP_CustomCar_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, Widget) == 0x0003E0, "Member 'ABP_CustomCar_C::Widget' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, FWR) == 0x0003E8, "Member 'ABP_CustomCar_C::FWR' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, FWL) == 0x0003F0, "Member 'ABP_CustomCar_C::FWL' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, BWL) == 0x0003F8, "Member 'ABP_CustomCar_C::BWL' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, Wheelfr) == 0x000400, "Member 'ABP_CustomCar_C::Wheelfr' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, Wheelfl) == 0x000408, "Member 'ABP_CustomCar_C::Wheelfl' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, Wheelbl) == 0x000410, "Member 'ABP_CustomCar_C::Wheelbl' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, Wheelbr) == 0x000418, "Member 'ABP_CustomCar_C::Wheelbr' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, BWR) == 0x000420, "Member 'ABP_CustomCar_C::BWR' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, ArrowFR) == 0x000428, "Member 'ABP_CustomCar_C::ArrowFR' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, ArrowFL) == 0x000430, "Member 'ABP_CustomCar_C::ArrowFL' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, ArrowBL) == 0x000438, "Member 'ABP_CustomCar_C::ArrowBL' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, ArrowBR) == 0x000440, "Member 'ABP_CustomCar_C::ArrowBR' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, StaticMesh) == 0x000448, "Member 'ABP_CustomCar_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, CarStabilize_TL__Direction_B50896E84AD91349FC81AEBBBE80F726) == 0x000450, "Member 'ABP_CustomCar_C::CarStabilize_TL__Direction_B50896E84AD91349FC81AEBBBE80F726' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, CarStabilize_TL) == 0x000458, "Member 'ABP_CustomCar_C::CarStabilize_TL' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, TraceLengthFront) == 0x000460, "Member 'ABP_CustomCar_C::TraceLengthFront' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, HoverForce) == 0x000468, "Member 'ABP_CustomCar_C::HoverForce' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, Gravity) == 0x000470, "Member 'ABP_CustomCar_C::Gravity' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, Driver) == 0x000478, "Member 'ABP_CustomCar_C::Driver' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, AttachedCharacters) == 0x000480, "Member 'ABP_CustomCar_C::AttachedCharacters' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, Speed) == 0x000490, "Member 'ABP_CustomCar_C::Speed' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, SteerForce) == 0x000498, "Member 'ABP_CustomCar_C::SteerForce' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, LerpedMoveForwardAxis) == 0x0004A0, "Member 'ABP_CustomCar_C::LerpedMoveForwardAxis' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, Grounded) == 0x0004A8, "Member 'ABP_CustomCar_C::Grounded' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, WBL_InitLoc) == 0x0004B0, "Member 'ABP_CustomCar_C::WBL_InitLoc' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, WFL_InitLoc) == 0x0004C8, "Member 'ABP_CustomCar_C::WFL_InitLoc' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, WBR_InitLoc) == 0x0004E0, "Member 'ABP_CustomCar_C::WBR_InitLoc' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, WFR_InitLoc) == 0x0004F8, "Member 'ABP_CustomCar_C::WFR_InitLoc' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, SteerCurve) == 0x000510, "Member 'ABP_CustomCar_C::SteerCurve' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, Acceleration) == 0x000518, "Member 'ABP_CustomCar_C::Acceleration' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, MoveForwardAxis) == 0x000520, "Member 'ABP_CustomCar_C::MoveForwardAxis' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, LerpedMoveRightAxis) == 0x000528, "Member 'ABP_CustomCar_C::LerpedMoveRightAxis' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, MoveRightAxis) == 0x000530, "Member 'ABP_CustomCar_C::MoveRightAxis' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, Gate) == 0x000538, "Member 'ABP_CustomCar_C::Gate' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, InitTransform) == 0x000540, "Member 'ABP_CustomCar_C::InitTransform' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, WheelHeightFront) == 0x0005A0, "Member 'ABP_CustomCar_C::WheelHeightFront' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, ServerLocation) == 0x0005A8, "Member 'ABP_CustomCar_C::ServerLocation' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, ServerVelocity) == 0x0005C0, "Member 'ABP_CustomCar_C::ServerVelocity' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, RepTransform) == 0x0005E0, "Member 'ABP_CustomCar_C::RepTransform' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, DriverToDetach) == 0x000640, "Member 'ABP_CustomCar_C::DriverToDetach' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, TraceLengthBack) == 0x000648, "Member 'ABP_CustomCar_C::TraceLengthBack' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, WheelHeightBack) == 0x000650, "Member 'ABP_CustomCar_C::WheelHeightBack' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, Carosse) == 0x000658, "Member 'ABP_CustomCar_C::Carosse' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, New_Length_Car_) == 0x00065C, "Member 'ABP_CustomCar_C::New_Length_Car_' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, New_Length_Human_) == 0x000660, "Member 'ABP_CustomCar_C::New_Length_Human_' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, CanLeave) == 0x000664, "Member 'ABP_CustomCar_C::CanLeave' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, Index_BP_CustomCar_C) == 0x000668, "Member 'ABP_CustomCar_C::Index_BP_CustomCar_C' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, CanGoBack) == 0x00066C, "Member 'ABP_CustomCar_C::CanGoBack' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, Is_Elevator_Truck) == 0x00066D, "Member 'ABP_CustomCar_C::Is_Elevator_Truck' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, CharactersPassengers) == 0x000670, "Member 'ABP_CustomCar_C::CharactersPassengers' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, ExitCarHeight) == 0x000680, "Member 'ABP_CustomCar_C::ExitCarHeight' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, Passenger_Camera_Offset) == 0x000688, "Member 'ABP_CustomCar_C::Passenger_Camera_Offset' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, Passenger_Target_Arm_Length) == 0x0006A0, "Member 'ABP_CustomCar_C::Passenger_Target_Arm_Length' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, StartCar) == 0x0006A8, "Member 'ABP_CustomCar_C::StartCar' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, Debug) == 0x0006A9, "Member 'ABP_CustomCar_C::Debug' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, DriverAnimBP) == 0x0006B0, "Member 'ABP_CustomCar_C::DriverAnimBP' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, LavaRef) == 0x0006B8, "Member 'ABP_CustomCar_C::LavaRef' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, PreviousLocation) == 0x0006C0, "Member 'ABP_CustomCar_C::PreviousLocation' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, Velocity) == 0x0006D8, "Member 'ABP_CustomCar_C::Velocity' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, CarArrows) == 0x0006F0, "Member 'ABP_CustomCar_C::CarArrows' has a wrong offset!");
static_assert(offsetof(ABP_CustomCar_C, CarUpVector) == 0x000700, "Member 'ABP_CustomCar_C::CarUpVector' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Spline_Plateformer_BP

#include "Basic.hpp"

#include "Spline_Plateformer_BP_classes.hpp"
#include "Spline_Plateformer_BP_parameters.hpp"


namespace SDK
{

// Function Spline_Plateformer_BP.Spline_Plateformer_BP_C.BndEvt__Spline_Plateformer_BP_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ASpline_Plateformer_BP_C::BndEvt__Spline_Plateformer_BP_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Spline_Plateformer_BP_C", "BndEvt__Spline_Plateformer_BP_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");

	Params::Spline_Plateformer_BP_C_BndEvt__Spline_Plateformer_BP_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Spline_Plateformer_BP.Spline_Plateformer_BP_C.BndEvt__Spline_Plateformer_BP_Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASpline_Plateformer_BP_C::BndEvt__Spline_Plateformer_BP_Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Spline_Plateformer_BP_C", "BndEvt__Spline_Plateformer_BP_Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");

	Params::Spline_Plateformer_BP_C_BndEvt__Spline_Plateformer_BP_Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Spline_Plateformer_BP.Spline_Plateformer_BP_C.ExecuteUbergraph_Spline_Plateformer_BP
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASpline_Plateformer_BP_C::ExecuteUbergraph_Spline_Plateformer_BP(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Spline_Plateformer_BP_C", "ExecuteUbergraph_Spline_Plateformer_BP");

	Params::Spline_Plateformer_BP_C_ExecuteUbergraph_Spline_Plateformer_BP Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Spline_Plateformer_BP.Spline_Plateformer_BP_C.Generate Path
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ASpline_Plateformer_BP_C::Generate_Path()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Spline_Plateformer_BP_C", "Generate Path");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Spline_Plateformer_BP.Spline_Plateformer_BP_C.IsActivated
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Activated                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASpline_Plateformer_BP_C::IsActivated(bool* Activated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Spline_Plateformer_BP_C", "IsActivated");

	Params::Spline_Plateformer_BP_C_IsActivated Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Activated != nullptr)
		*Activated = Parms.Activated;
}


// Function Spline_Plateformer_BP.Spline_Plateformer_BP_C.Pushed
// (Public, BlueprintCallable, BlueprintEvent)

void ASpline_Plateformer_BP_C::Pushed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Spline_Plateformer_BP_C", "Pushed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Spline_Plateformer_BP.Spline_Plateformer_BP_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ASpline_Plateformer_BP_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Spline_Plateformer_BP_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Spline_Plateformer_BP.Spline_Plateformer_BP_C.Released
// (Public, BlueprintCallable, BlueprintEvent)

void ASpline_Plateformer_BP_C::Released()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Spline_Plateformer_BP_C", "Released");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Spline_Plateformer_BP.Spline_Plateformer_BP_C.ResetSpawn
// (BlueprintCallable, BlueprintEvent)

void ASpline_Plateformer_BP_C::ResetSpawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Spline_Plateformer_BP_C", "ResetSpawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Spline_Plateformer_BP.Spline_Plateformer_BP_C.SpawnOnAll
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ASpline_Plateformer_BP_C::SpawnOnAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Spline_Plateformer_BP_C", "SpawnOnAll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Spline_Plateformer_BP.Spline_Plateformer_BP_C.Timeline__FinishedFunc
// (BlueprintEvent)

void ASpline_Plateformer_BP_C::Timeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Spline_Plateformer_BP_C", "Timeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Spline_Plateformer_BP.Spline_Plateformer_BP_C.Timeline__UpdateFunc
// (BlueprintEvent)

void ASpline_Plateformer_BP_C::Timeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Spline_Plateformer_BP_C", "Timeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Spline_Plateformer_BP.Spline_Plateformer_BP_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ASpline_Plateformer_BP_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Spline_Plateformer_BP_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}

}


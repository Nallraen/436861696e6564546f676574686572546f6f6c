#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Character

#include "Basic.hpp"

#include "E_ChoosenChar_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ALS_RotationMode_structs.hpp"
#include "Engine_structs.hpp"
#include "ALS_MovementAction_structs.hpp"
#include "ALS_MovementState_structs.hpp"
#include "Mantle_Asset_structs.hpp"
#include "ALS_Gait_structs.hpp"
#include "ALS_Stance_structs.hpp"
#include "ALS_ComponentAndTransform_structs.hpp"
#include "ALS_ViewMode_structs.hpp"
#include "ALS_OverlayState_structs.hpp"
#include "MantleType_structs.hpp"
#include "Mantle_TraceSettings_structs.hpp"
#include "Mantle_Params_structs.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK::Params
{

// Function BP_Character.BP_Character_C.ActivateCollisions
// 0x0001 (0x0001 - 0x0000)
struct BP_Character_C_ActivateCollisions final
{
public:
	bool                                          Active;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_ActivateCollisions) == 0x000001, "Wrong alignment on BP_Character_C_ActivateCollisions");
static_assert(sizeof(BP_Character_C_ActivateCollisions) == 0x000001, "Wrong size on BP_Character_C_ActivateCollisions");
static_assert(offsetof(BP_Character_C_ActivateCollisions, Active) == 0x000000, "Member 'BP_Character_C_ActivateCollisions::Active' has a wrong offset!");

// Function BP_Character.BP_Character_C.AdaptSwimCollision
// 0x0001 (0x0001 - 0x0000)
struct BP_Character_C_AdaptSwimCollision final
{
public:
	bool                                          Param_Swim;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_AdaptSwimCollision) == 0x000001, "Wrong alignment on BP_Character_C_AdaptSwimCollision");
static_assert(sizeof(BP_Character_C_AdaptSwimCollision) == 0x000001, "Wrong size on BP_Character_C_AdaptSwimCollision");
static_assert(offsetof(BP_Character_C_AdaptSwimCollision, Param_Swim) == 0x000000, "Member 'BP_Character_C_AdaptSwimCollision::Param_Swim' has a wrong offset!");

// Function BP_Character.BP_Character_C.Add Chain
// 0x0018 (0x0018 - 0x0000)
struct BP_Character_C_Add_Chain final
{
public:
	const class APawn*                            OtherCharacter;                                    // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_NewChain_C*                         CallFunc_AddPhysX_Chain_ReturnValue;               // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_Add_Chain) == 0x000008, "Wrong alignment on BP_Character_C_Add_Chain");
static_assert(sizeof(BP_Character_C_Add_Chain) == 0x000018, "Wrong size on BP_Character_C_Add_Chain");
static_assert(offsetof(BP_Character_C_Add_Chain, OtherCharacter) == 0x000000, "Member 'BP_Character_C_Add_Chain::OtherCharacter' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Add_Chain, CallFunc_AddPhysX_Chain_ReturnValue) == 0x000008, "Member 'BP_Character_C_Add_Chain::CallFunc_AddPhysX_Chain_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Add_Chain, CallFunc_Array_AddUnique_ReturnValue) == 0x000010, "Member 'BP_Character_C_Add_Chain::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.Add Character Constraint
// 0x0008 (0x0008 - 0x0000)
struct BP_Character_C_Add_Character_Constraint final
{
public:
	class AActor*                                 Constraint;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_Add_Character_Constraint) == 0x000008, "Wrong alignment on BP_Character_C_Add_Character_Constraint");
static_assert(sizeof(BP_Character_C_Add_Character_Constraint) == 0x000008, "Wrong size on BP_Character_C_Add_Character_Constraint");
static_assert(offsetof(BP_Character_C_Add_Character_Constraint, Constraint) == 0x000000, "Member 'BP_Character_C_Add_Character_Constraint::Constraint' has a wrong offset!");

// Function BP_Character.BP_Character_C.AddAttachedCharacter
// 0x0008 (0x0008 - 0x0000)
struct BP_Character_C_AddAttachedCharacter final
{
public:
	class APawn*                                  Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_AddAttachedCharacter) == 0x000008, "Wrong alignment on BP_Character_C_AddAttachedCharacter");
static_assert(sizeof(BP_Character_C_AddAttachedCharacter) == 0x000008, "Wrong size on BP_Character_C_AddAttachedCharacter");
static_assert(offsetof(BP_Character_C_AddAttachedCharacter, Character) == 0x000000, "Member 'BP_Character_C_AddAttachedCharacter::Character' has a wrong offset!");

// Function BP_Character.BP_Character_C.AddChainPhysic
// 0x0010 (0x0010 - 0x0000)
struct BP_Character_C_AddChainPhysic final
{
public:
	class UObject*                                Physics;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Comp;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_AddChainPhysic) == 0x000008, "Wrong alignment on BP_Character_C_AddChainPhysic");
static_assert(sizeof(BP_Character_C_AddChainPhysic) == 0x000010, "Wrong size on BP_Character_C_AddChainPhysic");
static_assert(offsetof(BP_Character_C_AddChainPhysic, Physics) == 0x000000, "Member 'BP_Character_C_AddChainPhysic::Physics' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AddChainPhysic, Comp) == 0x000008, "Member 'BP_Character_C_AddChainPhysic::Comp' has a wrong offset!");

// Function BP_Character.BP_Character_C.AddChainSocket
// 0x0008 (0x0008 - 0x0000)
struct BP_Character_C_AddChainSocket final
{
public:
	class UPrimitiveComponent*                    Socket;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_AddChainSocket) == 0x000008, "Wrong alignment on BP_Character_C_AddChainSocket");
static_assert(sizeof(BP_Character_C_AddChainSocket) == 0x000008, "Wrong size on BP_Character_C_AddChainSocket");
static_assert(offsetof(BP_Character_C_AddChainSocket, Socket) == 0x000000, "Member 'BP_Character_C_AddChainSocket::Socket' has a wrong offset!");

// Function BP_Character.BP_Character_C.AddCloth
// 0x00B0 (0x00B0 - 0x0000)
struct BP_Character_C_AddCloth final
{
public:
	class USkeletalMesh*                          NewMesh;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CustomMat;                                         // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_312D[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Material;                                          // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_312E[0x8];                                     // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Temp_struct_Variable;                              // 0x0030(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 CallFunc_AddComponent_ReturnValue;                 // 0x0090(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_312F[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     CallFunc_GetMaterial_ReturnValue;                  // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_AddCloth) == 0x000010, "Wrong alignment on BP_Character_C_AddCloth");
static_assert(sizeof(BP_Character_C_AddCloth) == 0x0000B0, "Wrong size on BP_Character_C_AddCloth");
static_assert(offsetof(BP_Character_C_AddCloth, NewMesh) == 0x000000, "Member 'BP_Character_C_AddCloth::NewMesh' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AddCloth, Color) == 0x000008, "Member 'BP_Character_C_AddCloth::Color' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AddCloth, CustomMat) == 0x000018, "Member 'BP_Character_C_AddCloth::CustomMat' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AddCloth, Material) == 0x000020, "Member 'BP_Character_C_AddCloth::Material' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AddCloth, Temp_struct_Variable) == 0x000030, "Member 'BP_Character_C_AddCloth::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AddCloth, CallFunc_AddComponent_ReturnValue) == 0x000090, "Member 'BP_Character_C_AddCloth::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AddCloth, CallFunc_K2_AttachToComponent_ReturnValue) == 0x000098, "Member 'BP_Character_C_AddCloth::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AddCloth, CallFunc_GetMaterial_ReturnValue) == 0x0000A0, "Member 'BP_Character_C_AddCloth::CallFunc_GetMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AddCloth, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x0000A8, "Member 'BP_Character_C_AddCloth::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.AddClothes
// 0x0010 (0x0010 - 0x0000)
struct BP_Character_C_AddClothes final
{
public:
	struct FLinearColor                           CallFunc_GetCharacterColor_Color;                  // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_AddClothes) == 0x000004, "Wrong alignment on BP_Character_C_AddClothes");
static_assert(sizeof(BP_Character_C_AddClothes) == 0x000010, "Wrong size on BP_Character_C_AddClothes");
static_assert(offsetof(BP_Character_C_AddClothes, CallFunc_GetCharacterColor_Color) == 0x000000, "Member 'BP_Character_C_AddClothes::CallFunc_GetCharacterColor_Color' has a wrong offset!");

// Function BP_Character.BP_Character_C.AddConnectedChain
// 0x0008 (0x0008 - 0x0000)
struct BP_Character_C_AddConnectedChain final
{
public:
	class AActor*                                 Chain;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_AddConnectedChain) == 0x000008, "Wrong alignment on BP_Character_C_AddConnectedChain");
static_assert(sizeof(BP_Character_C_AddConnectedChain) == 0x000008, "Wrong size on BP_Character_C_AddConnectedChain");
static_assert(offsetof(BP_Character_C_AddConnectedChain, Chain) == 0x000000, "Member 'BP_Character_C_AddConnectedChain::Chain' has a wrong offset!");

// Function BP_Character.BP_Character_C.AddForce
// 0x0030 (0x0030 - 0x0000)
struct BP_Character_C_AddForce final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MakeSlide;                                         // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3130[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        StabilizeSpeed;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PushedByTrain;                                     // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShuffleFixToGround;                                // 0x0029(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_AddForce) == 0x000008, "Wrong alignment on BP_Character_C_AddForce");
static_assert(sizeof(BP_Character_C_AddForce) == 0x000030, "Wrong size on BP_Character_C_AddForce");
static_assert(offsetof(BP_Character_C_AddForce, Vector) == 0x000000, "Member 'BP_Character_C_AddForce::Vector' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AddForce, MakeSlide) == 0x000018, "Member 'BP_Character_C_AddForce::MakeSlide' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AddForce, StabilizeSpeed) == 0x000020, "Member 'BP_Character_C_AddForce::StabilizeSpeed' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AddForce, PushedByTrain) == 0x000028, "Member 'BP_Character_C_AddForce::PushedByTrain' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AddForce, ShuffleFixToGround) == 0x000029, "Member 'BP_Character_C_AddForce::ShuffleFixToGround' has a wrong offset!");

// Function BP_Character.BP_Character_C.AddImpulseToCar
// 0x0018 (0x0018 - 0x0000)
struct BP_Character_C_AddImpulseToCar final
{
public:
	struct FVector                                Impulse;                                           // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_AddImpulseToCar) == 0x000008, "Wrong alignment on BP_Character_C_AddImpulseToCar");
static_assert(sizeof(BP_Character_C_AddImpulseToCar) == 0x000018, "Wrong size on BP_Character_C_AddImpulseToCar");
static_assert(offsetof(BP_Character_C_AddImpulseToCar, Impulse) == 0x000000, "Member 'BP_Character_C_AddImpulseToCar::Impulse' has a wrong offset!");

// Function BP_Character.BP_Character_C.AddImpulseToCharacter
// 0x0020 (0x0020 - 0x0000)
struct BP_Character_C_AddImpulseToCharacter final
{
public:
	struct FVector                                Impulse;                                           // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OverrideVelocityZ;                                 // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StopClimb;                                         // 0x0019(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_ShuffleAirControl;                           // 0x001A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreDoOnce;                                      // 0x001B(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_PushedByObstacle;                            // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_AddImpulseToCharacter) == 0x000008, "Wrong alignment on BP_Character_C_AddImpulseToCharacter");
static_assert(sizeof(BP_Character_C_AddImpulseToCharacter) == 0x000020, "Wrong size on BP_Character_C_AddImpulseToCharacter");
static_assert(offsetof(BP_Character_C_AddImpulseToCharacter, Impulse) == 0x000000, "Member 'BP_Character_C_AddImpulseToCharacter::Impulse' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AddImpulseToCharacter, OverrideVelocityZ) == 0x000018, "Member 'BP_Character_C_AddImpulseToCharacter::OverrideVelocityZ' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AddImpulseToCharacter, StopClimb) == 0x000019, "Member 'BP_Character_C_AddImpulseToCharacter::StopClimb' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AddImpulseToCharacter, Param_ShuffleAirControl) == 0x00001A, "Member 'BP_Character_C_AddImpulseToCharacter::Param_ShuffleAirControl' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AddImpulseToCharacter, IgnoreDoOnce) == 0x00001B, "Member 'BP_Character_C_AddImpulseToCharacter::IgnoreDoOnce' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AddImpulseToCharacter, Param_PushedByObstacle) == 0x00001C, "Member 'BP_Character_C_AddImpulseToCharacter::Param_PushedByObstacle' has a wrong offset!");

// Function BP_Character.BP_Character_C.AddPhysX_Chain
// 0x00E0 (0x00E0 - 0x0000)
struct BP_Character_C_AddPhysX_Chain final
{
public:
	const class APawn*                            OtherAttachedPawn;                                 // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_NewChain_C*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue_1;             // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue_1;          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           K2Node_MakeArray_Array;                            // 0x0040(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3131[0x8];                                     // 0x0068(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0070(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_NewChain_C*                         CallFunc_FinishSpawningActor_ReturnValue;          // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_AddPhysX_Chain) == 0x000010, "Wrong alignment on BP_Character_C_AddPhysX_Chain");
static_assert(sizeof(BP_Character_C_AddPhysX_Chain) == 0x0000E0, "Wrong size on BP_Character_C_AddPhysX_Chain");
static_assert(offsetof(BP_Character_C_AddPhysX_Chain, OtherAttachedPawn) == 0x000000, "Member 'BP_Character_C_AddPhysX_Chain::OtherAttachedPawn' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AddPhysX_Chain, ReturnValue) == 0x000008, "Member 'BP_Character_C_AddPhysX_Chain::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AddPhysX_Chain, CallFunc_GetDisplayName_ReturnValue) == 0x000010, "Member 'BP_Character_C_AddPhysX_Chain::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AddPhysX_Chain, CallFunc_GetDisplayName_ReturnValue_1) == 0x000020, "Member 'BP_Character_C_AddPhysX_Chain::CallFunc_GetDisplayName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AddPhysX_Chain, CallFunc_Conv_StringToName_ReturnValue) == 0x000030, "Member 'BP_Character_C_AddPhysX_Chain::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AddPhysX_Chain, CallFunc_Conv_StringToName_ReturnValue_1) == 0x000038, "Member 'BP_Character_C_AddPhysX_Chain::CallFunc_Conv_StringToName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AddPhysX_Chain, K2Node_MakeArray_Array) == 0x000040, "Member 'BP_Character_C_AddPhysX_Chain::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AddPhysX_Chain, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000050, "Member 'BP_Character_C_AddPhysX_Chain::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AddPhysX_Chain, CallFunc_MakeTransform_ReturnValue) == 0x000070, "Member 'BP_Character_C_AddPhysX_Chain::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AddPhysX_Chain, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x0000D0, "Member 'BP_Character_C_AddPhysX_Chain::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AddPhysX_Chain, CallFunc_FinishSpawningActor_ReturnValue) == 0x0000D8, "Member 'BP_Character_C_AddPhysX_Chain::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.AddWaterVolume
// 0x0001 (0x0001 - 0x0000)
struct BP_Character_C_AddWaterVolume final
{
public:
	bool                                          Remove;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_AddWaterVolume) == 0x000001, "Wrong alignment on BP_Character_C_AddWaterVolume");
static_assert(sizeof(BP_Character_C_AddWaterVolume) == 0x000001, "Wrong size on BP_Character_C_AddWaterVolume");
static_assert(offsetof(BP_Character_C_AddWaterVolume, Remove) == 0x000000, "Member 'BP_Character_C_AddWaterVolume::Remove' has a wrong offset!");

// Function BP_Character.BP_Character_C.AddZForceToPulledCharacter
// 0x0018 (0x0018 - 0x0000)
struct BP_Character_C_AddZForceToPulledCharacter final
{
public:
	TScriptInterface<class IBPI_Character_C>      K2Node_DynamicCast_AsBPI_Character;                // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_AddZForceToPulledCharacter) == 0x000008, "Wrong alignment on BP_Character_C_AddZForceToPulledCharacter");
static_assert(sizeof(BP_Character_C_AddZForceToPulledCharacter) == 0x000018, "Wrong size on BP_Character_C_AddZForceToPulledCharacter");
static_assert(offsetof(BP_Character_C_AddZForceToPulledCharacter, K2Node_DynamicCast_AsBPI_Character) == 0x000000, "Member 'BP_Character_C_AddZForceToPulledCharacter::K2Node_DynamicCast_AsBPI_Character' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AddZForceToPulledCharacter, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_Character_C_AddZForceToPulledCharacter::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AddZForceToPulledCharacter, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'BP_Character_C_AddZForceToPulledCharacter::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.ALS_Tick
// 0x0068 (0x0068 - 0x0000)
struct BP_Character_C_ALS_Tick final
{
public:
	double                                        CallFunc_CalculateGroundedRotationRate_ReturnValue; // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDesiredMoveDirection_ReturnValue;      // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromX_ReturnValue;                 // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3132[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_MantleCheck_CanClimb_Vault;               // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_ALS_Tick) == 0x000008, "Wrong alignment on BP_Character_C_ALS_Tick");
static_assert(sizeof(BP_Character_C_ALS_Tick) == 0x000068, "Wrong size on BP_Character_C_ALS_Tick");
static_assert(offsetof(BP_Character_C_ALS_Tick, CallFunc_CalculateGroundedRotationRate_ReturnValue) == 0x000000, "Member 'BP_Character_C_ALS_Tick::CallFunc_CalculateGroundedRotationRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ALS_Tick, CallFunc_GetDesiredMoveDirection_ReturnValue) == 0x000008, "Member 'BP_Character_C_ALS_Tick::CallFunc_GetDesiredMoveDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ALS_Tick, CallFunc_MakeRotFromX_ReturnValue) == 0x000020, "Member 'BP_Character_C_ALS_Tick::CallFunc_MakeRotFromX_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ALS_Tick, CallFunc_BreakRotator_Roll) == 0x000038, "Member 'BP_Character_C_ALS_Tick::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ALS_Tick, CallFunc_BreakRotator_Pitch) == 0x00003C, "Member 'BP_Character_C_ALS_Tick::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ALS_Tick, CallFunc_BreakRotator_Yaw) == 0x000040, "Member 'BP_Character_C_ALS_Tick::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ALS_Tick, CallFunc_MakeRotator_ReturnValue) == 0x000048, "Member 'BP_Character_C_ALS_Tick::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ALS_Tick, CallFunc_MantleCheck_CanClimb_Vault) == 0x000060, "Member 'BP_Character_C_ALS_Tick::CallFunc_MantleCheck_CanClimb_Vault' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ALS_Tick, K2Node_SwitchEnum_CmpSuccess) == 0x000061, "Member 'BP_Character_C_ALS_Tick::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_Character.BP_Character_C.AnnulateVelocity
// 0x0008 (0x0008 - 0x0000)
struct BP_Character_C_AnnulateVelocity final
{
public:
	double                                        Duration;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_AnnulateVelocity) == 0x000008, "Wrong alignment on BP_Character_C_AnnulateVelocity");
static_assert(sizeof(BP_Character_C_AnnulateVelocity) == 0x000008, "Wrong size on BP_Character_C_AnnulateVelocity");
static_assert(offsetof(BP_Character_C_AnnulateVelocity, Duration) == 0x000000, "Member 'BP_Character_C_AnnulateVelocity::Duration' has a wrong offset!");

// Function BP_Character.BP_Character_C.AnulateCharacterVelocity
// 0x0008 (0x0008 - 0x0000)
struct BP_Character_C_AnulateCharacterVelocity final
{
public:
	double                                        Time;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_AnulateCharacterVelocity) == 0x000008, "Wrong alignment on BP_Character_C_AnulateCharacterVelocity");
static_assert(sizeof(BP_Character_C_AnulateCharacterVelocity) == 0x000008, "Wrong size on BP_Character_C_AnulateCharacterVelocity");
static_assert(offsetof(BP_Character_C_AnulateCharacterVelocity, Time) == 0x000000, "Member 'BP_Character_C_AnulateCharacterVelocity::Time' has a wrong offset!");

// Function BP_Character.BP_Character_C.ApplyStepMovement
// 0x0008 (0x0008 - 0x0000)
struct BP_Character_C_ApplyStepMovement final
{
public:
	double                                        New_Location_Z;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_ApplyStepMovement) == 0x000008, "Wrong alignment on BP_Character_C_ApplyStepMovement");
static_assert(sizeof(BP_Character_C_ApplyStepMovement) == 0x000008, "Wrong size on BP_Character_C_ApplyStepMovement");
static_assert(offsetof(BP_Character_C_ApplyStepMovement, New_Location_Z) == 0x000000, "Member 'BP_Character_C_ApplyStepMovement::New_Location_Z' has a wrong offset!");

// Function BP_Character.BP_Character_C.AttachBalancierAll
// 0x0028 (0x0028 - 0x0000)
struct BP_Character_C_AttachBalancierAll final
{
public:
	class AActor*                                 Param_Balancier;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         MaillonIndex;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3133[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_AttachBalancierAll) == 0x000008, "Wrong alignment on BP_Character_C_AttachBalancierAll");
static_assert(sizeof(BP_Character_C_AttachBalancierAll) == 0x000028, "Wrong size on BP_Character_C_AttachBalancierAll");
static_assert(offsetof(BP_Character_C_AttachBalancierAll, Param_Balancier) == 0x000000, "Member 'BP_Character_C_AttachBalancierAll::Param_Balancier' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AttachBalancierAll, MaillonIndex) == 0x000008, "Member 'BP_Character_C_AttachBalancierAll::MaillonIndex' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AttachBalancierAll, Location) == 0x000010, "Member 'BP_Character_C_AttachBalancierAll::Location' has a wrong offset!");

// Function BP_Character.BP_Character_C.AttachBalancierServer
// 0x0028 (0x0028 - 0x0000)
struct BP_Character_C_AttachBalancierServer final
{
public:
	class AActor*                                 Param_Balancier;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         MaillonIndex;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3134[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_AttachBalancierServer) == 0x000008, "Wrong alignment on BP_Character_C_AttachBalancierServer");
static_assert(sizeof(BP_Character_C_AttachBalancierServer) == 0x000028, "Wrong size on BP_Character_C_AttachBalancierServer");
static_assert(offsetof(BP_Character_C_AttachBalancierServer, Param_Balancier) == 0x000000, "Member 'BP_Character_C_AttachBalancierServer::Param_Balancier' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AttachBalancierServer, MaillonIndex) == 0x000008, "Member 'BP_Character_C_AttachBalancierServer::MaillonIndex' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AttachBalancierServer, Location) == 0x000010, "Member 'BP_Character_C_AttachBalancierServer::Location' has a wrong offset!");

// Function BP_Character.BP_Character_C.AttachedCharactersAreSwiming
// 0x0040 (0x0040 - 0x0000)
struct BP_Character_C_AttachedCharactersAreSwiming final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AreSwimming;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3135[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3136[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3137[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_Character_C>      K2Node_DynamicCast_AsBPI_Character;                // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSwimming_Swim;                          // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_AttachedCharactersAreSwiming) == 0x000008, "Wrong alignment on BP_Character_C_AttachedCharactersAreSwiming");
static_assert(sizeof(BP_Character_C_AttachedCharactersAreSwiming) == 0x000040, "Wrong size on BP_Character_C_AttachedCharactersAreSwiming");
static_assert(offsetof(BP_Character_C_AttachedCharactersAreSwiming, ReturnValue) == 0x000000, "Member 'BP_Character_C_AttachedCharactersAreSwiming::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AttachedCharactersAreSwiming, AreSwimming) == 0x000001, "Member 'BP_Character_C_AttachedCharactersAreSwiming::AreSwimming' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AttachedCharactersAreSwiming, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_Character_C_AttachedCharactersAreSwiming::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AttachedCharactersAreSwiming, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BP_Character_C_AttachedCharactersAreSwiming::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AttachedCharactersAreSwiming, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_Character_C_AttachedCharactersAreSwiming::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AttachedCharactersAreSwiming, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'BP_Character_C_AttachedCharactersAreSwiming::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AttachedCharactersAreSwiming, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_Character_C_AttachedCharactersAreSwiming::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AttachedCharactersAreSwiming, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'BP_Character_C_AttachedCharactersAreSwiming::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AttachedCharactersAreSwiming, K2Node_DynamicCast_AsBPI_Character) == 0x000028, "Member 'BP_Character_C_AttachedCharactersAreSwiming::K2Node_DynamicCast_AsBPI_Character' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AttachedCharactersAreSwiming, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_Character_C_AttachedCharactersAreSwiming::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AttachedCharactersAreSwiming, CallFunc_IsSwimming_Swim) == 0x000039, "Member 'BP_Character_C_AttachedCharactersAreSwiming::CallFunc_IsSwimming_Swim' has a wrong offset!");

// Function BP_Character.BP_Character_C.AttachToBalancier
// 0x01E0 (0x01E0 - 0x0000)
struct BP_Character_C_AttachToBalancier final
{
public:
	class AActor*                                 Param_Balancier;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_BalancierMaillon;                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3138[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Maillon;                                           // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Root;                                              // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TScriptInterface<class IBPI_Balancier_C>      K2Node_DynamicCast_AsBPI_Balancier;                // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3139[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    CallFunc_GetMaillonByIndex_Maillon;                // 0x0068(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Balancier_C>      K2Node_DynamicCast_AsBPI_Balancier_1;              // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_313A[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Balancier_C>      K2Node_DynamicCast_AsBPI_Balancier_2;              // 0x00D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_313B[0x7];                                     // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X;                            // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_GetRoot_Root;                             // 0x0100(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0120(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_313C[0x8];                                     // 0x0138(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0140(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x01B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x01C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABalancierConstraint_C*                 CallFunc_FinishSpawningActor_ReturnValue;          // 0x01D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_AttachToBalancier) == 0x000010, "Wrong alignment on BP_Character_C_AttachToBalancier");
static_assert(sizeof(BP_Character_C_AttachToBalancier) == 0x0001E0, "Wrong size on BP_Character_C_AttachToBalancier");
static_assert(offsetof(BP_Character_C_AttachToBalancier, Param_Balancier) == 0x000000, "Member 'BP_Character_C_AttachToBalancier::Param_Balancier' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AttachToBalancier, Param_BalancierMaillon) == 0x000008, "Member 'BP_Character_C_AttachToBalancier::Param_BalancierMaillon' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AttachToBalancier, Location) == 0x000010, "Member 'BP_Character_C_AttachToBalancier::Location' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AttachToBalancier, Maillon) == 0x000028, "Member 'BP_Character_C_AttachToBalancier::Maillon' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AttachToBalancier, Root) == 0x000030, "Member 'BP_Character_C_AttachToBalancier::Root' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AttachToBalancier, CallFunc_MakeRotator_ReturnValue) == 0x000038, "Member 'BP_Character_C_AttachToBalancier::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AttachToBalancier, K2Node_DynamicCast_AsBPI_Balancier) == 0x000050, "Member 'BP_Character_C_AttachToBalancier::K2Node_DynamicCast_AsBPI_Balancier' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AttachToBalancier, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'BP_Character_C_AttachToBalancier::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AttachToBalancier, CallFunc_GetMaillonByIndex_Maillon) == 0x000068, "Member 'BP_Character_C_AttachToBalancier::CallFunc_GetMaillonByIndex_Maillon' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AttachToBalancier, CallFunc_GetForwardVector_ReturnValue) == 0x000070, "Member 'BP_Character_C_AttachToBalancier::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AttachToBalancier, K2Node_DynamicCast_AsBPI_Balancier_1) == 0x000088, "Member 'BP_Character_C_AttachToBalancier::K2Node_DynamicCast_AsBPI_Balancier_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AttachToBalancier, K2Node_DynamicCast_bSuccess_1) == 0x000098, "Member 'BP_Character_C_AttachToBalancier::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AttachToBalancier, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000A0, "Member 'BP_Character_C_AttachToBalancier::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AttachToBalancier, CallFunc_Add_VectorVector_ReturnValue) == 0x0000B8, "Member 'BP_Character_C_AttachToBalancier::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AttachToBalancier, K2Node_DynamicCast_AsBPI_Balancier_2) == 0x0000D0, "Member 'BP_Character_C_AttachToBalancier::K2Node_DynamicCast_AsBPI_Balancier_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AttachToBalancier, K2Node_DynamicCast_bSuccess_2) == 0x0000E0, "Member 'BP_Character_C_AttachToBalancier::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AttachToBalancier, CallFunc_BreakVector_X) == 0x0000E8, "Member 'BP_Character_C_AttachToBalancier::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AttachToBalancier, CallFunc_BreakVector_Y) == 0x0000F0, "Member 'BP_Character_C_AttachToBalancier::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AttachToBalancier, CallFunc_BreakVector_Z) == 0x0000F8, "Member 'BP_Character_C_AttachToBalancier::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AttachToBalancier, CallFunc_GetRoot_Root) == 0x000100, "Member 'BP_Character_C_AttachToBalancier::CallFunc_GetRoot_Root' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AttachToBalancier, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000108, "Member 'BP_Character_C_AttachToBalancier::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AttachToBalancier, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000120, "Member 'BP_Character_C_AttachToBalancier::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AttachToBalancier, CallFunc_MakeTransform_ReturnValue) == 0x000140, "Member 'BP_Character_C_AttachToBalancier::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AttachToBalancier, CallFunc_BreakVector_X_1) == 0x0001A0, "Member 'BP_Character_C_AttachToBalancier::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AttachToBalancier, CallFunc_BreakVector_Y_1) == 0x0001A8, "Member 'BP_Character_C_AttachToBalancier::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AttachToBalancier, CallFunc_BreakVector_Z_1) == 0x0001B0, "Member 'BP_Character_C_AttachToBalancier::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AttachToBalancier, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x0001B8, "Member 'BP_Character_C_AttachToBalancier::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AttachToBalancier, CallFunc_MakeVector_ReturnValue) == 0x0001C0, "Member 'BP_Character_C_AttachToBalancier::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_AttachToBalancier, CallFunc_FinishSpawningActor_ReturnValue) == 0x0001D8, "Member 'BP_Character_C_AttachToBalancier::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.BeAttractedBySun
// 0x0008 (0x0008 - 0x0000)
struct BP_Character_C_BeAttractedBySun final
{
public:
	class UPrimitiveComponent*                    SunMesh;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_BeAttractedBySun) == 0x000008, "Wrong alignment on BP_Character_C_BeAttractedBySun");
static_assert(sizeof(BP_Character_C_BeAttractedBySun) == 0x000008, "Wrong size on BP_Character_C_BeAttractedBySun");
static_assert(offsetof(BP_Character_C_BeAttractedBySun, SunMesh) == 0x000000, "Member 'BP_Character_C_BeAttractedBySun::SunMesh' has a wrong offset!");

// Function BP_Character.BP_Character_C.BeginCinematic
// 0x0060 (0x0060 - 0x0000)
struct BP_Character_C_BeginCinematic final
{
public:
	struct FTransform                             BeginTransform;                                    // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_BeginCinematic) == 0x000010, "Wrong alignment on BP_Character_C_BeginCinematic");
static_assert(sizeof(BP_Character_C_BeginCinematic) == 0x000060, "Wrong size on BP_Character_C_BeginCinematic");
static_assert(offsetof(BP_Character_C_BeginCinematic, BeginTransform) == 0x000000, "Member 'BP_Character_C_BeginCinematic::BeginTransform' has a wrong offset!");

// Function BP_Character.BP_Character_C.BeginClimb
// 0x01E8 (0x01E8 - 0x0000)
struct BP_Character_C_BeginClimb final
{
public:
	struct FRotator                               NewRotation;                                       // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                Loc;                                               // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Normal;                                            // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x00F8(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_BeginClimb) == 0x000008, "Wrong alignment on BP_Character_C_BeginClimb");
static_assert(sizeof(BP_Character_C_BeginClimb) == 0x0001E8, "Wrong size on BP_Character_C_BeginClimb");
static_assert(offsetof(BP_Character_C_BeginClimb, NewRotation) == 0x000000, "Member 'BP_Character_C_BeginClimb::NewRotation' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BeginClimb, Loc) == 0x000018, "Member 'BP_Character_C_BeginClimb::Loc' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BeginClimb, Normal) == 0x000030, "Member 'BP_Character_C_BeginClimb::Normal' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BeginClimb, CallFunc_Normal_ReturnValue) == 0x000048, "Member 'BP_Character_C_BeginClimb::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BeginClimb, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000060, "Member 'BP_Character_C_BeginClimb::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BeginClimb, CallFunc_BreakVector_X) == 0x000078, "Member 'BP_Character_C_BeginClimb::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BeginClimb, CallFunc_BreakVector_Y) == 0x000080, "Member 'BP_Character_C_BeginClimb::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BeginClimb, CallFunc_BreakVector_Z) == 0x000088, "Member 'BP_Character_C_BeginClimb::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BeginClimb, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000090, "Member 'BP_Character_C_BeginClimb::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BeginClimb, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000098, "Member 'BP_Character_C_BeginClimb::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BeginClimb, CallFunc_Add_VectorVector_ReturnValue) == 0x0000B0, "Member 'BP_Character_C_BeginClimb::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BeginClimb, CallFunc_BreakVector_X_1) == 0x0000C8, "Member 'BP_Character_C_BeginClimb::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BeginClimb, CallFunc_BreakVector_Y_1) == 0x0000D0, "Member 'BP_Character_C_BeginClimb::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BeginClimb, CallFunc_BreakVector_Z_1) == 0x0000D8, "Member 'BP_Character_C_BeginClimb::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BeginClimb, CallFunc_MakeVector_ReturnValue) == 0x0000E0, "Member 'BP_Character_C_BeginClimb::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BeginClimb, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x0000F8, "Member 'BP_Character_C_BeginClimb::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BeginClimb, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x0001E0, "Member 'BP_Character_C_BeginClimb::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BP_Character.BP_Character_C.BeginGridConstraint
// 0x00B0 (0x00B0 - 0x0000)
struct BP_Character_C_BeginGridConstraint final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_313D[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_313E[0x8];                                     // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0040(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGridConstraint_C*                      CallFunc_FinishSpawningActor_ReturnValue;          // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_BeginGridConstraint) == 0x000010, "Wrong alignment on BP_Character_C_BeginGridConstraint");
static_assert(sizeof(BP_Character_C_BeginGridConstraint) == 0x0000B0, "Wrong size on BP_Character_C_BeginGridConstraint");
static_assert(offsetof(BP_Character_C_BeginGridConstraint, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_Character_C_BeginGridConstraint::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BeginGridConstraint, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000008, "Member 'BP_Character_C_BeginGridConstraint::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BeginGridConstraint, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000020, "Member 'BP_Character_C_BeginGridConstraint::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BeginGridConstraint, CallFunc_MakeTransform_ReturnValue) == 0x000040, "Member 'BP_Character_C_BeginGridConstraint::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BeginGridConstraint, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x0000A0, "Member 'BP_Character_C_BeginGridConstraint::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BeginGridConstraint, CallFunc_FinishSpawningActor_ReturnValue) == 0x0000A8, "Member 'BP_Character_C_BeginGridConstraint::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.BeginPullOtherCharacter
// 0x0010 (0x0010 - 0x0000)
struct BP_Character_C_BeginPullOtherCharacter final
{
public:
	bool                                          BeginPull;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_313F[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OtherCharacter;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_BeginPullOtherCharacter) == 0x000008, "Wrong alignment on BP_Character_C_BeginPullOtherCharacter");
static_assert(sizeof(BP_Character_C_BeginPullOtherCharacter) == 0x000010, "Wrong size on BP_Character_C_BeginPullOtherCharacter");
static_assert(offsetof(BP_Character_C_BeginPullOtherCharacter, BeginPull) == 0x000000, "Member 'BP_Character_C_BeginPullOtherCharacter::BeginPull' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BeginPullOtherCharacter, OtherCharacter) == 0x000008, "Member 'BP_Character_C_BeginPullOtherCharacter::OtherCharacter' has a wrong offset!");

// Function BP_Character.BP_Character_C.BndEvt__BP_BallMovement_Sphere_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature
// 0x0118 (0x0118 - 0x0000)
struct BP_Character_C_BndEvt__BP_BallMovement_Sphere_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0030(0x00E8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Character_C_BndEvt__BP_BallMovement_Sphere_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_Character_C_BndEvt__BP_BallMovement_Sphere_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature");
static_assert(sizeof(BP_Character_C_BndEvt__BP_BallMovement_Sphere_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature) == 0x000118, "Wrong size on BP_Character_C_BndEvt__BP_BallMovement_Sphere_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature");
static_assert(offsetof(BP_Character_C_BndEvt__BP_BallMovement_Sphere_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, HitComponent) == 0x000000, "Member 'BP_Character_C_BndEvt__BP_BallMovement_Sphere_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BndEvt__BP_BallMovement_Sphere_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_Character_C_BndEvt__BP_BallMovement_Sphere_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BndEvt__BP_BallMovement_Sphere_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_Character_C_BndEvt__BP_BallMovement_Sphere_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BndEvt__BP_BallMovement_Sphere_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, NormalImpulse) == 0x000018, "Member 'BP_Character_C_BndEvt__BP_BallMovement_Sphere_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::NormalImpulse' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BndEvt__BP_BallMovement_Sphere_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, Hit) == 0x000030, "Member 'BP_Character_C_BndEvt__BP_BallMovement_Sphere_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::Hit' has a wrong offset!");

// Function BP_Character.BP_Character_C.BndEvt__BP_Character_Capsule_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature
// 0x0108 (0x0108 - 0x0000)
struct BP_Character_C_BndEvt__BP_Character_Capsule_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3140[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Character_C_BndEvt__BP_Character_Capsule_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_Character_C_BndEvt__BP_Character_Capsule_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_Character_C_BndEvt__BP_Character_Capsule_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature) == 0x000108, "Wrong size on BP_Character_C_BndEvt__BP_Character_Capsule_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_Character_C_BndEvt__BP_Character_Capsule_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_Character_C_BndEvt__BP_Character_Capsule_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BndEvt__BP_Character_Capsule_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_Character_C_BndEvt__BP_Character_Capsule_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BndEvt__BP_Character_Capsule_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_Character_C_BndEvt__BP_Character_Capsule_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BndEvt__BP_Character_Capsule_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_Character_C_BndEvt__BP_Character_Capsule_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BndEvt__BP_Character_Capsule_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_Character_C_BndEvt__BP_Character_Capsule_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BndEvt__BP_Character_Capsule_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_Character_C_BndEvt__BP_Character_Capsule_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_Character.BP_Character_C.BounceOnTrampoline
// 0x0010 (0x0010 - 0x0000)
struct BP_Character_C_BounceOnTrampoline final
{
public:
	double                                        Bounce;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_Instigator;                                  // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseControlRot;                                     // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          JustZ;                                             // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_BounceOnTrampoline) == 0x000008, "Wrong alignment on BP_Character_C_BounceOnTrampoline");
static_assert(sizeof(BP_Character_C_BounceOnTrampoline) == 0x000010, "Wrong size on BP_Character_C_BounceOnTrampoline");
static_assert(offsetof(BP_Character_C_BounceOnTrampoline, Bounce) == 0x000000, "Member 'BP_Character_C_BounceOnTrampoline::Bounce' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BounceOnTrampoline, Param_Instigator) == 0x000008, "Member 'BP_Character_C_BounceOnTrampoline::Param_Instigator' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BounceOnTrampoline, UseControlRot) == 0x000009, "Member 'BP_Character_C_BounceOnTrampoline::UseControlRot' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BounceOnTrampoline, JustZ) == 0x00000A, "Member 'BP_Character_C_BounceOnTrampoline::JustZ' has a wrong offset!");

// Function BP_Character.BP_Character_C.BounceOnTrampolineClient
// 0x0010 (0x0010 - 0x0000)
struct BP_Character_C_BounceOnTrampolineClient final
{
public:
	double                                        Bounce;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_Instigator;                                  // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseControlRot;                                     // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          JustZ;                                             // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_BounceOnTrampolineClient) == 0x000008, "Wrong alignment on BP_Character_C_BounceOnTrampolineClient");
static_assert(sizeof(BP_Character_C_BounceOnTrampolineClient) == 0x000010, "Wrong size on BP_Character_C_BounceOnTrampolineClient");
static_assert(offsetof(BP_Character_C_BounceOnTrampolineClient, Bounce) == 0x000000, "Member 'BP_Character_C_BounceOnTrampolineClient::Bounce' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BounceOnTrampolineClient, Param_Instigator) == 0x000008, "Member 'BP_Character_C_BounceOnTrampolineClient::Param_Instigator' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BounceOnTrampolineClient, UseControlRot) == 0x000009, "Member 'BP_Character_C_BounceOnTrampolineClient::UseControlRot' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BounceOnTrampolineClient, JustZ) == 0x00000A, "Member 'BP_Character_C_BounceOnTrampolineClient::JustZ' has a wrong offset!");

// Function BP_Character.BP_Character_C.BounceTrampolineAll
// 0x0010 (0x0010 - 0x0000)
struct BP_Character_C_BounceTrampolineAll final
{
public:
	double                                        Bounce;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_Instigator;                                  // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseControlRot;                                     // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          JustZ;                                             // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_BounceTrampolineAll) == 0x000008, "Wrong alignment on BP_Character_C_BounceTrampolineAll");
static_assert(sizeof(BP_Character_C_BounceTrampolineAll) == 0x000010, "Wrong size on BP_Character_C_BounceTrampolineAll");
static_assert(offsetof(BP_Character_C_BounceTrampolineAll, Bounce) == 0x000000, "Member 'BP_Character_C_BounceTrampolineAll::Bounce' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BounceTrampolineAll, Param_Instigator) == 0x000008, "Member 'BP_Character_C_BounceTrampolineAll::Param_Instigator' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BounceTrampolineAll, UseControlRot) == 0x000009, "Member 'BP_Character_C_BounceTrampolineAll::UseControlRot' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BounceTrampolineAll, JustZ) == 0x00000A, "Member 'BP_Character_C_BounceTrampolineAll::JustZ' has a wrong offset!");

// Function BP_Character.BP_Character_C.BounceTrampolineSRV
// 0x0010 (0x0010 - 0x0000)
struct BP_Character_C_BounceTrampolineSRV final
{
public:
	double                                        Bounce;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_Instigator;                                  // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseControlRot;                                     // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          JustZ;                                             // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_BounceTrampolineSRV) == 0x000008, "Wrong alignment on BP_Character_C_BounceTrampolineSRV");
static_assert(sizeof(BP_Character_C_BounceTrampolineSRV) == 0x000010, "Wrong size on BP_Character_C_BounceTrampolineSRV");
static_assert(offsetof(BP_Character_C_BounceTrampolineSRV, Bounce) == 0x000000, "Member 'BP_Character_C_BounceTrampolineSRV::Bounce' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BounceTrampolineSRV, Param_Instigator) == 0x000008, "Member 'BP_Character_C_BounceTrampolineSRV::Param_Instigator' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BounceTrampolineSRV, UseControlRot) == 0x000009, "Member 'BP_Character_C_BounceTrampolineSRV::UseControlRot' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BounceTrampolineSRV, JustZ) == 0x00000A, "Member 'BP_Character_C_BounceTrampolineSRV::JustZ' has a wrong offset!");

// Function BP_Character.BP_Character_C.BPI_Get_CurrentStates
// 0x0009 (0x0009 - 0x0000)
struct BP_Character_C_BPI_Get_CurrentStates final
{
public:
	EMovementMode                                 PawnMovementMode;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_MovementState                            Param_MovementState;                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_MovementState                            Param_PrevMovementState;                           // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_MovementAction                           Param_MovementAction;                              // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_RotationMode                             Param_RotationMode;                                // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_Gait                                     ActualGait;                                        // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_Stance                                   Param_ActualStance;                                // 0x0006(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_ViewMode                                 Param_ViewMode;                                    // 0x0007(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_OverlayState                             Param_OverlayState;                                // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_BPI_Get_CurrentStates) == 0x000001, "Wrong alignment on BP_Character_C_BPI_Get_CurrentStates");
static_assert(sizeof(BP_Character_C_BPI_Get_CurrentStates) == 0x000009, "Wrong size on BP_Character_C_BPI_Get_CurrentStates");
static_assert(offsetof(BP_Character_C_BPI_Get_CurrentStates, PawnMovementMode) == 0x000000, "Member 'BP_Character_C_BPI_Get_CurrentStates::PawnMovementMode' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BPI_Get_CurrentStates, Param_MovementState) == 0x000001, "Member 'BP_Character_C_BPI_Get_CurrentStates::Param_MovementState' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BPI_Get_CurrentStates, Param_PrevMovementState) == 0x000002, "Member 'BP_Character_C_BPI_Get_CurrentStates::Param_PrevMovementState' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BPI_Get_CurrentStates, Param_MovementAction) == 0x000003, "Member 'BP_Character_C_BPI_Get_CurrentStates::Param_MovementAction' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BPI_Get_CurrentStates, Param_RotationMode) == 0x000004, "Member 'BP_Character_C_BPI_Get_CurrentStates::Param_RotationMode' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BPI_Get_CurrentStates, ActualGait) == 0x000005, "Member 'BP_Character_C_BPI_Get_CurrentStates::ActualGait' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BPI_Get_CurrentStates, Param_ActualStance) == 0x000006, "Member 'BP_Character_C_BPI_Get_CurrentStates::Param_ActualStance' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BPI_Get_CurrentStates, Param_ViewMode) == 0x000007, "Member 'BP_Character_C_BPI_Get_CurrentStates::Param_ViewMode' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BPI_Get_CurrentStates, Param_OverlayState) == 0x000008, "Member 'BP_Character_C_BPI_Get_CurrentStates::Param_OverlayState' has a wrong offset!");

// Function BP_Character.BP_Character_C.BPI_Get_EssentialValues
// 0x0150 (0x0150 - 0x0000)
struct BP_Character_C_BPI_Get_EssentialValues final
{
public:
	struct FVector                                Velocity;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Param_Acceleration;                                // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MovementInput;                                     // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_IsMoving;                                    // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_HasMovementInput;                            // 0x0049(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3141[0x6];                                     // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Param_Speed;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Param_MovementInputAmount;                         // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               AimingRotation;                                    // 0x0060(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        Param_AimYawRate;                                  // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 PullCharacter;                                     // 0x0080(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Pull;                                              // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Climb;                                             // 0x0089(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3142[0x6];                                     // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              MoveInput;                                         // 0x0090(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SwimOnSurface;                                     // 0x00A0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3143[0x7];                                     // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Param_LeftHandLocation;                            // 0x00A8(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Param_RightHandLocation;                           // 0x00C0(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RadialVelocityRight;                               // 0x00D8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RadialVelocityUp;                                  // 0x00E0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_Swim;                                        // 0x00E8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Bounce;                                            // 0x00E9(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LookAround;                                        // 0x00EA(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_Balancier;                                   // 0x00EB(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3144[0x4];                                     // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectMoveForwardAxis_ReturnValue;        // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectMoveRightAxis_ReturnValue;          // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0108(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3145[0x4];                                     // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_SelectControlRot_DesiredControlRotation;  // 0x0128(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        K2Node_FunctionResult_RadialVelocityRight_ImplicitCast; // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_RadialVelocityUp_ImplicitCast; // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_BPI_Get_EssentialValues) == 0x000008, "Wrong alignment on BP_Character_C_BPI_Get_EssentialValues");
static_assert(sizeof(BP_Character_C_BPI_Get_EssentialValues) == 0x000150, "Wrong size on BP_Character_C_BPI_Get_EssentialValues");
static_assert(offsetof(BP_Character_C_BPI_Get_EssentialValues, Velocity) == 0x000000, "Member 'BP_Character_C_BPI_Get_EssentialValues::Velocity' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BPI_Get_EssentialValues, Param_Acceleration) == 0x000018, "Member 'BP_Character_C_BPI_Get_EssentialValues::Param_Acceleration' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BPI_Get_EssentialValues, MovementInput) == 0x000030, "Member 'BP_Character_C_BPI_Get_EssentialValues::MovementInput' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BPI_Get_EssentialValues, Param_IsMoving) == 0x000048, "Member 'BP_Character_C_BPI_Get_EssentialValues::Param_IsMoving' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BPI_Get_EssentialValues, Param_HasMovementInput) == 0x000049, "Member 'BP_Character_C_BPI_Get_EssentialValues::Param_HasMovementInput' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BPI_Get_EssentialValues, Param_Speed) == 0x000050, "Member 'BP_Character_C_BPI_Get_EssentialValues::Param_Speed' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BPI_Get_EssentialValues, Param_MovementInputAmount) == 0x000058, "Member 'BP_Character_C_BPI_Get_EssentialValues::Param_MovementInputAmount' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BPI_Get_EssentialValues, AimingRotation) == 0x000060, "Member 'BP_Character_C_BPI_Get_EssentialValues::AimingRotation' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BPI_Get_EssentialValues, Param_AimYawRate) == 0x000078, "Member 'BP_Character_C_BPI_Get_EssentialValues::Param_AimYawRate' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BPI_Get_EssentialValues, PullCharacter) == 0x000080, "Member 'BP_Character_C_BPI_Get_EssentialValues::PullCharacter' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BPI_Get_EssentialValues, Pull) == 0x000088, "Member 'BP_Character_C_BPI_Get_EssentialValues::Pull' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BPI_Get_EssentialValues, Climb) == 0x000089, "Member 'BP_Character_C_BPI_Get_EssentialValues::Climb' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BPI_Get_EssentialValues, MoveInput) == 0x000090, "Member 'BP_Character_C_BPI_Get_EssentialValues::MoveInput' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BPI_Get_EssentialValues, SwimOnSurface) == 0x0000A0, "Member 'BP_Character_C_BPI_Get_EssentialValues::SwimOnSurface' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BPI_Get_EssentialValues, Param_LeftHandLocation) == 0x0000A8, "Member 'BP_Character_C_BPI_Get_EssentialValues::Param_LeftHandLocation' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BPI_Get_EssentialValues, Param_RightHandLocation) == 0x0000C0, "Member 'BP_Character_C_BPI_Get_EssentialValues::Param_RightHandLocation' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BPI_Get_EssentialValues, RadialVelocityRight) == 0x0000D8, "Member 'BP_Character_C_BPI_Get_EssentialValues::RadialVelocityRight' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BPI_Get_EssentialValues, RadialVelocityUp) == 0x0000E0, "Member 'BP_Character_C_BPI_Get_EssentialValues::RadialVelocityUp' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BPI_Get_EssentialValues, Param_Swim) == 0x0000E8, "Member 'BP_Character_C_BPI_Get_EssentialValues::Param_Swim' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BPI_Get_EssentialValues, Bounce) == 0x0000E9, "Member 'BP_Character_C_BPI_Get_EssentialValues::Bounce' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BPI_Get_EssentialValues, LookAround) == 0x0000EA, "Member 'BP_Character_C_BPI_Get_EssentialValues::LookAround' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BPI_Get_EssentialValues, Param_Balancier) == 0x0000EB, "Member 'BP_Character_C_BPI_Get_EssentialValues::Param_Balancier' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BPI_Get_EssentialValues, CallFunc_SelectMoveForwardAxis_ReturnValue) == 0x0000F0, "Member 'BP_Character_C_BPI_Get_EssentialValues::CallFunc_SelectMoveForwardAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BPI_Get_EssentialValues, CallFunc_SelectMoveRightAxis_ReturnValue) == 0x0000F8, "Member 'BP_Character_C_BPI_Get_EssentialValues::CallFunc_SelectMoveRightAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BPI_Get_EssentialValues, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000100, "Member 'BP_Character_C_BPI_Get_EssentialValues::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BPI_Get_EssentialValues, CallFunc_MakeVector2D_ReturnValue) == 0x000108, "Member 'BP_Character_C_BPI_Get_EssentialValues::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BPI_Get_EssentialValues, CallFunc_BreakRotator_Roll) == 0x000118, "Member 'BP_Character_C_BPI_Get_EssentialValues::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BPI_Get_EssentialValues, CallFunc_BreakRotator_Pitch) == 0x00011C, "Member 'BP_Character_C_BPI_Get_EssentialValues::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BPI_Get_EssentialValues, CallFunc_BreakRotator_Yaw) == 0x000120, "Member 'BP_Character_C_BPI_Get_EssentialValues::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BPI_Get_EssentialValues, CallFunc_SelectControlRot_DesiredControlRotation) == 0x000128, "Member 'BP_Character_C_BPI_Get_EssentialValues::CallFunc_SelectControlRot_DesiredControlRotation' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BPI_Get_EssentialValues, K2Node_FunctionResult_RadialVelocityRight_ImplicitCast) == 0x000140, "Member 'BP_Character_C_BPI_Get_EssentialValues::K2Node_FunctionResult_RadialVelocityRight_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_BPI_Get_EssentialValues, K2Node_FunctionResult_RadialVelocityUp_ImplicitCast) == 0x000148, "Member 'BP_Character_C_BPI_Get_EssentialValues::K2Node_FunctionResult_RadialVelocityUp_ImplicitCast' has a wrong offset!");

// Function BP_Character.BP_Character_C.BPI_Set_Gait
// 0x0001 (0x0001 - 0x0000)
struct BP_Character_C_BPI_Set_Gait final
{
public:
	EALS_Gait                                     NewGait;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_BPI_Set_Gait) == 0x000001, "Wrong alignment on BP_Character_C_BPI_Set_Gait");
static_assert(sizeof(BP_Character_C_BPI_Set_Gait) == 0x000001, "Wrong size on BP_Character_C_BPI_Set_Gait");
static_assert(offsetof(BP_Character_C_BPI_Set_Gait, NewGait) == 0x000000, "Member 'BP_Character_C_BPI_Set_Gait::NewGait' has a wrong offset!");

// Function BP_Character.BP_Character_C.BPI_Set_MovementAction
// 0x0001 (0x0001 - 0x0000)
struct BP_Character_C_BPI_Set_MovementAction final
{
public:
	EALS_MovementAction                           NewMovementAction;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_BPI_Set_MovementAction) == 0x000001, "Wrong alignment on BP_Character_C_BPI_Set_MovementAction");
static_assert(sizeof(BP_Character_C_BPI_Set_MovementAction) == 0x000001, "Wrong size on BP_Character_C_BPI_Set_MovementAction");
static_assert(offsetof(BP_Character_C_BPI_Set_MovementAction, NewMovementAction) == 0x000000, "Member 'BP_Character_C_BPI_Set_MovementAction::NewMovementAction' has a wrong offset!");

// Function BP_Character.BP_Character_C.BPI_Set_MovementState
// 0x0001 (0x0001 - 0x0000)
struct BP_Character_C_BPI_Set_MovementState final
{
public:
	EALS_MovementState                            NewMovementState;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_BPI_Set_MovementState) == 0x000001, "Wrong alignment on BP_Character_C_BPI_Set_MovementState");
static_assert(sizeof(BP_Character_C_BPI_Set_MovementState) == 0x000001, "Wrong size on BP_Character_C_BPI_Set_MovementState");
static_assert(offsetof(BP_Character_C_BPI_Set_MovementState, NewMovementState) == 0x000000, "Member 'BP_Character_C_BPI_Set_MovementState::NewMovementState' has a wrong offset!");

// Function BP_Character.BP_Character_C.BPI_Set_OverlayState
// 0x0001 (0x0001 - 0x0000)
struct BP_Character_C_BPI_Set_OverlayState final
{
public:
	EALS_OverlayState                             NewOverlayState;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_BPI_Set_OverlayState) == 0x000001, "Wrong alignment on BP_Character_C_BPI_Set_OverlayState");
static_assert(sizeof(BP_Character_C_BPI_Set_OverlayState) == 0x000001, "Wrong size on BP_Character_C_BPI_Set_OverlayState");
static_assert(offsetof(BP_Character_C_BPI_Set_OverlayState, NewOverlayState) == 0x000000, "Member 'BP_Character_C_BPI_Set_OverlayState::NewOverlayState' has a wrong offset!");

// Function BP_Character.BP_Character_C.BPI_Set_RotationMode
// 0x0001 (0x0001 - 0x0000)
struct BP_Character_C_BPI_Set_RotationMode final
{
public:
	EALS_RotationMode                             NewRotationMode;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_BPI_Set_RotationMode) == 0x000001, "Wrong alignment on BP_Character_C_BPI_Set_RotationMode");
static_assert(sizeof(BP_Character_C_BPI_Set_RotationMode) == 0x000001, "Wrong size on BP_Character_C_BPI_Set_RotationMode");
static_assert(offsetof(BP_Character_C_BPI_Set_RotationMode, NewRotationMode) == 0x000000, "Member 'BP_Character_C_BPI_Set_RotationMode::NewRotationMode' has a wrong offset!");

// Function BP_Character.BP_Character_C.BPI_Set_ViewMode
// 0x0001 (0x0001 - 0x0000)
struct BP_Character_C_BPI_Set_ViewMode final
{
public:
	EALS_ViewMode                                 NewViewMode;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_BPI_Set_ViewMode) == 0x000001, "Wrong alignment on BP_Character_C_BPI_Set_ViewMode");
static_assert(sizeof(BP_Character_C_BPI_Set_ViewMode) == 0x000001, "Wrong size on BP_Character_C_BPI_Set_ViewMode");
static_assert(offsetof(BP_Character_C_BPI_Set_ViewMode, NewViewMode) == 0x000000, "Member 'BP_Character_C_BPI_Set_ViewMode::NewViewMode' has a wrong offset!");

// Function BP_Character.BP_Character_C.CacheValues
// 0x0030 (0x0030 - 0x0000)
struct BP_Character_C_CacheValues final
{
public:
	struct FRotator                               CallFunc_SelectControlRot_DesiredControlRotation;  // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3146[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_VariableSet_PreviousAimYaw_ImplicitCast;    // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_CacheValues) == 0x000008, "Wrong alignment on BP_Character_C_CacheValues");
static_assert(sizeof(BP_Character_C_CacheValues) == 0x000030, "Wrong size on BP_Character_C_CacheValues");
static_assert(offsetof(BP_Character_C_CacheValues, CallFunc_SelectControlRot_DesiredControlRotation) == 0x000000, "Member 'BP_Character_C_CacheValues::CallFunc_SelectControlRot_DesiredControlRotation' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CacheValues, CallFunc_BreakRotator_Roll) == 0x000018, "Member 'BP_Character_C_CacheValues::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CacheValues, CallFunc_BreakRotator_Pitch) == 0x00001C, "Member 'BP_Character_C_CacheValues::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CacheValues, CallFunc_BreakRotator_Yaw) == 0x000020, "Member 'BP_Character_C_CacheValues::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CacheValues, K2Node_VariableSet_PreviousAimYaw_ImplicitCast) == 0x000028, "Member 'BP_Character_C_CacheValues::K2Node_VariableSet_PreviousAimYaw_ImplicitCast' has a wrong offset!");

// Function BP_Character.BP_Character_C.CalculateAcceleration
// 0x0068 (0x0068 - 0x0000)
struct BP_Character_C_CalculateAcceleration final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorFloat_ReturnValue;           // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue;                 // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_CalculateAcceleration) == 0x000008, "Wrong alignment on BP_Character_C_CalculateAcceleration");
static_assert(sizeof(BP_Character_C_CalculateAcceleration) == 0x000068, "Wrong size on BP_Character_C_CalculateAcceleration");
static_assert(offsetof(BP_Character_C_CalculateAcceleration, ReturnValue) == 0x000000, "Member 'BP_Character_C_CalculateAcceleration::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateAcceleration, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000018, "Member 'BP_Character_C_CalculateAcceleration::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateAcceleration, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000020, "Member 'BP_Character_C_CalculateAcceleration::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateAcceleration, CallFunc_Divide_VectorFloat_ReturnValue) == 0x000038, "Member 'BP_Character_C_CalculateAcceleration::CallFunc_Divide_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateAcceleration, CallFunc_SelectVector_ReturnValue) == 0x000050, "Member 'BP_Character_C_CalculateAcceleration::CallFunc_SelectVector_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.CalculateFloorNormal
// 0x04B0 (0x04B0 - 0x0000)
struct BP_Character_C_CalculateFloorNormal final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x00E8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                ImpactNormal;                                      // 0x00E8(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SelectedImpactNormal;                              // 0x0100(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SphereImpactNormal;                                // 0x0118(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    SphereHitComponent;                                // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3147[0x2];                                     // 0x013A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3148[0x4];                                     // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0148(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0160(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0178(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0190(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x01A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01B8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3149[0x4];                                     // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ComponentHasTag_ReturnValue;              // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_314A[0x7];                                     // 0x0211(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0218(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               CallFunc_TraceVisibility_Result;                   // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_314B[0x7];                                     // 0x0231(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetDirectionUnitVector_ReturnValue;       // 0x0238(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0250(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0258(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Gamestate_C>      K2Node_DynamicCast_AsBPI_Gamestate;                // 0x0270(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_314C[0x7];                                     // 0x0281(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0288(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class APawn*>                          CallFunc_GetPawnArray_Array;                       // 0x02A0(0x0010)(ReferenceParm)
	struct FHitResult                             CallFunc_SphereTraceSingle_OutHit;                 // 0x02B0(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingle_ReturnValue;            // 0x0398(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x0399(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x039A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_314D[0x1];                                     // 0x039B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x039C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x03A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_314E[0x4];                                     // 0x03A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x03A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x03C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x03D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x03F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x0408(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x0410(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x0418(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x0420(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName_1;                // 0x0428(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x0430(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_1;            // 0x0434(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x0438(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_314F[0x4];                                     // 0x043C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x0440(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x0458(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0470(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0478(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0480(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0488(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0490(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x04A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_CalculateFloorNormal) == 0x000008, "Wrong alignment on BP_Character_C_CalculateFloorNormal");
static_assert(sizeof(BP_Character_C_CalculateFloorNormal) == 0x0004B0, "Wrong size on BP_Character_C_CalculateFloorNormal");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, Hit) == 0x000000, "Member 'BP_Character_C_CalculateFloorNormal::Hit' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, ImpactNormal) == 0x0000E8, "Member 'BP_Character_C_CalculateFloorNormal::ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, SelectedImpactNormal) == 0x000100, "Member 'BP_Character_C_CalculateFloorNormal::SelectedImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, SphereImpactNormal) == 0x000118, "Member 'BP_Character_C_CalculateFloorNormal::SphereImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, SphereHitComponent) == 0x000130, "Member 'BP_Character_C_CalculateFloorNormal::SphereHitComponent' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_BreakHitResult_bBlockingHit) == 0x000138, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_BreakHitResult_bInitialOverlap) == 0x000139, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_BreakHitResult_Time) == 0x00013C, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_BreakHitResult_Distance) == 0x000140, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_BreakHitResult_Location) == 0x000148, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_BreakHitResult_ImpactPoint) == 0x000160, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_BreakHitResult_Normal) == 0x000178, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_BreakHitResult_ImpactNormal) == 0x000190, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_BreakHitResult_PhysMat) == 0x0001A8, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_BreakHitResult_HitActor) == 0x0001B0, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_BreakHitResult_HitComponent) == 0x0001B8, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_BreakHitResult_HitBoneName) == 0x0001C0, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_BreakHitResult_BoneName) == 0x0001C8, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_BreakHitResult_HitItem) == 0x0001D0, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_BreakHitResult_ElementIndex) == 0x0001D4, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_BreakHitResult_FaceIndex) == 0x0001D8, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_BreakHitResult_TraceStart) == 0x0001E0, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_BreakHitResult_TraceEnd) == 0x0001F8, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_ComponentHasTag_ReturnValue) == 0x000210, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_ComponentHasTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000218, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_TraceVisibility_Result) == 0x000230, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_TraceVisibility_Result' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_GetDirectionUnitVector_ReturnValue) == 0x000238, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_GetDirectionUnitVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_GetGameState_ReturnValue) == 0x000250, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000258, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, K2Node_DynamicCast_AsBPI_Gamestate) == 0x000270, "Member 'BP_Character_C_CalculateFloorNormal::K2Node_DynamicCast_AsBPI_Gamestate' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, K2Node_DynamicCast_bSuccess) == 0x000280, "Member 'BP_Character_C_CalculateFloorNormal::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_Add_VectorVector_ReturnValue) == 0x000288, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_GetPawnArray_Array) == 0x0002A0, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_GetPawnArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_SphereTraceSingle_OutHit) == 0x0002B0, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_SphereTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_SphereTraceSingle_ReturnValue) == 0x000398, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_SphereTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_BreakHitResult_bBlockingHit_1) == 0x000399, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x00039A, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_BreakHitResult_Time_1) == 0x00039C, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_BreakHitResult_Distance_1) == 0x0003A0, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_BreakHitResult_Location_1) == 0x0003A8, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_BreakHitResult_ImpactPoint_1) == 0x0003C0, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_BreakHitResult_Normal_1) == 0x0003D8, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_BreakHitResult_ImpactNormal_1) == 0x0003F0, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_BreakHitResult_PhysMat_1) == 0x000408, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_BreakHitResult_HitActor_1) == 0x000410, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_BreakHitResult_HitComponent_1) == 0x000418, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_BreakHitResult_HitBoneName_1) == 0x000420, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_BreakHitResult_BoneName_1) == 0x000428, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_BreakHitResult_BoneName_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_BreakHitResult_HitItem_1) == 0x000430, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_BreakHitResult_ElementIndex_1) == 0x000434, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_BreakHitResult_ElementIndex_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_BreakHitResult_FaceIndex_1) == 0x000438, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_BreakHitResult_TraceStart_1) == 0x000440, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_BreakHitResult_TraceEnd_1) == 0x000458, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_BreakVector_X) == 0x000470, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_BreakVector_Y) == 0x000478, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_BreakVector_Z) == 0x000480, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_Abs_ReturnValue) == 0x000488, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_MakeVector_ReturnValue) == 0x000490, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateFloorNormal, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0004A8, "Member 'BP_Character_C_CalculateFloorNormal::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.CalculateGroundedRotationRate
// 0x0038 (0x0038 - 0x0000)
struct BP_Character_C_CalculateGroundedRotationRate final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetMappedSpeed_ReturnValue;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3150[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_InTime_ImplicitCast;        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3151[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_CalculateGroundedRotationRate) == 0x000008, "Wrong alignment on BP_Character_C_CalculateGroundedRotationRate");
static_assert(sizeof(BP_Character_C_CalculateGroundedRotationRate) == 0x000038, "Wrong size on BP_Character_C_CalculateGroundedRotationRate");
static_assert(offsetof(BP_Character_C_CalculateGroundedRotationRate, ReturnValue) == 0x000000, "Member 'BP_Character_C_CalculateGroundedRotationRate::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateGroundedRotationRate, CallFunc_GetMappedSpeed_ReturnValue) == 0x000008, "Member 'BP_Character_C_CalculateGroundedRotationRate::CallFunc_GetMappedSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateGroundedRotationRate, CallFunc_MapRangeClamped_ReturnValue) == 0x000010, "Member 'BP_Character_C_CalculateGroundedRotationRate::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateGroundedRotationRate, CallFunc_GetFloatValue_ReturnValue) == 0x000018, "Member 'BP_Character_C_CalculateGroundedRotationRate::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateGroundedRotationRate, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000020, "Member 'BP_Character_C_CalculateGroundedRotationRate::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateGroundedRotationRate, CallFunc_GetFloatValue_InTime_ImplicitCast) == 0x000028, "Member 'BP_Character_C_CalculateGroundedRotationRate::CallFunc_GetFloatValue_InTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateGroundedRotationRate, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000030, "Member 'BP_Character_C_CalculateGroundedRotationRate::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BP_Character.BP_Character_C.CalculateRadialVel
// 0x0078 (0x0078 - 0x0000)
struct BP_Character_C_CalculateRadialVel final
{
public:
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3152[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue_1;    // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_Multiply_RotatorFloat_ReturnValue;        // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_RotatorFloat_B_ImplicitCast;     // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_CalculateRadialVel) == 0x000008, "Wrong alignment on BP_Character_C_CalculateRadialVel");
static_assert(sizeof(BP_Character_C_CalculateRadialVel) == 0x000078, "Wrong size on BP_Character_C_CalculateRadialVel");
static_assert(offsetof(BP_Character_C_CalculateRadialVel, CallFunc_IsLocallyControlled_ReturnValue) == 0x000000, "Member 'BP_Character_C_CalculateRadialVel::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateRadialVel, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000008, "Member 'BP_Character_C_CalculateRadialVel::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateRadialVel, CallFunc_K2_GetComponentRotation_ReturnValue_1) == 0x000020, "Member 'BP_Character_C_CalculateRadialVel::CallFunc_K2_GetComponentRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateRadialVel, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000038, "Member 'BP_Character_C_CalculateRadialVel::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateRadialVel, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x000040, "Member 'BP_Character_C_CalculateRadialVel::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateRadialVel, CallFunc_Multiply_RotatorFloat_ReturnValue) == 0x000058, "Member 'BP_Character_C_CalculateRadialVel::CallFunc_Multiply_RotatorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CalculateRadialVel, CallFunc_Multiply_RotatorFloat_B_ImplicitCast) == 0x000070, "Member 'BP_Character_C_CalculateRadialVel::CallFunc_Multiply_RotatorFloat_B_ImplicitCast' has a wrong offset!");

// Function BP_Character.BP_Character_C.CalculateVelocity
// 0x0018 (0x0018 - 0x0000)
struct BP_Character_C_CalculateVelocity final
{
public:
	struct FVector                                CallFunc_GetPhysicsLinearVelocity_ReturnValue;     // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_CalculateVelocity) == 0x000008, "Wrong alignment on BP_Character_C_CalculateVelocity");
static_assert(sizeof(BP_Character_C_CalculateVelocity) == 0x000018, "Wrong size on BP_Character_C_CalculateVelocity");
static_assert(offsetof(BP_Character_C_CalculateVelocity, CallFunc_GetPhysicsLinearVelocity_ReturnValue) == 0x000000, "Member 'BP_Character_C_CalculateVelocity::CallFunc_GetPhysicsLinearVelocity_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.CanUpdateMovingRotation
// 0x0004 (0x0004 - 0x0000)
struct BP_Character_C_CanUpdateMovingRotation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_CanUpdateMovingRotation) == 0x000001, "Wrong alignment on BP_Character_C_CanUpdateMovingRotation");
static_assert(sizeof(BP_Character_C_CanUpdateMovingRotation) == 0x000004, "Wrong size on BP_Character_C_CanUpdateMovingRotation");
static_assert(offsetof(BP_Character_C_CanUpdateMovingRotation, ReturnValue) == 0x000000, "Member 'BP_Character_C_CanUpdateMovingRotation::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CanUpdateMovingRotation, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000001, "Member 'BP_Character_C_CanUpdateMovingRotation::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CanUpdateMovingRotation, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'BP_Character_C_CanUpdateMovingRotation::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CanUpdateMovingRotation, CallFunc_BooleanOR_ReturnValue) == 0x000003, "Member 'BP_Character_C_CanUpdateMovingRotation::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.CapsuleHasRoomCheck
// 0x02B8 (0x02B8 - 0x0000)
struct BP_Character_C_CapsuleHasRoomCheck final
{
public:
	class UCapsuleComponent*                      Param_Capsule;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation;                                    // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HeightOffset;                                      // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RadiusOffset;                                      // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               DebugType;                                         // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3153[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0038(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          HasRoom;                                           // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3154[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_WithoutHemisphere_ReturnValue; // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3155[0x4];                                     // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_2;           // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_SphereTraceSingle_OutHit;                 // 0x00D8(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingle_ReturnValue;            // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x01C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x01C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3156[0x1];                                     // 0x01C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3157[0x4];                                     // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x01D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x01E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0200(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0218(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0230(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0238(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0240(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3158[0x4];                                     // 0x0264(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0268(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0280(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanNOR_ReturnValue;                   // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3159[0x7];                                     // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x02A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast_1;        // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SphereTraceSingle_Radius_ImplicitCast;    // 0x02B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_CapsuleHasRoomCheck) == 0x000008, "Wrong alignment on BP_Character_C_CapsuleHasRoomCheck");
static_assert(sizeof(BP_Character_C_CapsuleHasRoomCheck) == 0x0002B8, "Wrong size on BP_Character_C_CapsuleHasRoomCheck");
static_assert(offsetof(BP_Character_C_CapsuleHasRoomCheck, Param_Capsule) == 0x000000, "Member 'BP_Character_C_CapsuleHasRoomCheck::Param_Capsule' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CapsuleHasRoomCheck, TargetLocation) == 0x000008, "Member 'BP_Character_C_CapsuleHasRoomCheck::TargetLocation' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CapsuleHasRoomCheck, HeightOffset) == 0x000020, "Member 'BP_Character_C_CapsuleHasRoomCheck::HeightOffset' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CapsuleHasRoomCheck, RadiusOffset) == 0x000028, "Member 'BP_Character_C_CapsuleHasRoomCheck::RadiusOffset' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CapsuleHasRoomCheck, DebugType) == 0x000030, "Member 'BP_Character_C_CapsuleHasRoomCheck::DebugType' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CapsuleHasRoomCheck, ActorsToIgnore) == 0x000038, "Member 'BP_Character_C_CapsuleHasRoomCheck::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CapsuleHasRoomCheck, HasRoom) == 0x000048, "Member 'BP_Character_C_CapsuleHasRoomCheck::HasRoom' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CapsuleHasRoomCheck, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000050, "Member 'BP_Character_C_CapsuleHasRoomCheck::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CapsuleHasRoomCheck, CallFunc_GetScaledCapsuleHalfHeight_WithoutHemisphere_ReturnValue) == 0x000058, "Member 'BP_Character_C_CapsuleHasRoomCheck::CallFunc_GetScaledCapsuleHalfHeight_WithoutHemisphere_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CapsuleHasRoomCheck, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000060, "Member 'BP_Character_C_CapsuleHasRoomCheck::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CapsuleHasRoomCheck, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000068, "Member 'BP_Character_C_CapsuleHasRoomCheck::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CapsuleHasRoomCheck, CallFunc_Add_DoubleDouble_ReturnValue_2) == 0x000070, "Member 'BP_Character_C_CapsuleHasRoomCheck::CallFunc_Add_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CapsuleHasRoomCheck, CallFunc_MakeVector_ReturnValue) == 0x000078, "Member 'BP_Character_C_CapsuleHasRoomCheck::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CapsuleHasRoomCheck, CallFunc_MakeVector_ReturnValue_1) == 0x000090, "Member 'BP_Character_C_CapsuleHasRoomCheck::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CapsuleHasRoomCheck, CallFunc_Add_VectorVector_ReturnValue) == 0x0000A8, "Member 'BP_Character_C_CapsuleHasRoomCheck::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CapsuleHasRoomCheck, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000C0, "Member 'BP_Character_C_CapsuleHasRoomCheck::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CapsuleHasRoomCheck, CallFunc_SphereTraceSingle_OutHit) == 0x0000D8, "Member 'BP_Character_C_CapsuleHasRoomCheck::CallFunc_SphereTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CapsuleHasRoomCheck, CallFunc_SphereTraceSingle_ReturnValue) == 0x0001C0, "Member 'BP_Character_C_CapsuleHasRoomCheck::CallFunc_SphereTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CapsuleHasRoomCheck, CallFunc_BreakHitResult_bBlockingHit) == 0x0001C1, "Member 'BP_Character_C_CapsuleHasRoomCheck::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CapsuleHasRoomCheck, CallFunc_BreakHitResult_bInitialOverlap) == 0x0001C2, "Member 'BP_Character_C_CapsuleHasRoomCheck::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CapsuleHasRoomCheck, CallFunc_BreakHitResult_Time) == 0x0001C4, "Member 'BP_Character_C_CapsuleHasRoomCheck::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CapsuleHasRoomCheck, CallFunc_BreakHitResult_Distance) == 0x0001C8, "Member 'BP_Character_C_CapsuleHasRoomCheck::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CapsuleHasRoomCheck, CallFunc_BreakHitResult_Location) == 0x0001D0, "Member 'BP_Character_C_CapsuleHasRoomCheck::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CapsuleHasRoomCheck, CallFunc_BreakHitResult_ImpactPoint) == 0x0001E8, "Member 'BP_Character_C_CapsuleHasRoomCheck::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CapsuleHasRoomCheck, CallFunc_BreakHitResult_Normal) == 0x000200, "Member 'BP_Character_C_CapsuleHasRoomCheck::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CapsuleHasRoomCheck, CallFunc_BreakHitResult_ImpactNormal) == 0x000218, "Member 'BP_Character_C_CapsuleHasRoomCheck::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CapsuleHasRoomCheck, CallFunc_BreakHitResult_PhysMat) == 0x000230, "Member 'BP_Character_C_CapsuleHasRoomCheck::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CapsuleHasRoomCheck, CallFunc_BreakHitResult_HitActor) == 0x000238, "Member 'BP_Character_C_CapsuleHasRoomCheck::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CapsuleHasRoomCheck, CallFunc_BreakHitResult_HitComponent) == 0x000240, "Member 'BP_Character_C_CapsuleHasRoomCheck::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CapsuleHasRoomCheck, CallFunc_BreakHitResult_HitBoneName) == 0x000248, "Member 'BP_Character_C_CapsuleHasRoomCheck::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CapsuleHasRoomCheck, CallFunc_BreakHitResult_BoneName) == 0x000250, "Member 'BP_Character_C_CapsuleHasRoomCheck::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CapsuleHasRoomCheck, CallFunc_BreakHitResult_HitItem) == 0x000258, "Member 'BP_Character_C_CapsuleHasRoomCheck::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CapsuleHasRoomCheck, CallFunc_BreakHitResult_ElementIndex) == 0x00025C, "Member 'BP_Character_C_CapsuleHasRoomCheck::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CapsuleHasRoomCheck, CallFunc_BreakHitResult_FaceIndex) == 0x000260, "Member 'BP_Character_C_CapsuleHasRoomCheck::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CapsuleHasRoomCheck, CallFunc_BreakHitResult_TraceStart) == 0x000268, "Member 'BP_Character_C_CapsuleHasRoomCheck::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CapsuleHasRoomCheck, CallFunc_BreakHitResult_TraceEnd) == 0x000280, "Member 'BP_Character_C_CapsuleHasRoomCheck::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CapsuleHasRoomCheck, CallFunc_BooleanNOR_ReturnValue) == 0x000298, "Member 'BP_Character_C_CapsuleHasRoomCheck::CallFunc_BooleanNOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CapsuleHasRoomCheck, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x0002A0, "Member 'BP_Character_C_CapsuleHasRoomCheck::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CapsuleHasRoomCheck, CallFunc_Add_DoubleDouble_A_ImplicitCast_1) == 0x0002A8, "Member 'BP_Character_C_CapsuleHasRoomCheck::CallFunc_Add_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CapsuleHasRoomCheck, CallFunc_SphereTraceSingle_Radius_ImplicitCast) == 0x0002B0, "Member 'BP_Character_C_CapsuleHasRoomCheck::CallFunc_SphereTraceSingle_Radius_ImplicitCast' has a wrong offset!");

// Function BP_Character.BP_Character_C.ChainAlreadyExist?
// 0x0028 (0x0028 - 0x0000)
struct BP_Character_C_ChainAlreadyExist_ final
{
public:
	class APawn*                                  Player01;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  Player02;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_315A[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_NewChain_C*                         CallFunc_GetChainByCharacters_Array_Element;       // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetChainByCharacters_ReturnValue;         // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_ChainAlreadyExist_) == 0x000008, "Wrong alignment on BP_Character_C_ChainAlreadyExist_");
static_assert(sizeof(BP_Character_C_ChainAlreadyExist_) == 0x000028, "Wrong size on BP_Character_C_ChainAlreadyExist_");
static_assert(offsetof(BP_Character_C_ChainAlreadyExist_, Player01) == 0x000000, "Member 'BP_Character_C_ChainAlreadyExist_::Player01' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ChainAlreadyExist_, Player02) == 0x000008, "Member 'BP_Character_C_ChainAlreadyExist_::Player02' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ChainAlreadyExist_, ReturnValue) == 0x000010, "Member 'BP_Character_C_ChainAlreadyExist_::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ChainAlreadyExist_, CallFunc_GetChainByCharacters_Array_Element) == 0x000018, "Member 'BP_Character_C_ChainAlreadyExist_::CallFunc_GetChainByCharacters_Array_Element' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ChainAlreadyExist_, CallFunc_GetChainByCharacters_ReturnValue) == 0x000020, "Member 'BP_Character_C_ChainAlreadyExist_::CallFunc_GetChainByCharacters_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.ChangeCurrentVehicle
// 0x0008 (0x0008 - 0x0000)
struct BP_Character_C_ChangeCurrentVehicle final
{
public:
	class AActor*                                 Vehicle;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_ChangeCurrentVehicle) == 0x000008, "Wrong alignment on BP_Character_C_ChangeCurrentVehicle");
static_assert(sizeof(BP_Character_C_ChangeCurrentVehicle) == 0x000008, "Wrong size on BP_Character_C_ChangeCurrentVehicle");
static_assert(offsetof(BP_Character_C_ChangeCurrentVehicle, Vehicle) == 0x000000, "Member 'BP_Character_C_ChangeCurrentVehicle::Vehicle' has a wrong offset!");

// Function BP_Character.BP_Character_C.Character Bounce
// 0x0008 (0x0008 - 0x0000)
struct BP_Character_C_Character_Bounce final
{
public:
	double                                        Force;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_Character_Bounce) == 0x000008, "Wrong alignment on BP_Character_C_Character_Bounce");
static_assert(sizeof(BP_Character_C_Character_Bounce) == 0x000008, "Wrong size on BP_Character_C_Character_Bounce");
static_assert(offsetof(BP_Character_C_Character_Bounce, Force) == 0x000000, "Member 'BP_Character_C_Character_Bounce::Force' has a wrong offset!");

// Function BP_Character.BP_Character_C.CheckDeathInLava
// 0x00F0 (0x00F0 - 0x0000)
struct BP_Character_C_CheckDeathInLava final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_1;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_315B[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGS_Game_C*                             K2Node_DynamicCast_AsGS_Game;                      // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_315C[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_1;               // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Gamestate_C>      K2Node_DynamicCast_AsBPI_Gamestate;                // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_315D[0x6];                                     // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_315E[0x6];                                     // 0x00A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_Lava_C*>                     CallFunc_GetAllActorsOfClass_OutActors;            // 0x00A8(0x0010)(ReferenceParm)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_315F[0x7];                                     // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Lava_C*                             CallFunc_Array_Get_Item;                           // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsEmpty_ReturnValue;                // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3160[0x7];                                     // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_2;               // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Gamestate_C>      K2Node_DynamicCast_AsBPI_Gamestate_1;              // 0x00D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLaveMode_Lava;                         // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_CheckDeathInLava) == 0x000008, "Wrong alignment on BP_Character_C_CheckDeathInLava");
static_assert(sizeof(BP_Character_C_CheckDeathInLava) == 0x0000F0, "Wrong size on BP_Character_C_CheckDeathInLava");
static_assert(offsetof(BP_Character_C_CheckDeathInLava, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'BP_Character_C_CheckDeathInLava::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckDeathInLava, CallFunc_HasAuthority_ReturnValue_1) == 0x000001, "Member 'BP_Character_C_CheckDeathInLava::CallFunc_HasAuthority_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckDeathInLava, CallFunc_GetGameState_ReturnValue) == 0x000008, "Member 'BP_Character_C_CheckDeathInLava::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckDeathInLava, K2Node_DynamicCast_AsGS_Game) == 0x000010, "Member 'BP_Character_C_CheckDeathInLava::K2Node_DynamicCast_AsGS_Game' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckDeathInLava, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_Character_C_CheckDeathInLava::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckDeathInLava, CallFunc_GetGameState_ReturnValue_1) == 0x000020, "Member 'BP_Character_C_CheckDeathInLava::CallFunc_GetGameState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckDeathInLava, K2Node_DynamicCast_AsBPI_Gamestate) == 0x000028, "Member 'BP_Character_C_CheckDeathInLava::K2Node_DynamicCast_AsBPI_Gamestate' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckDeathInLava, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'BP_Character_C_CheckDeathInLava::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckDeathInLava, K2Node_SwitchEnum_CmpSuccess) == 0x000039, "Member 'BP_Character_C_CheckDeathInLava::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckDeathInLava, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000040, "Member 'BP_Character_C_CheckDeathInLava::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckDeathInLava, CallFunc_BreakVector_X) == 0x000058, "Member 'BP_Character_C_CheckDeathInLava::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckDeathInLava, CallFunc_BreakVector_Y) == 0x000060, "Member 'BP_Character_C_CheckDeathInLava::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckDeathInLava, CallFunc_BreakVector_Z) == 0x000068, "Member 'BP_Character_C_CheckDeathInLava::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckDeathInLava, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000070, "Member 'BP_Character_C_CheckDeathInLava::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckDeathInLava, CallFunc_BreakVector_X_1) == 0x000088, "Member 'BP_Character_C_CheckDeathInLava::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckDeathInLava, CallFunc_BreakVector_Y_1) == 0x000090, "Member 'BP_Character_C_CheckDeathInLava::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckDeathInLava, CallFunc_BreakVector_Z_1) == 0x000098, "Member 'BP_Character_C_CheckDeathInLava::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckDeathInLava, CallFunc_IsValid_ReturnValue) == 0x0000A0, "Member 'BP_Character_C_CheckDeathInLava::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckDeathInLava, CallFunc_Less_DoubleDouble_ReturnValue) == 0x0000A1, "Member 'BP_Character_C_CheckDeathInLava::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckDeathInLava, CallFunc_GetAllActorsOfClass_OutActors) == 0x0000A8, "Member 'BP_Character_C_CheckDeathInLava::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckDeathInLava, CallFunc_IsValid_ReturnValue_1) == 0x0000B8, "Member 'BP_Character_C_CheckDeathInLava::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckDeathInLava, CallFunc_Array_Get_Item) == 0x0000C0, "Member 'BP_Character_C_CheckDeathInLava::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckDeathInLava, CallFunc_Array_IsEmpty_ReturnValue) == 0x0000C8, "Member 'BP_Character_C_CheckDeathInLava::CallFunc_Array_IsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckDeathInLava, CallFunc_GetGameState_ReturnValue_2) == 0x0000D0, "Member 'BP_Character_C_CheckDeathInLava::CallFunc_GetGameState_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckDeathInLava, K2Node_DynamicCast_AsBPI_Gamestate_1) == 0x0000D8, "Member 'BP_Character_C_CheckDeathInLava::K2Node_DynamicCast_AsBPI_Gamestate_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckDeathInLava, K2Node_DynamicCast_bSuccess_2) == 0x0000E8, "Member 'BP_Character_C_CheckDeathInLava::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckDeathInLava, CallFunc_GetLaveMode_Lava) == 0x0000E9, "Member 'BP_Character_C_CheckDeathInLava::CallFunc_GetLaveMode_Lava' has a wrong offset!");

// Function BP_Character.BP_Character_C.CheckForTrampoline
// 0x02B0 (0x02B0 - 0x0000)
struct BP_Character_C_CheckForTrampoline final
{
public:
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0000(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               CallFunc_TraceVisibility_Result;                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3161[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetComponentVelocity_ReturnValue;         // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3162[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_SphereTraceSingle_OutHit;                 // 0x00A0(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingle_ReturnValue;            // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0189(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x018A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3163[0x1];                                     // 0x018B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3164[0x4];                                     // 0x0194(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0198(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x01B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x01C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x01E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x01F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0200(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0208(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3165[0x4];                                     // 0x022C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0230(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0248(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Trampoline_C>     K2Node_DynamicCast_AsBPI_Trampoline;               // 0x0260(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3166[0x7];                                     // 0x0271(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_Trampoline_C>     K2Node_DynamicCast_AsBPI_Trampoline_1;             // 0x0278(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_JustZImpulse_JustZ;                       // 0x0289(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3167[0x6];                                     // 0x028A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetBounceForce_Force;                     // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0298(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesImplementInterface_ReturnValue;       // 0x02A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3168[0x7];                                     // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_CheckForTrampoline) == 0x000008, "Wrong alignment on BP_Character_C_CheckForTrampoline");
static_assert(sizeof(BP_Character_C_CheckForTrampoline) == 0x0002B0, "Wrong size on BP_Character_C_CheckForTrampoline");
static_assert(offsetof(BP_Character_C_CheckForTrampoline, Temp_object_Variable) == 0x000000, "Member 'BP_Character_C_CheckForTrampoline::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckForTrampoline, CallFunc_IsLocallyControlled_ReturnValue) == 0x000010, "Member 'BP_Character_C_CheckForTrampoline::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckForTrampoline, CallFunc_TraceVisibility_Result) == 0x000011, "Member 'BP_Character_C_CheckForTrampoline::CallFunc_TraceVisibility_Result' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckForTrampoline, CallFunc_GetComponentVelocity_ReturnValue) == 0x000018, "Member 'BP_Character_C_CheckForTrampoline::CallFunc_GetComponentVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckForTrampoline, CallFunc_BreakVector_X) == 0x000030, "Member 'BP_Character_C_CheckForTrampoline::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckForTrampoline, CallFunc_BreakVector_Y) == 0x000038, "Member 'BP_Character_C_CheckForTrampoline::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckForTrampoline, CallFunc_BreakVector_Z) == 0x000040, "Member 'BP_Character_C_CheckForTrampoline::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckForTrampoline, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000048, "Member 'BP_Character_C_CheckForTrampoline::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckForTrampoline, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000050, "Member 'BP_Character_C_CheckForTrampoline::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckForTrampoline, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000068, "Member 'BP_Character_C_CheckForTrampoline::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckForTrampoline, CallFunc_MakeVector_ReturnValue) == 0x000070, "Member 'BP_Character_C_CheckForTrampoline::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckForTrampoline, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000088, "Member 'BP_Character_C_CheckForTrampoline::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckForTrampoline, CallFunc_SphereTraceSingle_OutHit) == 0x0000A0, "Member 'BP_Character_C_CheckForTrampoline::CallFunc_SphereTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckForTrampoline, CallFunc_SphereTraceSingle_ReturnValue) == 0x000188, "Member 'BP_Character_C_CheckForTrampoline::CallFunc_SphereTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckForTrampoline, CallFunc_BreakHitResult_bBlockingHit) == 0x000189, "Member 'BP_Character_C_CheckForTrampoline::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckForTrampoline, CallFunc_BreakHitResult_bInitialOverlap) == 0x00018A, "Member 'BP_Character_C_CheckForTrampoline::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckForTrampoline, CallFunc_BreakHitResult_Time) == 0x00018C, "Member 'BP_Character_C_CheckForTrampoline::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckForTrampoline, CallFunc_BreakHitResult_Distance) == 0x000190, "Member 'BP_Character_C_CheckForTrampoline::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckForTrampoline, CallFunc_BreakHitResult_Location) == 0x000198, "Member 'BP_Character_C_CheckForTrampoline::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckForTrampoline, CallFunc_BreakHitResult_ImpactPoint) == 0x0001B0, "Member 'BP_Character_C_CheckForTrampoline::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckForTrampoline, CallFunc_BreakHitResult_Normal) == 0x0001C8, "Member 'BP_Character_C_CheckForTrampoline::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckForTrampoline, CallFunc_BreakHitResult_ImpactNormal) == 0x0001E0, "Member 'BP_Character_C_CheckForTrampoline::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckForTrampoline, CallFunc_BreakHitResult_PhysMat) == 0x0001F8, "Member 'BP_Character_C_CheckForTrampoline::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckForTrampoline, CallFunc_BreakHitResult_HitActor) == 0x000200, "Member 'BP_Character_C_CheckForTrampoline::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckForTrampoline, CallFunc_BreakHitResult_HitComponent) == 0x000208, "Member 'BP_Character_C_CheckForTrampoline::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckForTrampoline, CallFunc_BreakHitResult_HitBoneName) == 0x000210, "Member 'BP_Character_C_CheckForTrampoline::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckForTrampoline, CallFunc_BreakHitResult_BoneName) == 0x000218, "Member 'BP_Character_C_CheckForTrampoline::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckForTrampoline, CallFunc_BreakHitResult_HitItem) == 0x000220, "Member 'BP_Character_C_CheckForTrampoline::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckForTrampoline, CallFunc_BreakHitResult_ElementIndex) == 0x000224, "Member 'BP_Character_C_CheckForTrampoline::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckForTrampoline, CallFunc_BreakHitResult_FaceIndex) == 0x000228, "Member 'BP_Character_C_CheckForTrampoline::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckForTrampoline, CallFunc_BreakHitResult_TraceStart) == 0x000230, "Member 'BP_Character_C_CheckForTrampoline::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckForTrampoline, CallFunc_BreakHitResult_TraceEnd) == 0x000248, "Member 'BP_Character_C_CheckForTrampoline::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckForTrampoline, K2Node_DynamicCast_AsBPI_Trampoline) == 0x000260, "Member 'BP_Character_C_CheckForTrampoline::K2Node_DynamicCast_AsBPI_Trampoline' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckForTrampoline, K2Node_DynamicCast_bSuccess) == 0x000270, "Member 'BP_Character_C_CheckForTrampoline::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckForTrampoline, K2Node_DynamicCast_AsBPI_Trampoline_1) == 0x000278, "Member 'BP_Character_C_CheckForTrampoline::K2Node_DynamicCast_AsBPI_Trampoline_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckForTrampoline, K2Node_DynamicCast_bSuccess_1) == 0x000288, "Member 'BP_Character_C_CheckForTrampoline::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckForTrampoline, CallFunc_JustZImpulse_JustZ) == 0x000289, "Member 'BP_Character_C_CheckForTrampoline::CallFunc_JustZImpulse_JustZ' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckForTrampoline, CallFunc_GetBounceForce_Force) == 0x000290, "Member 'BP_Character_C_CheckForTrampoline::CallFunc_GetBounceForce_Force' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckForTrampoline, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000298, "Member 'BP_Character_C_CheckForTrampoline::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckForTrampoline, CallFunc_DoesImplementInterface_ReturnValue) == 0x0002A0, "Member 'BP_Character_C_CheckForTrampoline::CallFunc_DoesImplementInterface_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckForTrampoline, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x0002A8, "Member 'BP_Character_C_CheckForTrampoline::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BP_Character.BP_Character_C.CheckMaxDistanceWithOthers
// 0x0070 (0x0070 - 0x0000)
struct BP_Character_C_CheckMaxDistanceWithOthers final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDistanceLocal;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3169[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_316A[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Vector_Distance_ReturnValue;              // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_316B[0x2];                                     // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_VariableSet_MaxDistanceLocal_ImplicitCast;  // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_B_ImplicitCast;      // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_CheckMaxDistanceWithOthers) == 0x000008, "Wrong alignment on BP_Character_C_CheckMaxDistanceWithOthers");
static_assert(sizeof(BP_Character_C_CheckMaxDistanceWithOthers) == 0x000070, "Wrong size on BP_Character_C_CheckMaxDistanceWithOthers");
static_assert(offsetof(BP_Character_C_CheckMaxDistanceWithOthers, Distance) == 0x000000, "Member 'BP_Character_C_CheckMaxDistanceWithOthers::Distance' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckMaxDistanceWithOthers, MaxDistanceLocal) == 0x000004, "Member 'BP_Character_C_CheckMaxDistanceWithOthers::MaxDistanceLocal' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckMaxDistanceWithOthers, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_Character_C_CheckMaxDistanceWithOthers::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckMaxDistanceWithOthers, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'BP_Character_C_CheckMaxDistanceWithOthers::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckMaxDistanceWithOthers, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BP_Character_C_CheckMaxDistanceWithOthers::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckMaxDistanceWithOthers, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'BP_Character_C_CheckMaxDistanceWithOthers::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckMaxDistanceWithOthers, CallFunc_Array_Get_Item) == 0x000030, "Member 'BP_Character_C_CheckMaxDistanceWithOthers::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckMaxDistanceWithOthers, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000038, "Member 'BP_Character_C_CheckMaxDistanceWithOthers::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckMaxDistanceWithOthers, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'BP_Character_C_CheckMaxDistanceWithOthers::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckMaxDistanceWithOthers, CallFunc_Vector_Distance_ReturnValue) == 0x000058, "Member 'BP_Character_C_CheckMaxDistanceWithOthers::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckMaxDistanceWithOthers, CallFunc_Less_IntInt_ReturnValue) == 0x000060, "Member 'BP_Character_C_CheckMaxDistanceWithOthers::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckMaxDistanceWithOthers, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000061, "Member 'BP_Character_C_CheckMaxDistanceWithOthers::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckMaxDistanceWithOthers, K2Node_VariableSet_MaxDistanceLocal_ImplicitCast) == 0x000064, "Member 'BP_Character_C_CheckMaxDistanceWithOthers::K2Node_VariableSet_MaxDistanceLocal_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_CheckMaxDistanceWithOthers, CallFunc_Greater_DoubleDouble_B_ImplicitCast) == 0x000068, "Member 'BP_Character_C_CheckMaxDistanceWithOthers::CallFunc_Greater_DoubleDouble_B_ImplicitCast' has a wrong offset!");

// Function BP_Character.BP_Character_C.ClientLocationSRV
// 0x0018 (0x0018 - 0x0000)
struct BP_Character_C_ClientLocationSRV final
{
public:
	struct FVector                                Param_ClientRepLocation;                           // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_ClientLocationSRV) == 0x000008, "Wrong alignment on BP_Character_C_ClientLocationSRV");
static_assert(sizeof(BP_Character_C_ClientLocationSRV) == 0x000018, "Wrong size on BP_Character_C_ClientLocationSRV");
static_assert(offsetof(BP_Character_C_ClientLocationSRV, Param_ClientRepLocation) == 0x000000, "Member 'BP_Character_C_ClientLocationSRV::Param_ClientRepLocation' has a wrong offset!");

// Function BP_Character.BP_Character_C.ClimbAll
// 0x0048 (0x0048 - 0x0000)
struct BP_Character_C_ClimbAll final
{
public:
	struct FRotator                               NewRotation;                                       // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                Loc;                                               // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Normal;                                            // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_ClimbAll) == 0x000008, "Wrong alignment on BP_Character_C_ClimbAll");
static_assert(sizeof(BP_Character_C_ClimbAll) == 0x000048, "Wrong size on BP_Character_C_ClimbAll");
static_assert(offsetof(BP_Character_C_ClimbAll, NewRotation) == 0x000000, "Member 'BP_Character_C_ClimbAll::NewRotation' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ClimbAll, Loc) == 0x000018, "Member 'BP_Character_C_ClimbAll::Loc' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ClimbAll, Normal) == 0x000030, "Member 'BP_Character_C_ClimbAll::Normal' has a wrong offset!");

// Function BP_Character.BP_Character_C.ClimbSideTrace
// 0x01F0 (0x01F0 - 0x0000)
struct BP_Character_C_ClimbSideTrace final
{
public:
	double                                        SideDistance;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ForwardDistance;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ClimbableWall;                                     // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_316C[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0018(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue_1;        // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_SphereTraceSingle_OutHit;                 // 0x0100(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingle_ReturnValue;            // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_ClimbSideTrace) == 0x000008, "Wrong alignment on BP_Character_C_ClimbSideTrace");
static_assert(sizeof(BP_Character_C_ClimbSideTrace) == 0x0001F0, "Wrong size on BP_Character_C_ClimbSideTrace");
static_assert(offsetof(BP_Character_C_ClimbSideTrace, SideDistance) == 0x000000, "Member 'BP_Character_C_ClimbSideTrace::SideDistance' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ClimbSideTrace, ForwardDistance) == 0x000008, "Member 'BP_Character_C_ClimbSideTrace::ForwardDistance' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ClimbSideTrace, ClimbableWall) == 0x000010, "Member 'BP_Character_C_ClimbSideTrace::ClimbableWall' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ClimbSideTrace, Temp_object_Variable) == 0x000018, "Member 'BP_Character_C_ClimbSideTrace::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ClimbSideTrace, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000028, "Member 'BP_Character_C_ClimbSideTrace::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ClimbSideTrace, CallFunc_Conv_DoubleToVector_ReturnValue_1) == 0x000040, "Member 'BP_Character_C_ClimbSideTrace::CallFunc_Conv_DoubleToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ClimbSideTrace, CallFunc_GetRightVector_ReturnValue) == 0x000058, "Member 'BP_Character_C_ClimbSideTrace::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ClimbSideTrace, CallFunc_GetForwardVector_ReturnValue) == 0x000070, "Member 'BP_Character_C_ClimbSideTrace::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ClimbSideTrace, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000088, "Member 'BP_Character_C_ClimbSideTrace::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ClimbSideTrace, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x0000A0, "Member 'BP_Character_C_ClimbSideTrace::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ClimbSideTrace, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x0000B8, "Member 'BP_Character_C_ClimbSideTrace::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ClimbSideTrace, CallFunc_Add_VectorVector_ReturnValue) == 0x0000D0, "Member 'BP_Character_C_ClimbSideTrace::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ClimbSideTrace, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0000E8, "Member 'BP_Character_C_ClimbSideTrace::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ClimbSideTrace, CallFunc_SphereTraceSingle_OutHit) == 0x000100, "Member 'BP_Character_C_ClimbSideTrace::CallFunc_SphereTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ClimbSideTrace, CallFunc_SphereTraceSingle_ReturnValue) == 0x0001E8, "Member 'BP_Character_C_ClimbSideTrace::CallFunc_SphereTraceSingle_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.ClimbSRV
// 0x0050 (0x0050 - 0x0000)
struct BP_Character_C_ClimbSRV final
{
public:
	struct FRotator                               NewRotation;                                       // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                Loc;                                               // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Normal;                                            // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Stop;                                              // 0x0048(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_ClimbSRV) == 0x000008, "Wrong alignment on BP_Character_C_ClimbSRV");
static_assert(sizeof(BP_Character_C_ClimbSRV) == 0x000050, "Wrong size on BP_Character_C_ClimbSRV");
static_assert(offsetof(BP_Character_C_ClimbSRV, NewRotation) == 0x000000, "Member 'BP_Character_C_ClimbSRV::NewRotation' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ClimbSRV, Loc) == 0x000018, "Member 'BP_Character_C_ClimbSRV::Loc' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ClimbSRV, Normal) == 0x000030, "Member 'BP_Character_C_ClimbSRV::Normal' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ClimbSRV, Stop) == 0x000048, "Member 'BP_Character_C_ClimbSRV::Stop' has a wrong offset!");

// Function BP_Character.BP_Character_C.DetachFromBalancier
// 0x0018 (0x0018 - 0x0000)
struct BP_Character_C_DetachFromBalancier final
{
public:
	TScriptInterface<class IBPI_Balancier_C>      K2Node_DynamicCast_AsBPI_Balancier;                // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_DetachFromBalancier) == 0x000008, "Wrong alignment on BP_Character_C_DetachFromBalancier");
static_assert(sizeof(BP_Character_C_DetachFromBalancier) == 0x000018, "Wrong size on BP_Character_C_DetachFromBalancier");
static_assert(offsetof(BP_Character_C_DetachFromBalancier, K2Node_DynamicCast_AsBPI_Balancier) == 0x000000, "Member 'BP_Character_C_DetachFromBalancier::K2Node_DynamicCast_AsBPI_Balancier' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetachFromBalancier, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_Character_C_DetachFromBalancier::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetachFromBalancier, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'BP_Character_C_DetachFromBalancier::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetachFromBalancier, CallFunc_IsValid_ReturnValue_1) == 0x000012, "Member 'BP_Character_C_DetachFromBalancier::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_Character.BP_Character_C.DetectChainViolation
// 0x01A0 (0x01A0 - 0x0000)
struct BP_Character_C_DetectChainViolation final
{
public:
	bool                                          Violation;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_316D[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_316E[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_316F[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_ChainPhysics_C>   K2Node_DynamicCast_AsBPI_Chain_Physics;            // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3170[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetAttachedChars_AttachedChars;           // 0x0040(0x0010)(ReferenceParm)
	TScriptInterface<class IBPI_ChainPhysics_C>   K2Node_DynamicCast_AsBPI_Chain_Physics_1;          // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3171[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item_1;                         // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetCurrentChainDistance_CurrentChainDistance; // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Character_C>      K2Node_DynamicCast_AsBPI_Character;                // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAnimVariables_Jump;                    // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAnimVariables_Fall;                    // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3172[0x5];                                     // 0x008B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetAnimVariables_RadialVelocity;          // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetAnimVariables_MoveInput;               // 0x00A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAnimVariables_Climb;                   // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAnimVariables_Pull;                    // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3173[0x6];                                     // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAnimVariables_PulledCharacter;         // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAnimVariables_IsDriving;               // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3174[0x7];                                     // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetAnimVariables_DriveLeftHand;           // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetAnimVariables_DriveRightHand;          // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAnimVariables_LookAround;              // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3175[0x6];                                     // 0x0102(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item_2;                         // 0x0108(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Character_C>      K2Node_DynamicCast_AsBPI_Character_1;              // 0x0110(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAnimVariables_Jump_1;                  // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAnimVariables_Fall_1;                  // 0x0122(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3176[0x5];                                     // 0x0123(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetAnimVariables_RadialVelocity_1;        // 0x0128(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetAnimVariables_MoveInput_1;             // 0x0140(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAnimVariables_Climb_1;                 // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAnimVariables_Pull_1;                  // 0x0151(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3177[0x6];                                     // 0x0152(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAnimVariables_PulledCharacter_1;       // 0x0158(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAnimVariables_IsDriving_1;             // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3178[0x7];                                     // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetAnimVariables_DriveLeftHand_1;         // 0x0168(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetAnimVariables_DriveRightHand_1;        // 0x0180(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAnimVariables_LookAround_1;            // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0199(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_DetectChainViolation) == 0x000008, "Wrong alignment on BP_Character_C_DetectChainViolation");
static_assert(sizeof(BP_Character_C_DetectChainViolation) == 0x0001A0, "Wrong size on BP_Character_C_DetectChainViolation");
static_assert(offsetof(BP_Character_C_DetectChainViolation, Violation) == 0x000000, "Member 'BP_Character_C_DetectChainViolation::Violation' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectChainViolation, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_Character_C_DetectChainViolation::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectChainViolation, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BP_Character_C_DetectChainViolation::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectChainViolation, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_Character_C_DetectChainViolation::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectChainViolation, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'BP_Character_C_DetectChainViolation::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectChainViolation, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_Character_C_DetectChainViolation::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectChainViolation, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'BP_Character_C_DetectChainViolation::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectChainViolation, K2Node_DynamicCast_AsBPI_Chain_Physics) == 0x000028, "Member 'BP_Character_C_DetectChainViolation::K2Node_DynamicCast_AsBPI_Chain_Physics' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectChainViolation, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_Character_C_DetectChainViolation::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectChainViolation, CallFunc_GetAttachedChars_AttachedChars) == 0x000040, "Member 'BP_Character_C_DetectChainViolation::CallFunc_GetAttachedChars_AttachedChars' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectChainViolation, K2Node_DynamicCast_AsBPI_Chain_Physics_1) == 0x000050, "Member 'BP_Character_C_DetectChainViolation::K2Node_DynamicCast_AsBPI_Chain_Physics_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectChainViolation, K2Node_DynamicCast_bSuccess_1) == 0x000060, "Member 'BP_Character_C_DetectChainViolation::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectChainViolation, CallFunc_Array_Get_Item_1) == 0x000068, "Member 'BP_Character_C_DetectChainViolation::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectChainViolation, CallFunc_GetCurrentChainDistance_CurrentChainDistance) == 0x000070, "Member 'BP_Character_C_DetectChainViolation::CallFunc_GetCurrentChainDistance_CurrentChainDistance' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectChainViolation, K2Node_DynamicCast_AsBPI_Character) == 0x000078, "Member 'BP_Character_C_DetectChainViolation::K2Node_DynamicCast_AsBPI_Character' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectChainViolation, K2Node_DynamicCast_bSuccess_2) == 0x000088, "Member 'BP_Character_C_DetectChainViolation::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectChainViolation, CallFunc_GetAnimVariables_Jump) == 0x000089, "Member 'BP_Character_C_DetectChainViolation::CallFunc_GetAnimVariables_Jump' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectChainViolation, CallFunc_GetAnimVariables_Fall) == 0x00008A, "Member 'BP_Character_C_DetectChainViolation::CallFunc_GetAnimVariables_Fall' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectChainViolation, CallFunc_GetAnimVariables_RadialVelocity) == 0x000090, "Member 'BP_Character_C_DetectChainViolation::CallFunc_GetAnimVariables_RadialVelocity' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectChainViolation, CallFunc_GetAnimVariables_MoveInput) == 0x0000A8, "Member 'BP_Character_C_DetectChainViolation::CallFunc_GetAnimVariables_MoveInput' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectChainViolation, CallFunc_GetAnimVariables_Climb) == 0x0000B8, "Member 'BP_Character_C_DetectChainViolation::CallFunc_GetAnimVariables_Climb' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectChainViolation, CallFunc_GetAnimVariables_Pull) == 0x0000B9, "Member 'BP_Character_C_DetectChainViolation::CallFunc_GetAnimVariables_Pull' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectChainViolation, CallFunc_GetAnimVariables_PulledCharacter) == 0x0000C0, "Member 'BP_Character_C_DetectChainViolation::CallFunc_GetAnimVariables_PulledCharacter' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectChainViolation, CallFunc_GetAnimVariables_IsDriving) == 0x0000C8, "Member 'BP_Character_C_DetectChainViolation::CallFunc_GetAnimVariables_IsDriving' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectChainViolation, CallFunc_GetAnimVariables_DriveLeftHand) == 0x0000D0, "Member 'BP_Character_C_DetectChainViolation::CallFunc_GetAnimVariables_DriveLeftHand' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectChainViolation, CallFunc_GetAnimVariables_DriveRightHand) == 0x0000E8, "Member 'BP_Character_C_DetectChainViolation::CallFunc_GetAnimVariables_DriveRightHand' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectChainViolation, CallFunc_GetAnimVariables_LookAround) == 0x000100, "Member 'BP_Character_C_DetectChainViolation::CallFunc_GetAnimVariables_LookAround' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectChainViolation, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000101, "Member 'BP_Character_C_DetectChainViolation::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectChainViolation, CallFunc_Array_Get_Item_2) == 0x000108, "Member 'BP_Character_C_DetectChainViolation::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectChainViolation, K2Node_DynamicCast_AsBPI_Character_1) == 0x000110, "Member 'BP_Character_C_DetectChainViolation::K2Node_DynamicCast_AsBPI_Character_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectChainViolation, K2Node_DynamicCast_bSuccess_3) == 0x000120, "Member 'BP_Character_C_DetectChainViolation::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectChainViolation, CallFunc_GetAnimVariables_Jump_1) == 0x000121, "Member 'BP_Character_C_DetectChainViolation::CallFunc_GetAnimVariables_Jump_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectChainViolation, CallFunc_GetAnimVariables_Fall_1) == 0x000122, "Member 'BP_Character_C_DetectChainViolation::CallFunc_GetAnimVariables_Fall_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectChainViolation, CallFunc_GetAnimVariables_RadialVelocity_1) == 0x000128, "Member 'BP_Character_C_DetectChainViolation::CallFunc_GetAnimVariables_RadialVelocity_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectChainViolation, CallFunc_GetAnimVariables_MoveInput_1) == 0x000140, "Member 'BP_Character_C_DetectChainViolation::CallFunc_GetAnimVariables_MoveInput_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectChainViolation, CallFunc_GetAnimVariables_Climb_1) == 0x000150, "Member 'BP_Character_C_DetectChainViolation::CallFunc_GetAnimVariables_Climb_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectChainViolation, CallFunc_GetAnimVariables_Pull_1) == 0x000151, "Member 'BP_Character_C_DetectChainViolation::CallFunc_GetAnimVariables_Pull_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectChainViolation, CallFunc_GetAnimVariables_PulledCharacter_1) == 0x000158, "Member 'BP_Character_C_DetectChainViolation::CallFunc_GetAnimVariables_PulledCharacter_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectChainViolation, CallFunc_GetAnimVariables_IsDriving_1) == 0x000160, "Member 'BP_Character_C_DetectChainViolation::CallFunc_GetAnimVariables_IsDriving_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectChainViolation, CallFunc_GetAnimVariables_DriveLeftHand_1) == 0x000168, "Member 'BP_Character_C_DetectChainViolation::CallFunc_GetAnimVariables_DriveLeftHand_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectChainViolation, CallFunc_GetAnimVariables_DriveRightHand_1) == 0x000180, "Member 'BP_Character_C_DetectChainViolation::CallFunc_GetAnimVariables_DriveRightHand_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectChainViolation, CallFunc_GetAnimVariables_LookAround_1) == 0x000198, "Member 'BP_Character_C_DetectChainViolation::CallFunc_GetAnimVariables_LookAround_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectChainViolation, CallFunc_BooleanOR_ReturnValue) == 0x000199, "Member 'BP_Character_C_DetectChainViolation::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.DetectClimbableWall
// 0x0738 (0x0738 - 0x0000)
struct BP_Character_C_DetectClimbableWall final
{
public:
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Gamestate_C>      K2Node_DynamicCast_AsBPI_Gamestate;                // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3179[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class APawn*>                          CallFunc_GetPawnArray_Array;                       // 0x0058(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_SphereTraceSingle_OutHit;                 // 0x0098(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingle_ReturnValue;            // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_317A[0x7];                                     // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x0188(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectMoveForwardAxis_ReturnValue;        // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x01A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_317B[0x7];                                     // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x01C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x01E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_1;               // 0x01F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClimbSideTrace_ClimbableWall;             // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_317C[0x7];                                     // 0x0201(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_Gamestate_C>      K2Node_DynamicCast_AsBPI_Gamestate_1;              // 0x0208(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0219(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_317D[0x6];                                     // 0x021A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APawn*>                          CallFunc_GetPawnArray_Array_1;                     // 0x0220(0x0010)(ReferenceParm)
	bool                                          CallFunc_ClimbSideTrace_ClimbableWall_1;           // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0231(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_317E[0x6];                                     // 0x0232(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_SphereTraceSingle_OutHit_1;               // 0x0238(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingle_ReturnValue_1;          // 0x0320(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0321(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_317F[0x6];                                     // 0x0322(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0328(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_2;               // 0x0330(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_1;           // 0x0338(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Gamestate_C>      K2Node_DynamicCast_AsBPI_Gamestate_2;              // 0x0350(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0360(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3180[0x7];                                     // 0x0361(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x0368(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class APawn*>                          CallFunc_GetPawnArray_Array_2;                     // 0x0380(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_3;       // 0x0390(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_2;    // 0x03A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectMoveForwardAxis_ReturnValue_1;      // 0x03C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x03C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x03E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3181[0x7];                                     // 0x03E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_SphereTraceSingle_OutHit_2;               // 0x03E8(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingle_ReturnValue_2;          // 0x04D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x04D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x04D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3182[0x1];                                     // 0x04D3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x04D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x04D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3183[0x4];                                     // 0x04DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x04E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x04F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0510(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0528(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0540(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0548(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0550(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0558(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x0560(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0568(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x056C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0570(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3184[0x4];                                     // 0x0574(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0578(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0590(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_4;       // 0x05A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromX_ReturnValue;                 // 0x05C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x05D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x05DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x05E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3185[0x4];                                     // 0x05E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x05E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0600(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0604(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0608(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3186[0x4];                                     // 0x060C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0610(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x0628(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0710(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsDriving_ReturnValue;                 // 0x0711(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0712(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3187[0x5];                                     // 0x0713(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0718(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnyMontagePlaying_ReturnValue;          // 0x0720(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3188[0x7];                                     // 0x0721(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x0728(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_VectorFloat_B_ImplicitCast;      // 0x0730(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_DetectClimbableWall) == 0x000008, "Wrong alignment on BP_Character_C_DetectClimbableWall");
static_assert(sizeof(BP_Character_C_DetectClimbableWall) == 0x000738, "Wrong size on BP_Character_C_DetectClimbableWall");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_GetForwardVector_ReturnValue) == 0x000000, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000018, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_GetGameState_ReturnValue) == 0x000030, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, K2Node_DynamicCast_AsBPI_Gamestate) == 0x000038, "Member 'BP_Character_C_DetectClimbableWall::K2Node_DynamicCast_AsBPI_Gamestate' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'BP_Character_C_DetectClimbableWall::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000050, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_GetPawnArray_Array) == 0x000058, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_GetPawnArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000068, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_Add_VectorVector_ReturnValue) == 0x000080, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_SphereTraceSingle_OutHit) == 0x000098, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_SphereTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_SphereTraceSingle_ReturnValue) == 0x000180, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_SphereTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x000188, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_SelectMoveForwardAxis_ReturnValue) == 0x0001A0, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_SelectMoveForwardAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_GetUpVector_ReturnValue) == 0x0001A8, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_Less_DoubleDouble_ReturnValue) == 0x0001C0, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x0001C8, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0001E0, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_GetGameState_ReturnValue_1) == 0x0001F8, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_GetGameState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_ClimbSideTrace_ClimbableWall) == 0x000200, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_ClimbSideTrace_ClimbableWall' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, K2Node_DynamicCast_AsBPI_Gamestate_1) == 0x000208, "Member 'BP_Character_C_DetectClimbableWall::K2Node_DynamicCast_AsBPI_Gamestate_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, K2Node_DynamicCast_bSuccess_1) == 0x000218, "Member 'BP_Character_C_DetectClimbableWall::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_Not_PreBool_ReturnValue) == 0x000219, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_GetPawnArray_Array_1) == 0x000220, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_GetPawnArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_ClimbSideTrace_ClimbableWall_1) == 0x000230, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_ClimbSideTrace_ClimbableWall_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_Not_PreBool_ReturnValue_1) == 0x000231, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_SphereTraceSingle_OutHit_1) == 0x000238, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_SphereTraceSingle_OutHit_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_SphereTraceSingle_ReturnValue_1) == 0x000320, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_SphereTraceSingle_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_BooleanAND_ReturnValue) == 0x000321, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_SelectFloat_ReturnValue) == 0x000328, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_GetGameState_ReturnValue_2) == 0x000330, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_GetGameState_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_GetForwardVector_ReturnValue_1) == 0x000338, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_GetForwardVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, K2Node_DynamicCast_AsBPI_Gamestate_2) == 0x000350, "Member 'BP_Character_C_DetectClimbableWall::K2Node_DynamicCast_AsBPI_Gamestate_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, K2Node_DynamicCast_bSuccess_2) == 0x000360, "Member 'BP_Character_C_DetectClimbableWall::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x000368, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_GetPawnArray_Array_2) == 0x000380, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_GetPawnArray_Array_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_Multiply_VectorFloat_ReturnValue_3) == 0x000390, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_Multiply_VectorFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_K2_GetComponentLocation_ReturnValue_2) == 0x0003A8, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_K2_GetComponentLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_SelectMoveForwardAxis_ReturnValue_1) == 0x0003C0, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_SelectMoveForwardAxis_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_Add_VectorVector_ReturnValue_2) == 0x0003C8, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0003E0, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_SphereTraceSingle_OutHit_2) == 0x0003E8, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_SphereTraceSingle_OutHit_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_SphereTraceSingle_ReturnValue_2) == 0x0004D0, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_SphereTraceSingle_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_BreakHitResult_bBlockingHit) == 0x0004D1, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_BreakHitResult_bInitialOverlap) == 0x0004D2, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_BreakHitResult_Time) == 0x0004D4, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_BreakHitResult_Distance) == 0x0004D8, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_BreakHitResult_Location) == 0x0004E0, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_BreakHitResult_ImpactPoint) == 0x0004F8, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_BreakHitResult_Normal) == 0x000510, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_BreakHitResult_ImpactNormal) == 0x000528, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_BreakHitResult_PhysMat) == 0x000540, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_BreakHitResult_HitActor) == 0x000548, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_BreakHitResult_HitComponent) == 0x000550, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_BreakHitResult_HitBoneName) == 0x000558, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_BreakHitResult_BoneName) == 0x000560, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_BreakHitResult_HitItem) == 0x000568, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_BreakHitResult_ElementIndex) == 0x00056C, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_BreakHitResult_FaceIndex) == 0x000570, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_BreakHitResult_TraceStart) == 0x000578, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_BreakHitResult_TraceEnd) == 0x000590, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_Multiply_VectorFloat_ReturnValue_4) == 0x0005A8, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_Multiply_VectorFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_MakeRotFromX_ReturnValue) == 0x0005C0, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_MakeRotFromX_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_BreakRotator_Roll) == 0x0005D8, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_BreakRotator_Pitch) == 0x0005DC, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_BreakRotator_Yaw) == 0x0005E0, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_MakeRotator_ReturnValue) == 0x0005E8, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_BreakRotator_Roll_1) == 0x000600, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_BreakRotator_Pitch_1) == 0x000604, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_BreakRotator_Yaw_1) == 0x000608, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_MakeRotator_ReturnValue_1) == 0x000610, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x000628, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_IsLocallyControlled_ReturnValue) == 0x000710, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_GetIsDriving_ReturnValue) == 0x000711, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_GetIsDriving_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, K2Node_SwitchEnum_CmpSuccess) == 0x000712, "Member 'BP_Character_C_DetectClimbableWall::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_GetAnimInstance_ReturnValue) == 0x000718, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_IsAnyMontagePlaying_ReturnValue) == 0x000720, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_IsAnyMontagePlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x000728, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectClimbableWall, CallFunc_Multiply_VectorFloat_B_ImplicitCast) == 0x000730, "Member 'BP_Character_C_DetectClimbableWall::CallFunc_Multiply_VectorFloat_B_ImplicitCast' has a wrong offset!");

// Function BP_Character.BP_Character_C.DetectDesync
// 0x00E8 (0x00E8 - 0x0000)
struct BP_Character_C_DetectDesync final
{
public:
	bool                                          Desync;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3189[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APC_Game_C*                             K2Node_DynamicCast_AsPC_Game;                      // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_318A[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_1;                     // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Vector_Distance_ReturnValue;              // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x00E3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_DetectDesync) == 0x000008, "Wrong alignment on BP_Character_C_DetectDesync");
static_assert(sizeof(BP_Character_C_DetectDesync) == 0x0000E8, "Wrong size on BP_Character_C_DetectDesync");
static_assert(offsetof(BP_Character_C_DetectDesync, Desync) == 0x000000, "Member 'BP_Character_C_DetectDesync::Desync' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectDesync, CallFunc_GetPlayerController_ReturnValue) == 0x000008, "Member 'BP_Character_C_DetectDesync::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectDesync, K2Node_DynamicCast_AsPC_Game) == 0x000010, "Member 'BP_Character_C_DetectDesync::K2Node_DynamicCast_AsPC_Game' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectDesync, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_Character_C_DetectDesync::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectDesync, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000020, "Member 'BP_Character_C_DetectDesync::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectDesync, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000028, "Member 'BP_Character_C_DetectDesync::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectDesync, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000030, "Member 'BP_Character_C_DetectDesync::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectDesync, CallFunc_FClamp_ReturnValue) == 0x000038, "Member 'BP_Character_C_DetectDesync::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectDesync, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000040, "Member 'BP_Character_C_DetectDesync::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectDesync, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000048, "Member 'BP_Character_C_DetectDesync::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectDesync, CallFunc_FClamp_ReturnValue_1) == 0x000060, "Member 'BP_Character_C_DetectDesync::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectDesync, CallFunc_BreakVector_X) == 0x000068, "Member 'BP_Character_C_DetectDesync::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectDesync, CallFunc_BreakVector_Y) == 0x000070, "Member 'BP_Character_C_DetectDesync::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectDesync, CallFunc_BreakVector_Z) == 0x000078, "Member 'BP_Character_C_DetectDesync::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectDesync, CallFunc_MakeVector_ReturnValue) == 0x000080, "Member 'BP_Character_C_DetectDesync::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectDesync, CallFunc_BreakVector_X_1) == 0x000098, "Member 'BP_Character_C_DetectDesync::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectDesync, CallFunc_BreakVector_Y_1) == 0x0000A0, "Member 'BP_Character_C_DetectDesync::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectDesync, CallFunc_BreakVector_Z_1) == 0x0000A8, "Member 'BP_Character_C_DetectDesync::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectDesync, CallFunc_MakeVector_ReturnValue_1) == 0x0000B0, "Member 'BP_Character_C_DetectDesync::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectDesync, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x0000C8, "Member 'BP_Character_C_DetectDesync::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectDesync, CallFunc_Vector_Distance_ReturnValue) == 0x0000D0, "Member 'BP_Character_C_DetectDesync::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectDesync, CallFunc_Abs_ReturnValue) == 0x0000D8, "Member 'BP_Character_C_DetectDesync::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectDesync, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0000E0, "Member 'BP_Character_C_DetectDesync::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectDesync, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x0000E1, "Member 'BP_Character_C_DetectDesync::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectDesync, CallFunc_BooleanOR_ReturnValue) == 0x0000E2, "Member 'BP_Character_C_DetectDesync::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectDesync, CallFunc_BooleanOR_ReturnValue_1) == 0x0000E3, "Member 'BP_Character_C_DetectDesync::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

// Function BP_Character.BP_Character_C.DetectFalldown
// 0x0028 (0x0028 - 0x0000)
struct BP_Character_C_DetectFalldown final
{
public:
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_318B[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X;                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_DetectFalldown) == 0x000008, "Wrong alignment on BP_Character_C_DetectFalldown");
static_assert(sizeof(BP_Character_C_DetectFalldown) == 0x000028, "Wrong size on BP_Character_C_DetectFalldown");
static_assert(offsetof(BP_Character_C_DetectFalldown, CallFunc_IsLocallyControlled_ReturnValue) == 0x000000, "Member 'BP_Character_C_DetectFalldown::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectFalldown, CallFunc_BreakVector_X) == 0x000008, "Member 'BP_Character_C_DetectFalldown::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectFalldown, CallFunc_BreakVector_Y) == 0x000010, "Member 'BP_Character_C_DetectFalldown::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectFalldown, CallFunc_BreakVector_Z) == 0x000018, "Member 'BP_Character_C_DetectFalldown::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectFalldown, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000020, "Member 'BP_Character_C_DetectFalldown::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.DetectGrounded
// 0x0238 (0x0238 - 0x0000)
struct BP_Character_C_DetectGrounded final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_318C[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               CallFunc_TraceVisibility_Result;                   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_318D[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_Gamestate_C>      K2Node_DynamicCast_AsBPI_Gamestate;                // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_318E[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APawn*>                          CallFunc_GetPawnArray_Array;                       // 0x0030(0x0010)(ReferenceParm)
	bool                                          CallFunc_FixPlayerToGround_Fixation;               // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_318F[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_SphereTraceSingle_OutHit;                 // 0x0078(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingle_ReturnValue;            // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0161(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0162(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3190[0x1];                                     // 0x0163(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3191[0x4];                                     // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0170(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0188(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x01A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x01B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x01D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01E0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3192[0x4];                                     // 0x0204(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0208(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0220(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_DetectGrounded) == 0x000008, "Wrong alignment on BP_Character_C_DetectGrounded");
static_assert(sizeof(BP_Character_C_DetectGrounded) == 0x000238, "Wrong size on BP_Character_C_DetectGrounded");
static_assert(offsetof(BP_Character_C_DetectGrounded, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_Character_C_DetectGrounded::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectGrounded, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'BP_Character_C_DetectGrounded::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectGrounded, CallFunc_GetGameState_ReturnValue) == 0x000008, "Member 'BP_Character_C_DetectGrounded::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectGrounded, CallFunc_TraceVisibility_Result) == 0x000010, "Member 'BP_Character_C_DetectGrounded::CallFunc_TraceVisibility_Result' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectGrounded, K2Node_DynamicCast_AsBPI_Gamestate) == 0x000018, "Member 'BP_Character_C_DetectGrounded::K2Node_DynamicCast_AsBPI_Gamestate' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectGrounded, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_Character_C_DetectGrounded::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectGrounded, CallFunc_GetPawnArray_Array) == 0x000030, "Member 'BP_Character_C_DetectGrounded::CallFunc_GetPawnArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectGrounded, CallFunc_FixPlayerToGround_Fixation) == 0x000040, "Member 'BP_Character_C_DetectGrounded::CallFunc_FixPlayerToGround_Fixation' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectGrounded, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000048, "Member 'BP_Character_C_DetectGrounded::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectGrounded, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000060, "Member 'BP_Character_C_DetectGrounded::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectGrounded, CallFunc_SphereTraceSingle_OutHit) == 0x000078, "Member 'BP_Character_C_DetectGrounded::CallFunc_SphereTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectGrounded, CallFunc_SphereTraceSingle_ReturnValue) == 0x000160, "Member 'BP_Character_C_DetectGrounded::CallFunc_SphereTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectGrounded, CallFunc_BreakHitResult_bBlockingHit) == 0x000161, "Member 'BP_Character_C_DetectGrounded::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectGrounded, CallFunc_BreakHitResult_bInitialOverlap) == 0x000162, "Member 'BP_Character_C_DetectGrounded::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectGrounded, CallFunc_BreakHitResult_Time) == 0x000164, "Member 'BP_Character_C_DetectGrounded::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectGrounded, CallFunc_BreakHitResult_Distance) == 0x000168, "Member 'BP_Character_C_DetectGrounded::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectGrounded, CallFunc_BreakHitResult_Location) == 0x000170, "Member 'BP_Character_C_DetectGrounded::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectGrounded, CallFunc_BreakHitResult_ImpactPoint) == 0x000188, "Member 'BP_Character_C_DetectGrounded::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectGrounded, CallFunc_BreakHitResult_Normal) == 0x0001A0, "Member 'BP_Character_C_DetectGrounded::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectGrounded, CallFunc_BreakHitResult_ImpactNormal) == 0x0001B8, "Member 'BP_Character_C_DetectGrounded::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectGrounded, CallFunc_BreakHitResult_PhysMat) == 0x0001D0, "Member 'BP_Character_C_DetectGrounded::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectGrounded, CallFunc_BreakHitResult_HitActor) == 0x0001D8, "Member 'BP_Character_C_DetectGrounded::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectGrounded, CallFunc_BreakHitResult_HitComponent) == 0x0001E0, "Member 'BP_Character_C_DetectGrounded::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectGrounded, CallFunc_BreakHitResult_HitBoneName) == 0x0001E8, "Member 'BP_Character_C_DetectGrounded::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectGrounded, CallFunc_BreakHitResult_BoneName) == 0x0001F0, "Member 'BP_Character_C_DetectGrounded::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectGrounded, CallFunc_BreakHitResult_HitItem) == 0x0001F8, "Member 'BP_Character_C_DetectGrounded::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectGrounded, CallFunc_BreakHitResult_ElementIndex) == 0x0001FC, "Member 'BP_Character_C_DetectGrounded::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectGrounded, CallFunc_BreakHitResult_FaceIndex) == 0x000200, "Member 'BP_Character_C_DetectGrounded::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectGrounded, CallFunc_BreakHitResult_TraceStart) == 0x000208, "Member 'BP_Character_C_DetectGrounded::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectGrounded, CallFunc_BreakHitResult_TraceEnd) == 0x000220, "Member 'BP_Character_C_DetectGrounded::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");

// Function BP_Character.BP_Character_C.DetectStuck
// 0x0270 (0x0270 - 0x0000)
struct BP_Character_C_DetectStuck final
{
public:
	bool                                          Stuck;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3193[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ZFix;                                              // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_StuckTrace_ReturnValue;                   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3194[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_StuckTrace_OutHit;                        // 0x0018(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3195[0x2];                                     // 0x0102(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3196[0x4];                                     // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0110(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0128(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0140(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0158(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0170(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0178(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0180(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3197[0x4];                                     // 0x01A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionResponse                            CallFunc_GetCollisionResponseToChannel_ReturnValue; // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x01D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlaying_ReturnValue;                    // 0x01DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3198[0x5];                                     // 0x01DB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetComponentBounds_Origin;                // 0x01E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_BoxExtent;             // 0x01F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetComponentBounds_SphereRadius;          // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3199[0x4];                                     // 0x0214(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0220(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0238(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_DetectStuck) == 0x000008, "Wrong alignment on BP_Character_C_DetectStuck");
static_assert(sizeof(BP_Character_C_DetectStuck) == 0x000270, "Wrong size on BP_Character_C_DetectStuck");
static_assert(offsetof(BP_Character_C_DetectStuck, Stuck) == 0x000000, "Member 'BP_Character_C_DetectStuck::Stuck' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectStuck, ZFix) == 0x000008, "Member 'BP_Character_C_DetectStuck::ZFix' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectStuck, CallFunc_StuckTrace_ReturnValue) == 0x000010, "Member 'BP_Character_C_DetectStuck::CallFunc_StuckTrace_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectStuck, CallFunc_StuckTrace_OutHit) == 0x000018, "Member 'BP_Character_C_DetectStuck::CallFunc_StuckTrace_OutHit' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectStuck, CallFunc_BreakHitResult_bBlockingHit) == 0x000100, "Member 'BP_Character_C_DetectStuck::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectStuck, CallFunc_BreakHitResult_bInitialOverlap) == 0x000101, "Member 'BP_Character_C_DetectStuck::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectStuck, CallFunc_BreakHitResult_Time) == 0x000104, "Member 'BP_Character_C_DetectStuck::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectStuck, CallFunc_BreakHitResult_Distance) == 0x000108, "Member 'BP_Character_C_DetectStuck::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectStuck, CallFunc_BreakHitResult_Location) == 0x000110, "Member 'BP_Character_C_DetectStuck::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectStuck, CallFunc_BreakHitResult_ImpactPoint) == 0x000128, "Member 'BP_Character_C_DetectStuck::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectStuck, CallFunc_BreakHitResult_Normal) == 0x000140, "Member 'BP_Character_C_DetectStuck::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectStuck, CallFunc_BreakHitResult_ImpactNormal) == 0x000158, "Member 'BP_Character_C_DetectStuck::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectStuck, CallFunc_BreakHitResult_PhysMat) == 0x000170, "Member 'BP_Character_C_DetectStuck::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectStuck, CallFunc_BreakHitResult_HitActor) == 0x000178, "Member 'BP_Character_C_DetectStuck::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectStuck, CallFunc_BreakHitResult_HitComponent) == 0x000180, "Member 'BP_Character_C_DetectStuck::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectStuck, CallFunc_BreakHitResult_HitBoneName) == 0x000188, "Member 'BP_Character_C_DetectStuck::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectStuck, CallFunc_BreakHitResult_BoneName) == 0x000190, "Member 'BP_Character_C_DetectStuck::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectStuck, CallFunc_BreakHitResult_HitItem) == 0x000198, "Member 'BP_Character_C_DetectStuck::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectStuck, CallFunc_BreakHitResult_ElementIndex) == 0x00019C, "Member 'BP_Character_C_DetectStuck::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectStuck, CallFunc_BreakHitResult_FaceIndex) == 0x0001A0, "Member 'BP_Character_C_DetectStuck::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectStuck, CallFunc_BreakHitResult_TraceStart) == 0x0001A8, "Member 'BP_Character_C_DetectStuck::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectStuck, CallFunc_BreakHitResult_TraceEnd) == 0x0001C0, "Member 'BP_Character_C_DetectStuck::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectStuck, CallFunc_GetCollisionResponseToChannel_ReturnValue) == 0x0001D8, "Member 'BP_Character_C_DetectStuck::CallFunc_GetCollisionResponseToChannel_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectStuck, K2Node_SwitchEnum_CmpSuccess) == 0x0001D9, "Member 'BP_Character_C_DetectStuck::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectStuck, CallFunc_IsPlaying_ReturnValue) == 0x0001DA, "Member 'BP_Character_C_DetectStuck::CallFunc_IsPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectStuck, CallFunc_GetComponentBounds_Origin) == 0x0001E0, "Member 'BP_Character_C_DetectStuck::CallFunc_GetComponentBounds_Origin' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectStuck, CallFunc_GetComponentBounds_BoxExtent) == 0x0001F8, "Member 'BP_Character_C_DetectStuck::CallFunc_GetComponentBounds_BoxExtent' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectStuck, CallFunc_GetComponentBounds_SphereRadius) == 0x000210, "Member 'BP_Character_C_DetectStuck::CallFunc_GetComponentBounds_SphereRadius' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectStuck, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000218, "Member 'BP_Character_C_DetectStuck::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectStuck, CallFunc_MakeVector_ReturnValue) == 0x000220, "Member 'BP_Character_C_DetectStuck::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectStuck, CallFunc_Add_VectorVector_ReturnValue) == 0x000238, "Member 'BP_Character_C_DetectStuck::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectStuck, CallFunc_BreakVector_X) == 0x000250, "Member 'BP_Character_C_DetectStuck::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectStuck, CallFunc_BreakVector_Y) == 0x000258, "Member 'BP_Character_C_DetectStuck::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectStuck, CallFunc_BreakVector_Z) == 0x000260, "Member 'BP_Character_C_DetectStuck::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectStuck, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x000268, "Member 'BP_Character_C_DetectStuck::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BP_Character.BP_Character_C.DetectSwimOrDive
// 0x0528 (0x0528 - 0x0000)
struct BP_Character_C_DetectSwimOrDive final
{
public:
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0000(0x0010)(ConstParm, ReferenceParm)
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable_1;                            // 0x0018(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_2;    // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x00A0(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_319A[0x7];                                     // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X;                            // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x01A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_319B[0x2];                                     // 0x01AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_319C[0x4];                                     // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x01B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x01D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x01E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0200(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0218(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0220(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0228(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_319D[0x4];                                     // 0x024C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0250(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0268(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_SelectControlRot_DesiredControlRotation;  // 0x0298(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x02B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x02BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_319E[0x4];                                     // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x02C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x02E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_319F[0x7];                                     // 0x02E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_VInterpTo_ReturnValue;                    // 0x02E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x0300(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_3;    // 0x03E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x0400(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_3;           // 0x0418(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit_1;                 // 0x0430(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue_1;            // 0x0518(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0519(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31A0[0x2];                                     // 0x051A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_VInterpTo_DeltaTime_ImplicitCast;         // 0x051C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Less_DoubleDouble_A_ImplicitCast;         // 0x0520(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_DetectSwimOrDive) == 0x000008, "Wrong alignment on BP_Character_C_DetectSwimOrDive");
static_assert(sizeof(BP_Character_C_DetectSwimOrDive) == 0x000528, "Wrong size on BP_Character_C_DetectSwimOrDive");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, Temp_object_Variable) == 0x000000, "Member 'BP_Character_C_DetectSwimOrDive::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000010, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, Temp_object_Variable_1) == 0x000018, "Member 'BP_Character_C_DetectSwimOrDive::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000028, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x000040, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_Add_VectorVector_ReturnValue) == 0x000058, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000070, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_K2_GetComponentLocation_ReturnValue_2) == 0x000088, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_K2_GetComponentLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_LineTraceSingle_OutHit) == 0x0000A0, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_LineTraceSingle_ReturnValue) == 0x000188, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_BreakVector_X) == 0x000190, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_BreakVector_Y) == 0x000198, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_BreakVector_Z) == 0x0001A0, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_BreakHitResult_bBlockingHit) == 0x0001A8, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_BreakHitResult_bInitialOverlap) == 0x0001A9, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_BreakHitResult_Time) == 0x0001AC, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_BreakHitResult_Distance) == 0x0001B0, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_BreakHitResult_Location) == 0x0001B8, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_BreakHitResult_ImpactPoint) == 0x0001D0, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_BreakHitResult_Normal) == 0x0001E8, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_BreakHitResult_ImpactNormal) == 0x000200, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_BreakHitResult_PhysMat) == 0x000218, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_BreakHitResult_HitActor) == 0x000220, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_BreakHitResult_HitComponent) == 0x000228, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_BreakHitResult_HitBoneName) == 0x000230, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_BreakHitResult_BoneName) == 0x000238, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_BreakHitResult_HitItem) == 0x000240, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_BreakHitResult_ElementIndex) == 0x000244, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_BreakHitResult_FaceIndex) == 0x000248, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_BreakHitResult_TraceStart) == 0x000250, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_BreakHitResult_TraceEnd) == 0x000268, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_BreakVector_X_1) == 0x000280, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_BreakVector_Y_1) == 0x000288, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_BreakVector_Z_1) == 0x000290, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_SelectControlRot_DesiredControlRotation) == 0x000298, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_SelectControlRot_DesiredControlRotation' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x0002B0, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_BreakRotator_Roll) == 0x0002B8, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_BreakRotator_Pitch) == 0x0002BC, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_BreakRotator_Yaw) == 0x0002C0, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_MakeVector_ReturnValue) == 0x0002C8, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_Less_DoubleDouble_ReturnValue) == 0x0002E0, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_VInterpTo_ReturnValue) == 0x0002E8, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_VInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x000300, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_K2_GetComponentLocation_ReturnValue_3) == 0x0003E8, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_K2_GetComponentLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_Add_VectorVector_ReturnValue_2) == 0x000400, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_Add_VectorVector_ReturnValue_3) == 0x000418, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_Add_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_LineTraceSingle_OutHit_1) == 0x000430, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_LineTraceSingle_OutHit_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_LineTraceSingle_ReturnValue_1) == 0x000518, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_LineTraceSingle_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_Not_PreBool_ReturnValue) == 0x000519, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_VInterpTo_DeltaTime_ImplicitCast) == 0x00051C, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_VInterpTo_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_DetectSwimOrDive, CallFunc_Less_DoubleDouble_A_ImplicitCast) == 0x000520, "Member 'BP_Character_C_DetectSwimOrDive::CallFunc_Less_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BP_Character.BP_Character_C.ExecuteUbergraph_BP_Character
// 0x2A00 (0x2A00 - 0x0000)
struct BP_Character_C_ExecuteUbergraph_BP_Character final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31A1[0x1];                                     // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31A2[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31A3[0x6];                                     // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      Temp_object_Variable;                              // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x005F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_1;               // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_2;               // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31A4[0x1];                                     // 0x0063(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_3;               // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_1;                     // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_1;               // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31A5[0x5];                                     // 0x006B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0078(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31A6[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0090(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_2;               // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_4;               // 0x00A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_2;                     // 0x00A6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31A7[0x1];                                     // 0x00A7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31A8[0x3];                                     // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_1;                       // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_5;               // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_6;               // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_3;                     // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_3;               // 0x00C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_2;                       // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_4;               // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31A9[0x7];                                     // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Lerp_ReturnValue_3;                       // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_4;                       // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_4;                     // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_5;                     // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_5;               // 0x00F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_7;               // 0x00F3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_4;                   // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_5;                   // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_6;               // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31AA[0x3];                                     // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0108(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_1;        // 0x0118(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_4;                  // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_6;                   // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_6;                     // 0x012C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_7;               // 0x012D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31AB[0x2];                                     // 0x012E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_Location_1;                           // 0x0130(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_Event_Rotation_2;                           // 0x0148(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<uint8>                                 K2Node_Event_Data;                                 // 0x0160(0x0010)(ConstParm, ReferenceParm)
	class FString                                 K2Node_Event_PlayerName;                           // 0x0170(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Active;                               // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Driving;                              // 0x0181(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31AC[0x6];                                     // 0x0182(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_Left;                                 // 0x0188(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_Right;                                // 0x01A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_Impulse_2;                            // 0x01B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_Vehicle;                              // 0x01D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   K2Node_Event_Comp_1;                               // 0x01D8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_Event_Physics;                              // 0x01E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   K2Node_Event_Comp;                                 // 0x01E8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_Constraint;                           // 0x01F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_Event_Socket_1;                             // 0x01F8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_Damping;                              // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_InMovingObject;                       // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31AD[0x7];                                     // 0x0209(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_Impulse_1;                            // 0x0210(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       K2Node_Event_DriverSocket;                         // 0x0228(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_Event_Rotation_1;                           // 0x0230(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                K2Node_Event_Location;                             // 0x0248(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_Event_Rotation;                             // 0x0260(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        K2Node_Event_NullDuration;                         // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_TimelineDuration;                     // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_7;                     // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31AE[0x3];                                     // 0x0289(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x028C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue;          // 0x029C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31AF[0x3];                                     // 0x029D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_2;        // 0x02A0(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x02A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31B0[0x7];                                     // 0x02A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_CustomEvent_moveForward;                    // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_CustomEvent_moveRight;                      // 0x02B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_MoveForwardVector_1;            // 0x02C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_MoveForwardVector;              // 0x02D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x02F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31B1[0x7];                                     // 0x02F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_CustomEvent_MoveRightVector_1;              // 0x02F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_MoveRightVector;                // 0x0310(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_1;        // 0x0328(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31B2[0x7];                                     // 0x0329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_CustomEvent_RepCapsuleYaw;                  // 0x0330(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_ClientRepLocation;              // 0x0338(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_CustomEvent_DesiredControlRotation;         // 0x0350(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Loop_Counter_Variable_5;                  // 0x0368(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x036C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0370(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31B3[0x4];                                     // 0x0374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0378(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x0390(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x03A8(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x0490(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31B4[0x7];                                     // 0x0491(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0498(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_1;           // 0x04B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x04C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x04E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x04F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x0510(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0528(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0540(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               CallFunc_TraceVisibility_Result;                   // 0x0558(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31B5[0x7];                                     // 0x0559(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_2;    // 0x0560(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CallFunc_SpawnSoundAtLocation_ReturnValue;         // 0x0578(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CallFunc_SpawnSoundAtLocation_ReturnValue_1;       // 0x0580(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CallFunc_SpawnSoundAtLocation_ReturnValue_2;       // 0x0588(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CallFunc_SpawnSoundAtLocation_ReturnValue_3;       // 0x0590(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0598(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsEmpty_ReturnValue;                // 0x059C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31B6[0x3];                                     // 0x059D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x05A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsEmpty_ReturnValue_1;              // 0x05A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31B7[0x3];                                     // 0x05A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x05A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x05B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31B8[0x4];                                     // 0x05B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_ChainPhysics_C>   K2Node_DynamicCast_AsBPI_Chain_Physics;            // 0x05B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x05C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x05C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31B9[0x6];                                     // 0x05CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x05D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Gamestate_C>      K2Node_DynamicCast_AsBPI_Gamestate;                // 0x05D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x05E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31BA[0x7];                                     // 0x05E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APawn*>                          CallFunc_GetPawnArray_Array;                       // 0x05F0(0x0010)(ReferenceParm)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0600(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x06E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_2;        // 0x06E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              CallFunc_GetSurfaceType_ReturnValue;               // 0x06EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_3;        // 0x06EB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x06EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31BB[0x3];                                     // 0x06ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x06F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      K2Node_DynamicCast_AsPlayer_Controller;            // 0x06F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0700(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31BC[0x7];                                     // 0x0701(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue_1;              // 0x0708(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      K2Node_DynamicCast_AsPlayer_Controller_1;          // 0x0710(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0718(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31BD[0x7];                                     // 0x0719(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Lerp_ReturnValue_5;                       // 0x0720(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_6;                       // 0x0728(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Outline;                        // 0x0730(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31BE[0x7];                                     // 0x0731(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_Axis_3;                               // 0x0738(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x0740(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31BF[0x7];                                     // 0x0741(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_Axis_2;                               // 0x0748(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Sprint;                               // 0x0750(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31C0[0x7];                                     // 0x0751(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0758(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Sprint_1;                       // 0x0760(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Sprint;                         // 0x0761(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_4;        // 0x0762(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_5;        // 0x0763(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31C1[0x4];                                     // 0x0764(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_Axis_1;                               // 0x0768(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_Axis;                                 // 0x0770(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0778(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0780(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_GameInstanceWithSave_C> K2Node_DynamicCast_AsBPI_Game_Instance_with_Save;  // 0x0788(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0798(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetCameraSettings_InvertX;                // 0x0799(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetCameraSettings_InvertY;                // 0x079A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31C2[0x5];                                     // 0x079B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetCameraSettings_X_Sensitivity;          // 0x07A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetCameraSettings_Y_Sensitivity;          // 0x07A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x07B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_GameInstanceWithSave_C> K2Node_DynamicCast_AsBPI_Game_Instance_with_Save_1; // 0x07B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x07C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31C3[0x7];                                     // 0x07C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x07D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetCameraSettings_InvertX_1;              // 0x07D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetCameraSettings_InvertY_1;              // 0x07D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31C4[0x6];                                     // 0x07DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetCameraSettings_X_Sensitivity_1;        // 0x07E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetCameraSettings_Y_Sensitivity_1;        // 0x07E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x07F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x07F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_4;      // 0x0800(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_1;                // 0x0808(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_5;      // 0x0810(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetController_ReturnValue_2;              // 0x0818(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetController_ReturnValue_3;              // 0x0820(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      K2Node_DynamicCast_AsPlayer_Controller_2;          // 0x0828(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x0830(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31C5[0x7];                                     // 0x0831(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      K2Node_DynamicCast_AsPlayer_Controller_3;          // 0x0838(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x0840(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31C6[0x7];                                     // 0x0841(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_Balancier_1;                    // 0x0848(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_MaillonIndex_1;                 // 0x0850(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31C7[0x4];                                     // 0x0854(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_CustomEvent_Location_1;                     // 0x0858(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_Balancier;                      // 0x0870(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_MaillonIndex;                   // 0x0878(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31C8[0x4];                                     // 0x087C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_CustomEvent_Location;                       // 0x0880(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Balancier_C>      K2Node_DynamicCast_AsBPI_Balancier;                // 0x0898(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_8;                     // 0x08A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_6;        // 0x08A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31C9[0x2];                                     // 0x08AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_7;                   // 0x08AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_Array_Get_Item_1;                         // 0x08B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x08B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_8;               // 0x08B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DetectStuck_Stuck;                        // 0x08BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31CA[0x5];                                     // 0x08BB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_DetectStuck_ZFix;                         // 0x08C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DetectStuck_Stuck_1;                      // 0x08C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31CB[0x7];                                     // 0x08C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_DetectStuck_ZFix_1;                       // 0x08D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_3;    // 0x08D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x08F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x08F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0900(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0908(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0910(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0918(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x0930(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_7;        // 0x0A18(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOnTyrolienne_ReturnValue;               // 0x0A19(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_8;        // 0x0A1A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_9;        // 0x0A1B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_10;       // 0x0A1C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31CC[0x3];                                     // 0x0A1D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0A20(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0A38(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0A40(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0A48(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_Array_Get_Item_2;                         // 0x0A50(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0A58(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x0A70(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x0A88(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31CD[0x4];                                     // 0x0A8C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X_2;                          // 0x0A90(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_2;                          // 0x0A98(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_2;                          // 0x0AA0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x0AA8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDirectionUnitVector_ReturnValue;       // 0x0AC0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_8;                     // 0x0AD8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31CE[0x7];                                     // 0x0AD9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x0AE0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectMoveForwardAxis_ReturnValue;        // 0x0AF8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectMoveRightAxis_ReturnValue;          // 0x0B00(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0B08(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue_1;                        // 0x0B10(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_2;           // 0x0B18(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0B20(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x0B21(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0B22(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31CF[0x5];                                     // 0x0B23(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Character_C*                        K2Node_DynamicCast_AsBP_Character;                 // 0x0B28(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_9;                     // 0x0B30(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_11;       // 0x0B31(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_12;       // 0x0B32(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_13;       // 0x0B33(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0B34(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31D0[0x3];                                     // 0x0B35(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_1;               // 0x0B38(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Gamestate_C>      K2Node_DynamicCast_AsBPI_Gamestate_1;              // 0x0B40(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_10;                    // 0x0B50(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31D1[0x7];                                     // 0x0B51(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APawn*>                          CallFunc_GetPawnArray_Array_1;                     // 0x0B58(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_4;    // 0x0B68(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0B80(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FHitResult>                     CallFunc_SphereTraceMulti_OutHits;                 // 0x0B98(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceMulti_ReturnValue;             // 0x0BA8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_JumpTraceHits_Good;                       // 0x0BA9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31D2[0x6];                                     // 0x0BAA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0BB0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue_1;        // 0x0BC0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0BD8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0BE8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_MantleCheck_CanClimb_Vault;               // 0x0BE9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_MantleCheck_CanClimb_Vault_1;             // 0x0BEA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31D3[0x5];                                     // 0x0BEB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_2;               // 0x0BF0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_3;        // 0x0BF8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Gamestate_C>      K2Node_DynamicCast_AsBPI_Gamestate_2;              // 0x0C10(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_11;                    // 0x0C20(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31D4[0x7];                                     // 0x0C21(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X_3;                          // 0x0C28(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_3;                          // 0x0C30(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_3;                          // 0x0C38(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class APawn*>                          CallFunc_GetPawnArray_Array_2;                     // 0x0C40(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_MakeVector_ReturnValue_3;                 // 0x0C50(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_4;                 // 0x0C68(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit_1;                 // 0x0C80(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue_1;            // 0x0D68(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0D69(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0D6A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31D5[0x1];                                     // 0x0D6B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0D6C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0D70(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31D6[0x4];                                     // 0x0D74(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0D78(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0D90(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0DA8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0DC0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0DD8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0DE0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0DE8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0DF0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x0DF8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0E00(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0E04(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0E08(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31D7[0x4];                                     // 0x0E0C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0E10(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0E28(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionResponse                            CallFunc_GetCollisionResponseToChannel_ReturnValue; // 0x0E40(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x0E41(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31D8[0x2];                                     // 0x0E42(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_6;                  // 0x0E44(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0E48(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31D9[0x3];                                     // 0x0E49(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x0E4C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_9;                     // 0x0E50(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_MovementState                            K2Node_Event_NewMovementState;                     // 0x0E51(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_9;               // 0x0E52(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0E53(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_MovementAction                           K2Node_Event_NewMovementAction;                    // 0x0E54(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_RotationMode                             K2Node_Event_NewRotationMode;                      // 0x0E55(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x0E56(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_2;          // 0x0E57(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_Gait                                     K2Node_Event_NewGait;                              // 0x0E58(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_ViewMode                                 K2Node_Event_NewViewMode;                          // 0x0E59(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_3;          // 0x0E5A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_4;          // 0x0E5B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_OverlayState                             K2Node_Event_NewOverlayState;                      // 0x0E5C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31DA[0x3];                                     // 0x0E5D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0E60(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_5;          // 0x0E64(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 K2Node_CustomEvent_Pawn_Movement_Mode;             // 0x0E65(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31DB[0x2];                                     // 0x0E66(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_CustomEvent_Duration_3;                     // 0x0E68(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0E70(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_Time;                                 // 0x0E78(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_1;    // 0x0E80(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31DC[0x7];                                     // 0x0E81(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_Vector;                               // 0x0E88(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_MakeSlide;                            // 0x0EA0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31DD[0x7];                                     // 0x0EA1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_StabilizeSpeed;                       // 0x0EA8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_PushedByTrain;                        // 0x0EB0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_ShuffleFixToGround;                   // 0x0EB1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_6;          // 0x0EB2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31DE[0x5];                                     // 0x0EB3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  K2Node_Event_Character;                            // 0x0EB8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_8;                   // 0x0EC0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0EC4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_Array_Get_Item_3;                         // 0x0EC8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_9;                    // 0x0ED0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31DF[0x7];                                     // 0x0ED1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_Impulse;                              // 0x0ED8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_OverrideVelocityZ;                    // 0x0EF0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_StopClimb;                            // 0x0EF1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_ShuffleAirControl;                    // 0x0EF2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IgnoreDoOnce;                         // 0x0EF3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_PushedByObstacle;                     // 0x0EF4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_10;                    // 0x0EF5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31E0[0x2];                                     // 0x0EF6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetPhysicsLinearVelocity_ReturnValue;     // 0x0EF8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetPhysicsLinearVelocity_ReturnValue_1;   // 0x0F10(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_4;                          // 0x0F28(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_4;                          // 0x0F30(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_4;                          // 0x0F38(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_5;                          // 0x0F40(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_5;                          // 0x0F48(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_5;                          // 0x0F50(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_5;                 // 0x0F58(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_6;                 // 0x0F70(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_Controls_C*                          CallFunc_Create_ReturnValue;                       // 0x0F88(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AController*                            K2Node_Event_NewController;                        // 0x0F90(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_FlyMode;                              // 0x0F98(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31E1[0x7];                                     // 0x0F99(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      K2Node_DynamicCast_AsPlayer_Controller_4;          // 0x0FA0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_12;                    // 0x0FA8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Show;                                 // 0x0FA9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_BeginPull;                            // 0x0FAA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31E2[0x5];                                     // 0x0FAB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_OtherCharacter;                       // 0x0FB0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_DynamicCast_AsPawn;                         // 0x0FB8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_13;                    // 0x0FC0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31E3[0x7];                                     // 0x0FC1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_NewChain_C*                         CallFunc_GetChainByCharacters_Array_Element;       // 0x0FC8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetChainByCharacters_ReturnValue;         // 0x0FD0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31E4[0x7];                                     // 0x0FD1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_ChainPhysics_C>   K2Node_DynamicCast_AsBPI_Chain_Physics_1;          // 0x0FD8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_14;                    // 0x0FE8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31E5[0x7];                                     // 0x0FE9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_ChainPhysics_C>   K2Node_DynamicCast_AsBPI_Chain_Physics_2;          // 0x0FF0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_15;                    // 0x1000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31E6[0x7];                                     // 0x1001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_CustomEvent_New_Transform_Location;         // 0x1008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_CustomEvent_New_Transform_Rotation;         // 0x1020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        K2Node_CustomEvent_Duration_2;                     // 0x1038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x1040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x1048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x1060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x1078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult;      // 0x1090(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue;         // 0x1178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31E7[0x3];                                     // 0x1179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x117C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x1180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x1184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_6;                          // 0x1188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_6;                          // 0x1190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_6;                          // 0x1198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x11A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_3;           // 0x11B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x11C0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_7;                 // 0x1220(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult_1;     // 0x1238(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x1320(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          K2Node_Event_Detectable;                           // 0x1408(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31E8[0x7];                                     // 0x1409(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x1410(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x1418(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x1430(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x1434(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x1438(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31E9[0x4];                                     // 0x143C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x1440(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FString                                 K2Node_Event_Pseudo;                               // 0x1458(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	ECollisionChannel                             K2Node_Event_Collision;                            // 0x1468(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionResponse                            K2Node_Event_Response;                             // 0x1469(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31EA[0x6];                                     // 0x146A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x1470(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x1478(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x1480(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x1488(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x148C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31EB[0x3];                                     // 0x148D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x1490(0x00E8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         Temp_int_Loop_Counter_Variable_7;                  // 0x1578(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31EC[0x4];                                     // 0x157C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_CustomEvent_Delay;                          // 0x1580(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x1588(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31ED[0x3];                                     // 0x1589(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x158C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_8;                  // 0x1590(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x1594(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31EE[0x3];                                     // 0x1595(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_7;                 // 0x1598(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_9;                   // 0x159C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item_4;                         // 0x15A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_NewChain_C*                         K2Node_DynamicCast_AsBP_New_Chain;                 // 0x15A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_16;                    // 0x15B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31EF[0x3];                                     // 0x15B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_Duration_1;                     // 0x15B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_Delay_1;                              // 0x15B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_Event_Socket;                               // 0x15C0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event_Name;                                 // 0x15C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_2;            // 0x15D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCustomGI_C*                            K2Node_DynamicCast_AsCustom_GI;                    // 0x15D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_17;                    // 0x15E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31F0[0x3];                                     // 0x15E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_Duration;                       // 0x15E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_Z;                                    // 0x15E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_4;        // 0x15F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_7;                          // 0x1608(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_7;                          // 0x1610(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_7;                          // 0x1618(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_8;                 // 0x1620(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult_1;     // 0x1638(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue_1;        // 0x1720(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31F1[0x7];                                     // 0x1721(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_Force_1;                              // 0x1728(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_Delay;                                // 0x1730(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_8;                          // 0x1738(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_8;                          // 0x1740(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_8;                          // 0x1748(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_9;                 // 0x1750(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDesiredMoveDirection_ReturnValue;      // 0x1768(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue_1;                      // 0x1780(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_9;                          // 0x1788(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_9;                          // 0x1790(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_9;                          // 0x1798(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x17A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31F2[0x7];                                     // 0x17A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue_10;                // 0x17A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x17C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_10;                         // 0x17D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_10;                         // 0x17E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_10;                         // 0x17E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_11;                // 0x17F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue_2;                      // 0x1808(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x1810(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31F3[0x7];                                     // 0x1811(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x1818(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_11;                         // 0x1830(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_11;                         // 0x1838(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_11;                         // 0x1840(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_1;          // 0x1848(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_14;       // 0x1849(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DetectStuck_Stuck_2;                      // 0x184A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31F4[0x5];                                     // 0x184B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_DetectStuck_ZFix_2;                       // 0x1850(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_10;              // 0x1858(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31F5[0x7];                                     // 0x1859(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkeletalMeshComponent*>         CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x1860(0x0010)(ReferenceParm, ContainsInstancedReference)
	class USkeletalMeshComponent*                 CallFunc_Array_Get_Item_5;                         // 0x1870(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_5;               // 0x1878(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x187C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31F6[0x3];                                     // 0x187D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_9;                  // 0x1880(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31F7[0x4];                                     // 0x1884(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x1888(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_5;                // 0x1890(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31F8[0x3];                                     // 0x1891(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_8;                 // 0x1894(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_5;        // 0x1898(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue_1;    // 0x18B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetLocalMultiplayer_ReturnValue;          // 0x18C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDevMode_DevMode;                       // 0x18C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x18CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31F9[0x5];                                     // 0x18CB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_3;               // 0x18D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGS_Game_C*                             K2Node_DynamicCast_AsGS_Game;                      // 0x18D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_18;                    // 0x18E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSomeoneStuckFalling_ReturnValue;        // 0x18E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_MultiGate_FirstRun;                         // 0x18E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31FA[0x1];                                     // 0x18E3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_MultiGate_Data;                             // 0x18E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_MultiGate_ScratchBool;                      // 0x18E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31FB[0x3];                                     // 0x18E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_MultiGate_ScratchIndex;                     // 0x18EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_11;                    // 0x18F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_15;       // 0x18F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31FC[0x6];                                     // 0x18F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_6;        // 0x18F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_12;                         // 0x1910(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_12;                         // 0x1918(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_12;                         // 0x1920(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_4;           // 0x1928(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x1930(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_13;                         // 0x1938(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_13;                         // 0x1940(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_13;                         // 0x1948(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue;           // 0x1950(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31FD[0x7];                                     // 0x1951(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Chain;                                // 0x1958(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item_6;                         // 0x1960(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x1968(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_10;                   // 0x196C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31FE[0x3];                                     // 0x196D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_6;               // 0x1970(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x1974(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x1978(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_8;               // 0x197C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31FF[0x3];                                     // 0x197D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_Array_Get_Item_7;                         // 0x1980(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_7;               // 0x1988(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_6;                // 0x198C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ChainAlreadyExist__ReturnValue;           // 0x198D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x198E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_RightHand;                      // 0x198F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x1990(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue_1;          // 0x19A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue;                 // 0x19C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x19D8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Swim;                           // 0x19E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3200[0x3];                                     // 0x19E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x19E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x19E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Remove;                               // 0x19E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x19EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3201[0x1];                                     // 0x19EB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x19EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_9;                 // 0x19F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3202[0x4];                                     // 0x19F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_5;    // 0x19F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue_1;     // 0x1A10(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_11;              // 0x1A18(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3203[0x7];                                     // 0x1A19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_6;    // 0x1A20(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CallFunc_SpawnSoundAtLocation_ReturnValue_4;       // 0x1A38(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Swim;                                 // 0x1A40(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_11;                   // 0x1A41(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x1A42(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3204[0x5];                                     // 0x1A43(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue_4;              // 0x1A48(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      K2Node_DynamicCast_AsPlayer_Controller_5;          // 0x1A50(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_19;                    // 0x1A58(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3205[0x7];                                     // 0x1A59(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_StopClimbing_C*                      CallFunc_Create_ReturnValue_1;                     // 0x1A60(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddToPlayerScreen_ReturnValue;            // 0x1A68(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3206[0x7];                                     // 0x1A69(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               K2Node_CustomEvent_Rotation;                       // 0x1A70(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult_1;     // 0x1A88(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_16;       // 0x1B70(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_17;       // 0x1B71(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_18;       // 0x1B72(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3207[0x5];                                     // 0x1B73(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               K2Node_CustomEvent_NewRotation_1;                  // 0x1B78(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                K2Node_CustomEvent_Loc_1;                          // 0x1B90(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_Normal_2;                       // 0x1BA8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_CustomEvent_NewRotation;                    // 0x1BC0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                K2Node_CustomEvent_Loc;                            // 0x1BD8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_Normal_1;                       // 0x1BF0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Stop;                           // 0x1C08(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3208[0x7];                                     // 0x1C09(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               K2Node_CustomEvent_Rot;                            // 0x1C10(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class USceneComponent*                        K2Node_CustomEvent_Comp;                           // 0x1C28(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_HitLocation;                    // 0x1C30(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_Normal;                         // 0x1C48(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Character_C>      CallFunc_BeginPullOtherCharacter_self_CastInput;   // 0x1C60(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetController_ReturnValue_5;              // 0x1C70(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APC_Game_C*                             K2Node_DynamicCast_AsPC_Game;                      // 0x1C78(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_20;                    // 0x1C80(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_19;       // 0x1C81(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_3;                    // 0x1C82(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_12;              // 0x1C83(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3209[0x4];                                     // 0x1C84(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_7;    // 0x1C88(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_20;       // 0x1CA0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_21;       // 0x1CA1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_320A[0x6];                                     // 0x1CA2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Tyrolienne_C*                       K2Node_CustomEvent_Tyrolienne_1;                   // 0x1CA8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_Tyrolienne_C*                       K2Node_CustomEvent_Tyrolienne;                     // 0x1CB0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_Tyrolienne_C*                       K2Node_CustomEvent_Tyro;                           // 0x1CB8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x1CC0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue_1;       // 0x1CC1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_320B[0x6];                                     // 0x1CC2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Tyrolienne_C*                       K2Node_Event_Tyrolienne;                           // 0x1CC8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_12;                    // 0x1CD0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_320C[0x7];                                     // 0x1CD1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_8;    // 0x1CD8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VLerp_ReturnValue_1;                      // 0x1CF0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x1D08(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult_2;     // 0x1D20(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult_3;     // 0x1E08(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_1;        // 0x1EF0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_22;       // 0x1EF8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_320D[0x7];                                     // 0x1EF9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_PlayerController_C> K2Node_DynamicCast_AsBPI_Player_Controller;        // 0x1F00(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_21;                    // 0x1F10(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_320E[0x7];                                     // 0x1F11(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_Event_SunMesh;                              // 0x1F18(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_2;        // 0x1F20(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PlayerController_C> K2Node_DynamicCast_AsBPI_Player_Controller_1;      // 0x1F28(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_22;                    // 0x1F38(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_320F[0x7];                                     // 0x1F39(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x1F40(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_6;      // 0x1F48(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_2;                // 0x1F50(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_AddLocalRotation_SweepHitResult;       // 0x1F68(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_2;      // 0x2050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VLerp_ReturnValue_2;                      // 0x2068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult_4;     // 0x2080(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_9;    // 0x2168(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_LookAround;                           // 0x2180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3210[0x7];                                     // 0x2181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CallFunc_GetCurrentActiveMontage_ReturnValue;      // 0x2188(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             K2Node_Event_BeginTransform;                       // 0x2190(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_12;                   // 0x21F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3211[0x7];                                     // 0x21F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x21F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x2210(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x2228(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult_2;     // 0x2240(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          Temp_bool_IsClosed_Variable_13;                    // 0x2328(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3212[0x7];                                     // 0x2329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_CustomEvent_MantleHeight_1;                 // 0x2330(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3213[0x8];                                     // 0x2338(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FALS_ComponentAndTransform             K2Node_CustomEvent_MantleLedgeWS_1;                // 0x2340(0x0070)(NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	EMantleType                                   K2Node_CustomEvent_MantleType_1;                   // 0x23B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3214[0x7];                                     // 0x23B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_CustomEvent_MantleHeight;                   // 0x23B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FALS_ComponentAndTransform             K2Node_CustomEvent_MantleLedgeWS;                  // 0x23C0(0x0070)(NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	EMantleType                                   K2Node_CustomEvent_MantleType;                     // 0x2430(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_13;              // 0x2431(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3215[0x6];                                     // 0x2432(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMantle_Params                         K2Node_CustomEvent_Mantle_Params;                  // 0x2438(0x0030)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Montage_Play_ReturnValue;                 // 0x2468(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_23;       // 0x246C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3216[0x3];                                     // 0x246D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_CustomEvent_Bounce_3;                       // 0x2470(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Instigator_3;                   // 0x2478(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_UseControlRot_3;                // 0x2479(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_JustZ_3;                        // 0x247A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3217[0x5];                                     // 0x247B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_CustomEvent_Bounce_2;                       // 0x2480(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Instigator_2;                   // 0x2488(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_UseControlRot_2;                // 0x2489(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_JustZ_2;                        // 0x248A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3218[0x5];                                     // 0x248B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_CustomEvent_Bounce_1;                       // 0x2490(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Instigator_1;                   // 0x2498(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_UseControlRot_1;                // 0x2499(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_JustZ_1;                        // 0x249A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3219[0x5];                                     // 0x249B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_Force;                                // 0x24A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Instigator;                           // 0x24A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_UseControlRot;                        // 0x24A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_321A[0x6];                                     // 0x24AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_7;        // 0x24B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item_8;                         // 0x24C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CallFunc_SpawnSoundAtLocation_ReturnValue_5;       // 0x24D0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_ChainPhysics_C>   K2Node_DynamicCast_AsBPI_Chain_Physics_3;          // 0x24D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_23;                    // 0x24E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_321B[0x3];                                     // 0x24E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_8;               // 0x24EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_14;              // 0x24F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_7;                // 0x24F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_321C[0x6];                                     // 0x24F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_CustomEvent_Bounce;                         // 0x24F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Instigator;                     // 0x2500(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_UseControlRot;                  // 0x2501(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_JustZ;                          // 0x2502(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_321D[0x5];                                     // 0x2503(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue_2;                // 0x2508(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_7;      // 0x2510(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_Character_C*>                CallFunc_GetAllActorsOfClass_OutActors;            // 0x2518(0x0010)(ReferenceParm)
	class ABP_Character_C*                        CallFunc_Array_Get_Item_9;                         // 0x2528(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_9;               // 0x2530(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_8;                // 0x2534(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x2535(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_321E[0x2];                                     // 0x2536(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_SelectControlRot_DesiredControlRotation;  // 0x2538(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_2;           // 0x2550(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_3;       // 0x2568(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_14;                         // 0x2580(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_14;                         // 0x2588(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_14;                         // 0x2590(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_3;                // 0x2598(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_4;                // 0x25A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_12;                // 0x25A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_13;                // 0x25C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      K2Node_Select_Default;                             // 0x25D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_HitComponent;           // 0x25E0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x25E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x25F0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_ComponentBoundEvent_NormalImpulse;          // 0x25F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_ComponentBoundEvent_Hit;                    // 0x2610(0x00E8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_CalculateFloorNormal_ImpactNormal;        // 0x26F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue_1;       // 0x2710(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_2;        // 0x2718(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_15;                         // 0x2720(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_15;                         // 0x2728(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_15;                         // 0x2730(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_14;                // 0x2738(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue_2;                        // 0x2750(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_2;          // 0x2758(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlaying_ReturnValue;                    // 0x2759(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_14;                    // 0x275A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_321F[0x5];                                     // 0x275B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_5;           // 0x2760(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_AddWorldOffset_SweepHitResult;         // 0x2768(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_10;   // 0x2850(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_CustomEvent_New_Location_Z;                 // 0x2868(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_16;                         // 0x2870(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_16;                         // 0x2878(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_16;                         // 0x2880(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_3;          // 0x2888(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3220[0x7];                                     // 0x2889(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X_17;                         // 0x2890(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_17;                         // 0x2898(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_17;                         // 0x28A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDesiredMoveDirection_ReturnValue_1;    // 0x28A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x28C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_ClampAxes2D_ReturnValue;                  // 0x28D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x28E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x28E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x28F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize2D_ReturnValue;                      // 0x2900(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_4;       // 0x2908(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_18;                         // 0x2920(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_18;                         // 0x2928(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_18;                         // 0x2930(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_15;                // 0x2938(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MantleUpdate_BlendIn_ImplicitCast;        // 0x2950(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_Alpha_ImplicitCast;                  // 0x2958(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetCapsuleHalfHeight_HalfHeight_ImplicitCast; // 0x2960(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3221[0x4];                                     // 0x2964(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Lerp_Alpha_ImplicitCast_1;                // 0x2968(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_Alpha_ImplicitCast_2;                // 0x2970(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_Alpha_ImplicitCast_3;                // 0x2978(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ClientStartCameraShake_Scale_ImplicitCast; // 0x2980(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3222[0x4];                                     // 0x2984(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Lerp_Alpha_ImplicitCast_4;                // 0x2988(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x2990(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3223[0x4];                                     // 0x2994(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Lerp_Alpha_ImplicitCast_5;                // 0x2998(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_1; // 0x29A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3224[0x4];                                     // 0x29A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Lerp_Alpha_ImplicitCast_6;                // 0x29A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_ResyncChainTimeline_Alpha_ImplicitCast;   // 0x29B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_B_ImplicitCast;                      // 0x29B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_A_ImplicitCast;                      // 0x29C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetFieldOfView_InFieldOfView_ImplicitCast; // 0x29C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3225[0x4];                                     // 0x29CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Lerp_A_ImplicitCast_1;                    // 0x29D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetFieldOfView_InFieldOfView_ImplicitCast_1; // 0x29D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_AddControllerYawInput_Val_ImplicitCast;   // 0x29DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_AddControllerPitchInput_Val_ImplicitCast; // 0x29E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetPlayRate_NewRate_ImplicitCast;         // 0x29E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetPlayRate_NewRate_ImplicitCast_1;       // 0x29E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RetriggerableDelay_Duration_ImplicitCast; // 0x29EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ShuffleMantleCheck_Duration_ImplicitCast; // 0x29F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x29F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_ExecuteUbergraph_BP_Character) == 0x000010, "Wrong alignment on BP_Character_C_ExecuteUbergraph_BP_Character");
static_assert(sizeof(BP_Character_C_ExecuteUbergraph_BP_Character) == 0x002A00, "Wrong size on BP_Character_C_ExecuteUbergraph_BP_Character");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, EntryPoint) == 0x000000, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_IsValid_ReturnValue_1) == 0x000005, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_IsValid_ReturnValue_2) == 0x000006, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000008, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_IsValid_ReturnValue_3) == 0x000020, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000028, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_VSize_ReturnValue) == 0x000040, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000048, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_bool_Variable) == 0x000049, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_object_Variable) == 0x000050, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_int_Array_Index_Variable) == 0x000058, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_bool_Has_Been_Initd_Variable) == 0x00005C, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_bool_IsClosed_Variable) == 0x00005D, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_HasAuthority_ReturnValue) == 0x00005E, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_IsValid_ReturnValue_4) == 0x00005F, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_HasAuthority_ReturnValue_1) == 0x000060, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_HasAuthority_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_IsValid_ReturnValue_5) == 0x000061, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_HasAuthority_ReturnValue_2) == 0x000062, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_HasAuthority_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_int_Variable) == 0x000064, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_HasAuthority_ReturnValue_3) == 0x000068, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_HasAuthority_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_bool_IsClosed_Variable_1) == 0x000069, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_bool_IsClosed_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_bool_Has_Been_Initd_Variable_1) == 0x00006A, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Lerp_ReturnValue) == 0x000070, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CreateDelegate_OutputDelegate) == 0x000078, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_int_Variable_1) == 0x000088, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000090, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_int_Loop_Counter_Variable) == 0x000098, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Add_IntInt_ReturnValue) == 0x00009C, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_int_Array_Index_Variable_1) == 0x0000A0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_bool_Has_Been_Initd_Variable_2) == 0x0000A4, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_bool_Has_Been_Initd_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_HasAuthority_ReturnValue_4) == 0x0000A5, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_HasAuthority_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_bool_IsClosed_Variable_2) == 0x0000A6, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_bool_IsClosed_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_int_Loop_Counter_Variable_1) == 0x0000A8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Subtract_IntInt_ReturnValue) == 0x0000AC, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0000B0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_int_Array_Index_Variable_2) == 0x0000B4, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Lerp_ReturnValue_1) == 0x0000B8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_HasAuthority_ReturnValue_5) == 0x0000C0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_HasAuthority_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_HasAuthority_ReturnValue_6) == 0x0000C1, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_HasAuthority_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_bool_IsClosed_Variable_3) == 0x0000C2, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_bool_IsClosed_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_bool_Has_Been_Initd_Variable_3) == 0x0000C3, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_bool_Has_Been_Initd_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_int_Loop_Counter_Variable_2) == 0x0000C4, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000C8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_int_Array_Index_Variable_3) == 0x0000CC, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Lerp_ReturnValue_2) == 0x0000D0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Lerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_bool_Has_Been_Initd_Variable_4) == 0x0000D8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_bool_Has_Been_Initd_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Lerp_ReturnValue_3) == 0x0000E0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Lerp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Lerp_ReturnValue_4) == 0x0000E8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Lerp_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_bool_IsClosed_Variable_4) == 0x0000F0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_bool_IsClosed_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_bool_IsClosed_Variable_5) == 0x0000F1, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_bool_IsClosed_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_bool_Has_Been_Initd_Variable_5) == 0x0000F2, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_bool_Has_Been_Initd_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_HasAuthority_ReturnValue_7) == 0x0000F3, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_HasAuthority_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_int_Loop_Counter_Variable_3) == 0x0000F4, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Add_IntInt_ReturnValue_2) == 0x0000F8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_int_Array_Index_Variable_4) == 0x0000FC, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_int_Array_Index_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_int_Array_Index_Variable_5) == 0x000100, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_int_Array_Index_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_bool_Has_Been_Initd_Variable_6) == 0x000104, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_bool_Has_Been_Initd_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CreateDelegate_OutputDelegate_1) == 0x000108, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_K2_SetTimerDelegate_ReturnValue_1) == 0x000118, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_K2_SetTimerDelegate_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_int_Loop_Counter_Variable_4) == 0x000120, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_int_Loop_Counter_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Add_IntInt_ReturnValue_3) == 0x000124, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_int_Array_Index_Variable_6) == 0x000128, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_int_Array_Index_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_bool_IsClosed_Variable_6) == 0x00012C, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_bool_IsClosed_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_bool_Has_Been_Initd_Variable_7) == 0x00012D, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_bool_Has_Been_Initd_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Location_1) == 0x000130, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Location_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Rotation_2) == 0x000148, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Rotation_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Data) == 0x000160, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Data' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_PlayerName) == 0x000170, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_PlayerName' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Active) == 0x000180, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Active' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Driving) == 0x000181, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Driving' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Left) == 0x000188, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Left' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Right) == 0x0001A0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Right' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Impulse_2) == 0x0001B8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Impulse_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Vehicle) == 0x0001D0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Vehicle' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Comp_1) == 0x0001D8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Comp_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Physics) == 0x0001E0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Physics' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Comp) == 0x0001E8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Comp' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Constraint) == 0x0001F0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Constraint' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Socket_1) == 0x0001F8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Socket_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Damping) == 0x000200, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Damping' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_InMovingObject) == 0x000208, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_InMovingObject' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Impulse_1) == 0x000210, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Impulse_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_DriverSocket) == 0x000228, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_DriverSocket' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Rotation_1) == 0x000230, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Rotation_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Location) == 0x000248, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Location' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Rotation) == 0x000260, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Rotation' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_NullDuration) == 0x000278, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_NullDuration' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_TimelineDuration) == 0x000280, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_TimelineDuration' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_bool_IsClosed_Variable_7) == 0x000288, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_bool_IsClosed_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CreateDelegate_OutputDelegate_2) == 0x00028C, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_EqualEqual_BoolBool_ReturnValue) == 0x00029C, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_EqualEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_K2_SetTimerDelegate_ReturnValue_2) == 0x0002A0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_K2_SetTimerDelegate_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Not_PreBool_ReturnValue) == 0x0002A8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_moveForward) == 0x0002B0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_moveForward' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_moveRight) == 0x0002B8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_moveRight' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_MoveForwardVector_1) == 0x0002C0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_MoveForwardVector_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_MoveForwardVector) == 0x0002D8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_MoveForwardVector' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_IsLocallyControlled_ReturnValue) == 0x0002F0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_MoveRightVector_1) == 0x0002F8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_MoveRightVector_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_MoveRightVector) == 0x000310, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_MoveRightVector' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_IsLocallyControlled_ReturnValue_1) == 0x000328, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_IsLocallyControlled_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_RepCapsuleYaw) == 0x000330, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_RepCapsuleYaw' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_ClientRepLocation) == 0x000338, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_ClientRepLocation' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_DesiredControlRotation) == 0x000350, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_DesiredControlRotation' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_int_Loop_Counter_Variable_5) == 0x000368, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_int_Loop_Counter_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Add_IntInt_ReturnValue_4) == 0x00036C, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Array_Length_ReturnValue) == 0x000370, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000378, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_VLerp_ReturnValue) == 0x000390, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x0003A8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_K2_SetActorLocation_ReturnValue) == 0x000490, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetForwardVector_ReturnValue) == 0x000498, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetForwardVector_ReturnValue_1) == 0x0004B0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetForwardVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0004C8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x0004E0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x0004F8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x000510, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Add_VectorVector_ReturnValue) == 0x000528, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000540, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_TraceVisibility_Result) == 0x000558, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_TraceVisibility_Result' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_K2_GetComponentLocation_ReturnValue_2) == 0x000560, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_K2_GetComponentLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_SpawnSoundAtLocation_ReturnValue) == 0x000578, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_SpawnSoundAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_SpawnSoundAtLocation_ReturnValue_1) == 0x000580, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_SpawnSoundAtLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_SpawnSoundAtLocation_ReturnValue_2) == 0x000588, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_SpawnSoundAtLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_SpawnSoundAtLocation_ReturnValue_3) == 0x000590, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_SpawnSoundAtLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Array_Length_ReturnValue_1) == 0x000598, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Array_IsEmpty_ReturnValue) == 0x00059C, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Array_IsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Array_Length_ReturnValue_2) == 0x0005A0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Array_IsEmpty_ReturnValue_1) == 0x0005A4, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Array_IsEmpty_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Array_Get_Item) == 0x0005A8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Array_Length_ReturnValue_3) == 0x0005B0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_AsBPI_Chain_Physics) == 0x0005B8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_AsBPI_Chain_Physics' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_bSuccess) == 0x0005C8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Less_IntInt_ReturnValue) == 0x0005C9, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetGameState_ReturnValue) == 0x0005D0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_AsBPI_Gamestate) == 0x0005D8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_AsBPI_Gamestate' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_bSuccess_1) == 0x0005E8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetPawnArray_Array) == 0x0005F0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetPawnArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_LineTraceSingle_OutHit) == 0x000600, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_LineTraceSingle_ReturnValue) == 0x0006E8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_IsLocallyControlled_ReturnValue_2) == 0x0006E9, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_IsLocallyControlled_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetSurfaceType_ReturnValue) == 0x0006EA, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetSurfaceType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_IsLocallyControlled_ReturnValue_3) == 0x0006EB, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_IsLocallyControlled_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_SwitchEnum_CmpSuccess) == 0x0006EC, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetController_ReturnValue) == 0x0006F0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_AsPlayer_Controller) == 0x0006F8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_AsPlayer_Controller' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_bSuccess_2) == 0x000700, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetController_ReturnValue_1) == 0x000708, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_AsPlayer_Controller_1) == 0x000710, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_AsPlayer_Controller_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_bSuccess_3) == 0x000718, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Lerp_ReturnValue_5) == 0x000720, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Lerp_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Lerp_ReturnValue_6) == 0x000728, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Lerp_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_Outline) == 0x000730, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_Outline' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Axis_3) == 0x000738, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Axis_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_IsValid_ReturnValue_6) == 0x000740, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Axis_2) == 0x000748, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Axis_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Sprint) == 0x000750, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Sprint' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000758, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_Sprint_1) == 0x000760, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_Sprint_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_Sprint) == 0x000761, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_Sprint' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_IsLocallyControlled_ReturnValue_4) == 0x000762, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_IsLocallyControlled_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_IsLocallyControlled_ReturnValue_5) == 0x000763, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_IsLocallyControlled_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Axis_1) == 0x000768, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Axis_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Axis) == 0x000770, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Axis' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetGameInstance_ReturnValue) == 0x000778, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000780, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_AsBPI_Game_Instance_with_Save) == 0x000788, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_AsBPI_Game_Instance_with_Save' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_bSuccess_4) == 0x000798, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetCameraSettings_InvertX) == 0x000799, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetCameraSettings_InvertX' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetCameraSettings_InvertY) == 0x00079A, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetCameraSettings_InvertY' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetCameraSettings_X_Sensitivity) == 0x0007A0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetCameraSettings_X_Sensitivity' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetCameraSettings_Y_Sensitivity) == 0x0007A8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetCameraSettings_Y_Sensitivity' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetGameInstance_ReturnValue_1) == 0x0007B0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_AsBPI_Game_Instance_with_Save_1) == 0x0007B8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_AsBPI_Game_Instance_with_Save_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_bSuccess_5) == 0x0007C8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x0007D0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetCameraSettings_InvertX_1) == 0x0007D8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetCameraSettings_InvertX_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetCameraSettings_InvertY_1) == 0x0007D9, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetCameraSettings_InvertY_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetCameraSettings_X_Sensitivity_1) == 0x0007E0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetCameraSettings_X_Sensitivity_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetCameraSettings_Y_Sensitivity_1) == 0x0007E8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetCameraSettings_Y_Sensitivity_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x0007F0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_SelectFloat_ReturnValue) == 0x0007F8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Multiply_DoubleDouble_ReturnValue_4) == 0x000800, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Multiply_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_SelectFloat_ReturnValue_1) == 0x000808, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Multiply_DoubleDouble_ReturnValue_5) == 0x000810, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Multiply_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetController_ReturnValue_2) == 0x000818, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetController_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetController_ReturnValue_3) == 0x000820, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetController_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_AsPlayer_Controller_2) == 0x000828, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_AsPlayer_Controller_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_bSuccess_6) == 0x000830, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_AsPlayer_Controller_3) == 0x000838, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_AsPlayer_Controller_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_bSuccess_7) == 0x000840, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_Balancier_1) == 0x000848, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_Balancier_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_MaillonIndex_1) == 0x000850, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_MaillonIndex_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_Location_1) == 0x000858, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_Location_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_Balancier) == 0x000870, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_Balancier' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_MaillonIndex) == 0x000878, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_MaillonIndex' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_Location) == 0x000880, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_Location' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_AsBPI_Balancier) == 0x000898, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_AsBPI_Balancier' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_bSuccess_8) == 0x0008A8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_bSuccess_8' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_IsLocallyControlled_ReturnValue_6) == 0x0008A9, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_IsLocallyControlled_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_int_Array_Index_Variable_7) == 0x0008AC, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_int_Array_Index_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Array_Get_Item_1) == 0x0008B0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_IsValid_ReturnValue_7) == 0x0008B8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_bool_Has_Been_Initd_Variable_8) == 0x0008B9, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_bool_Has_Been_Initd_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_DetectStuck_Stuck) == 0x0008BA, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_DetectStuck_Stuck' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_DetectStuck_ZFix) == 0x0008C0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_DetectStuck_ZFix' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_DetectStuck_Stuck_1) == 0x0008C8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_DetectStuck_Stuck_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_DetectStuck_ZFix_1) == 0x0008D0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_DetectStuck_ZFix_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_K2_GetComponentLocation_ReturnValue_3) == 0x0008D8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_K2_GetComponentLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Add_DoubleDouble_ReturnValue) == 0x0008F0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_X) == 0x0008F8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_Y) == 0x000900, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_Z) == 0x000908, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000910, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_MakeVector_ReturnValue) == 0x000918, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x000930, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_IsLocallyControlled_ReturnValue_7) == 0x000A18, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_IsLocallyControlled_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_IsOnTyrolienne_ReturnValue) == 0x000A19, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_IsOnTyrolienne_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_IsLocallyControlled_ReturnValue_8) == 0x000A1A, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_IsLocallyControlled_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_IsLocallyControlled_ReturnValue_9) == 0x000A1B, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_IsLocallyControlled_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_IsLocallyControlled_ReturnValue_10) == 0x000A1C, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_IsLocallyControlled_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000A20, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_X_1) == 0x000A38, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_Y_1) == 0x000A40, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_Z_1) == 0x000A48, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Array_Get_Item_2) == 0x000A50, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_MakeVector_ReturnValue_1) == 0x000A58, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x000A70, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Array_Length_ReturnValue_4) == 0x000A88, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_X_2) == 0x000A90, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_Y_2) == 0x000A98, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_Z_2) == 0x000AA0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_MakeVector_ReturnValue_2) == 0x000AA8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetDirectionUnitVector_ReturnValue) == 0x000AC0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetDirectionUnitVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_bool_IsClosed_Variable_8) == 0x000AD8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_bool_IsClosed_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x000AE0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_SelectMoveForwardAxis_ReturnValue) == 0x000AF8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_SelectMoveForwardAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_SelectMoveRightAxis_ReturnValue) == 0x000B00, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_SelectMoveRightAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Abs_ReturnValue) == 0x000B08, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Abs_ReturnValue_1) == 0x000B10, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Add_DoubleDouble_ReturnValue_2) == 0x000B18, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Add_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000B20, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_IsValid_ReturnValue_8) == 0x000B21, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000B22, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_AsBP_Character) == 0x000B28, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_AsBP_Character' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_bSuccess_9) == 0x000B30, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_bSuccess_9' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_IsLocallyControlled_ReturnValue_11) == 0x000B31, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_IsLocallyControlled_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_IsLocallyControlled_ReturnValue_12) == 0x000B32, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_IsLocallyControlled_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_IsLocallyControlled_ReturnValue_13) == 0x000B33, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_IsLocallyControlled_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000B34, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetGameState_ReturnValue_1) == 0x000B38, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetGameState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_AsBPI_Gamestate_1) == 0x000B40, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_AsBPI_Gamestate_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_bSuccess_10) == 0x000B50, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_bSuccess_10' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetPawnArray_Array_1) == 0x000B58, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetPawnArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_K2_GetComponentLocation_ReturnValue_4) == 0x000B68, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_K2_GetComponentLocation_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000B80, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_SphereTraceMulti_OutHits) == 0x000B98, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_SphereTraceMulti_OutHits' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_SphereTraceMulti_ReturnValue) == 0x000BA8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_SphereTraceMulti_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_JumpTraceHits_Good) == 0x000BA9, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_JumpTraceHits_Good' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000BB0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Conv_DoubleToVector_ReturnValue_1) == 0x000BC0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Conv_DoubleToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Concat_StrStr_ReturnValue) == 0x000BD8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_SwitchEnum_CmpSuccess_1) == 0x000BE8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_MantleCheck_CanClimb_Vault) == 0x000BE9, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_MantleCheck_CanClimb_Vault' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_MantleCheck_CanClimb_Vault_1) == 0x000BEA, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_MantleCheck_CanClimb_Vault_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetGameState_ReturnValue_2) == 0x000BF0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetGameState_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_K2_GetActorLocation_ReturnValue_3) == 0x000BF8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_K2_GetActorLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_AsBPI_Gamestate_2) == 0x000C10, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_AsBPI_Gamestate_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_bSuccess_11) == 0x000C20, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_bSuccess_11' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_X_3) == 0x000C28, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_Y_3) == 0x000C30, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_Z_3) == 0x000C38, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetPawnArray_Array_2) == 0x000C40, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetPawnArray_Array_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_MakeVector_ReturnValue_3) == 0x000C50, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_MakeVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_MakeVector_ReturnValue_4) == 0x000C68, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_MakeVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_LineTraceSingle_OutHit_1) == 0x000C80, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_LineTraceSingle_OutHit_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_LineTraceSingle_ReturnValue_1) == 0x000D68, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_LineTraceSingle_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakHitResult_bBlockingHit) == 0x000D69, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakHitResult_bInitialOverlap) == 0x000D6A, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakHitResult_Time) == 0x000D6C, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakHitResult_Distance) == 0x000D70, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakHitResult_Location) == 0x000D78, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakHitResult_ImpactPoint) == 0x000D90, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakHitResult_Normal) == 0x000DA8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakHitResult_ImpactNormal) == 0x000DC0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakHitResult_PhysMat) == 0x000DD8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakHitResult_HitActor) == 0x000DE0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakHitResult_HitComponent) == 0x000DE8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakHitResult_HitBoneName) == 0x000DF0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakHitResult_BoneName) == 0x000DF8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakHitResult_HitItem) == 0x000E00, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakHitResult_ElementIndex) == 0x000E04, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakHitResult_FaceIndex) == 0x000E08, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakHitResult_TraceStart) == 0x000E10, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakHitResult_TraceEnd) == 0x000E28, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetCollisionResponseToChannel_ReturnValue) == 0x000E40, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetCollisionResponseToChannel_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_SwitchEnum_CmpSuccess_2) == 0x000E41, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_int_Loop_Counter_Variable_6) == 0x000E44, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_int_Loop_Counter_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Less_IntInt_ReturnValue_1) == 0x000E48, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Add_IntInt_ReturnValue_5) == 0x000E4C, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_bool_IsClosed_Variable_9) == 0x000E50, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_bool_IsClosed_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_NewMovementState) == 0x000E51, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_NewMovementState' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_bool_Has_Been_Initd_Variable_9) == 0x000E52, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_bool_Has_Been_Initd_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000E53, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_NewMovementAction) == 0x000E54, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_NewMovementAction' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_NewRotationMode) == 0x000E55, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_NewRotationMode' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x000E56, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_NotEqual_ByteByte_ReturnValue_2) == 0x000E57, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_NotEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_NewGait) == 0x000E58, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_NewGait' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_NewViewMode) == 0x000E59, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_NewViewMode' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_NotEqual_ByteByte_ReturnValue_3) == 0x000E5A, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_NotEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_NotEqual_ByteByte_ReturnValue_4) == 0x000E5B, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_NotEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_NewOverlayState) == 0x000E5C, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_NewOverlayState' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_DeltaSeconds) == 0x000E60, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_NotEqual_ByteByte_ReturnValue_5) == 0x000E64, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_NotEqual_ByteByte_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_Pawn_Movement_Mode) == 0x000E65, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_Pawn_Movement_Mode' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_Duration_3) == 0x000E68, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_Duration_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000E70, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Time) == 0x000E78, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Time' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_EqualEqual_DoubleDouble_ReturnValue_1) == 0x000E80, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_EqualEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Vector) == 0x000E88, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Vector' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_MakeSlide) == 0x000EA0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_MakeSlide' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_StabilizeSpeed) == 0x000EA8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_StabilizeSpeed' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_PushedByTrain) == 0x000EB0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_PushedByTrain' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_ShuffleFixToGround) == 0x000EB1, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_ShuffleFixToGround' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_NotEqual_ByteByte_ReturnValue_6) == 0x000EB2, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_NotEqual_ByteByte_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Character) == 0x000EB8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Character' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_int_Array_Index_Variable_8) == 0x000EC0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_int_Array_Index_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Array_Add_ReturnValue) == 0x000EC4, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Array_Get_Item_3) == 0x000EC8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_IsValid_ReturnValue_9) == 0x000ED0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_IsValid_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Impulse) == 0x000ED8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Impulse' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_OverrideVelocityZ) == 0x000EF0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_OverrideVelocityZ' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_StopClimb) == 0x000EF1, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_StopClimb' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_ShuffleAirControl) == 0x000EF2, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_ShuffleAirControl' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_IgnoreDoOnce) == 0x000EF3, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_IgnoreDoOnce' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_PushedByObstacle) == 0x000EF4, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_PushedByObstacle' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_bool_IsClosed_Variable_10) == 0x000EF5, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_bool_IsClosed_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetPhysicsLinearVelocity_ReturnValue) == 0x000EF8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetPhysicsLinearVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetPhysicsLinearVelocity_ReturnValue_1) == 0x000F10, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetPhysicsLinearVelocity_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_X_4) == 0x000F28, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_X_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_Y_4) == 0x000F30, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_Y_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_Z_4) == 0x000F38, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_Z_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_X_5) == 0x000F40, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_X_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_Y_5) == 0x000F48, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_Y_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_Z_5) == 0x000F50, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_Z_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_MakeVector_ReturnValue_5) == 0x000F58, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_MakeVector_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_MakeVector_ReturnValue_6) == 0x000F70, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_MakeVector_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Create_ReturnValue) == 0x000F88, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_NewController) == 0x000F90, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_NewController' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_FlyMode) == 0x000F98, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_FlyMode' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_AsPlayer_Controller_4) == 0x000FA0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_AsPlayer_Controller_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_bSuccess_12) == 0x000FA8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_bSuccess_12' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Show) == 0x000FA9, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Show' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_BeginPull) == 0x000FAA, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_BeginPull' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_OtherCharacter) == 0x000FB0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_OtherCharacter' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_AsPawn) == 0x000FB8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_AsPawn' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_bSuccess_13) == 0x000FC0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_bSuccess_13' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetChainByCharacters_Array_Element) == 0x000FC8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetChainByCharacters_Array_Element' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetChainByCharacters_ReturnValue) == 0x000FD0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetChainByCharacters_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_AsBPI_Chain_Physics_1) == 0x000FD8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_AsBPI_Chain_Physics_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_bSuccess_14) == 0x000FE8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_bSuccess_14' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_AsBPI_Chain_Physics_2) == 0x000FF0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_AsBPI_Chain_Physics_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_bSuccess_15) == 0x001000, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_bSuccess_15' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_New_Transform_Location) == 0x001008, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_New_Transform_Location' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_New_Transform_Rotation) == 0x001020, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_New_Transform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_Duration_2) == 0x001038, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_Duration_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x001040, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakTransform_Location) == 0x001048, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakTransform_Rotation) == 0x001060, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakTransform_Scale) == 0x001078, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_K2_SetActorTransform_SweepHitResult) == 0x001090, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_K2_SetActorTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_K2_SetActorTransform_ReturnValue) == 0x001178, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_K2_SetActorTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakRotator_Roll) == 0x00117C, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakRotator_Pitch) == 0x001180, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakRotator_Yaw) == 0x001184, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_X_6) == 0x001188, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_X_6' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_Y_6) == 0x001190, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_Y_6' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_Z_6) == 0x001198, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_Z_6' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_MakeRotator_ReturnValue) == 0x0011A0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Add_DoubleDouble_ReturnValue_3) == 0x0011B8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Add_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_MakeTransform_ReturnValue) == 0x0011C0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_MakeVector_ReturnValue_7) == 0x001220, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_MakeVector_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_K2_SetWorldLocation_SweepHitResult_1) == 0x001238, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_K2_SetWorldLocation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x001320, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Detectable) == 0x001408, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Detectable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetPlayerController_ReturnValue) == 0x001410, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x001418, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakRotator_Roll_1) == 0x001430, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakRotator_Pitch_1) == 0x001434, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakRotator_Yaw_1) == 0x001438, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_MakeRotator_ReturnValue_1) == 0x001440, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Pseudo) == 0x001458, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Pseudo' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Collision) == 0x001468, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Collision' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Response) == 0x001469, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Response' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x001470, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_ComponentBoundEvent_OtherActor_1) == 0x001478, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_ComponentBoundEvent_OtherComp_1) == 0x001480, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x001488, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_ComponentBoundEvent_bFromSweep) == 0x00148C, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_ComponentBoundEvent_SweepResult) == 0x001490, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_int_Loop_Counter_Variable_7) == 0x001578, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_int_Loop_Counter_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_Delay) == 0x001580, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_Delay' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Less_IntInt_ReturnValue_2) == 0x001588, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Add_IntInt_ReturnValue_6) == 0x00158C, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_int_Loop_Counter_Variable_8) == 0x001590, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_int_Loop_Counter_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Less_IntInt_ReturnValue_3) == 0x001594, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Add_IntInt_ReturnValue_7) == 0x001598, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Add_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_int_Array_Index_Variable_9) == 0x00159C, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_int_Array_Index_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Array_Get_Item_4) == 0x0015A0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_AsBP_New_Chain) == 0x0015A8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_AsBP_New_Chain' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_bSuccess_16) == 0x0015B0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_bSuccess_16' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_Duration_1) == 0x0015B4, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_Duration_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Delay_1) == 0x0015B8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Delay_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Socket) == 0x0015C0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Socket' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Name) == 0x0015C8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Name' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetGameInstance_ReturnValue_2) == 0x0015D0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetGameInstance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_AsCustom_GI) == 0x0015D8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_AsCustom_GI' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_bSuccess_17) == 0x0015E0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_bSuccess_17' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_Duration) == 0x0015E4, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_Duration' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Z) == 0x0015E8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Z' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_K2_GetActorLocation_ReturnValue_4) == 0x0015F0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_K2_GetActorLocation_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_X_7) == 0x001608, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_X_7' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_Y_7) == 0x001610, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_Y_7' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_Z_7) == 0x001618, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_Z_7' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_MakeVector_ReturnValue_8) == 0x001620, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_MakeVector_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_K2_SetActorLocation_SweepHitResult_1) == 0x001638, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_K2_SetActorLocation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_K2_SetActorLocation_ReturnValue_1) == 0x001720, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_K2_SetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Force_1) == 0x001728, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Force_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Delay) == 0x001730, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Delay' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_X_8) == 0x001738, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_X_8' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_Y_8) == 0x001740, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_Y_8' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_Z_8) == 0x001748, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_Z_8' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_MakeVector_ReturnValue_9) == 0x001750, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_MakeVector_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetDesiredMoveDirection_ReturnValue) == 0x001768, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetDesiredMoveDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_VSize_ReturnValue_1) == 0x001780, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_X_9) == 0x001788, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_X_9' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_Y_9) == 0x001790, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_Y_9' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_Z_9) == 0x001798, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_Z_9' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Less_DoubleDouble_ReturnValue) == 0x0017A0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_MakeVector_ReturnValue_10) == 0x0017A8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_MakeVector_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x0017C0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_X_10) == 0x0017D8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_X_10' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_Y_10) == 0x0017E0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_Y_10' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_Z_10) == 0x0017E8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_Z_10' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_MakeVector_ReturnValue_11) == 0x0017F0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_MakeVector_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_VSize_ReturnValue_2) == 0x001808, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_VSize_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x001810, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetVelocity_ReturnValue) == 0x001818, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_X_11) == 0x001830, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_X_11' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_Y_11) == 0x001838, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_Y_11' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_Z_11) == 0x001840, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_Z_11' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Less_DoubleDouble_ReturnValue_1) == 0x001848, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Less_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_IsLocallyControlled_ReturnValue_14) == 0x001849, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_IsLocallyControlled_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_DetectStuck_Stuck_2) == 0x00184A, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_DetectStuck_Stuck_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_DetectStuck_ZFix_2) == 0x001850, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_DetectStuck_ZFix_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_bool_Has_Been_Initd_Variable_10) == 0x001858, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_bool_Has_Been_Initd_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x001860, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Array_Get_Item_5) == 0x001870, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Array_Length_ReturnValue_5) == 0x001878, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Array_Length_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Less_IntInt_ReturnValue_4) == 0x00187C, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_int_Loop_Counter_Variable_9) == 0x001880, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_int_Loop_Counter_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetAnimInstance_ReturnValue) == 0x001888, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Less_IntInt_ReturnValue_5) == 0x001890, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Less_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Add_IntInt_ReturnValue_8) == 0x001894, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Add_IntInt_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_K2_GetActorLocation_ReturnValue_5) == 0x001898, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_K2_GetActorLocation_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_K2_GetComponentRotation_ReturnValue_1) == 0x0018B0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_K2_GetComponentRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetLocalMultiplayer_ReturnValue) == 0x0018C8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetLocalMultiplayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetDevMode_DevMode) == 0x0018C9, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetDevMode_DevMode' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Not_PreBool_ReturnValue_1) == 0x0018CA, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetGameState_ReturnValue_3) == 0x0018D0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetGameState_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_AsGS_Game) == 0x0018D8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_AsGS_Game' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_bSuccess_18) == 0x0018E0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_bSuccess_18' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_IsSomeoneStuckFalling_ReturnValue) == 0x0018E1, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_IsSomeoneStuckFalling_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_MultiGate_FirstRun) == 0x0018E2, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_MultiGate_FirstRun' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_MultiGate_Data) == 0x0018E4, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_MultiGate_Data' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_MultiGate_ScratchBool) == 0x0018E8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_MultiGate_ScratchBool' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_MultiGate_ScratchIndex) == 0x0018EC, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_MultiGate_ScratchIndex' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_bool_IsClosed_Variable_11) == 0x0018F0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_bool_IsClosed_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_IsLocallyControlled_ReturnValue_15) == 0x0018F1, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_IsLocallyControlled_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_K2_GetActorLocation_ReturnValue_6) == 0x0018F8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_K2_GetActorLocation_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_X_12) == 0x001910, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_X_12' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_Y_12) == 0x001918, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_Y_12' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_Z_12) == 0x001920, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_Z_12' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Add_DoubleDouble_ReturnValue_4) == 0x001928, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Add_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x001930, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_X_13) == 0x001938, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_X_13' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_Y_13) == 0x001940, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_Y_13' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_Z_13) == 0x001948, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_Z_13' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_InRange_FloatFloat_ReturnValue) == 0x001950, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_InRange_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Chain) == 0x001958, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Chain' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Array_Get_Item_6) == 0x001960, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Array_Get_Item_6' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Array_AddUnique_ReturnValue) == 0x001968, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_IsValid_ReturnValue_10) == 0x00196C, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_IsValid_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Array_Length_ReturnValue_6) == 0x001970, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Array_Length_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x001974, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Max_ReturnValue) == 0x001978, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_HasAuthority_ReturnValue_8) == 0x00197C, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_HasAuthority_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Array_Get_Item_7) == 0x001980, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Array_Get_Item_7' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Array_Length_ReturnValue_7) == 0x001988, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Array_Length_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Less_IntInt_ReturnValue_6) == 0x00198C, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Less_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_ChainAlreadyExist__ReturnValue) == 0x00198D, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_ChainAlreadyExist__ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x00198E, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_RightHand) == 0x00198F, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_RightHand' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetSocketLocation_ReturnValue) == 0x001990, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetSocketLocation_ReturnValue_1) == 0x0019A8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetSocketLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_SelectVector_ReturnValue) == 0x0019C0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_SelectVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x0019D8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_Swim) == 0x0019E0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_Swim' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Clamp_ReturnValue) == 0x0019E4, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Greater_IntInt_ReturnValue) == 0x0019E8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Remove) == 0x0019E9, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Remove' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Not_PreBool_ReturnValue_2) == 0x0019EA, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x0019EC, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Add_IntInt_ReturnValue_9) == 0x0019F0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Add_IntInt_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_K2_GetComponentLocation_ReturnValue_5) == 0x0019F8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_K2_GetComponentLocation_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_SpawnEmitterAtLocation_ReturnValue_1) == 0x001A10, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_SpawnEmitterAtLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_bool_Has_Been_Initd_Variable_11) == 0x001A18, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_bool_Has_Been_Initd_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_K2_GetComponentLocation_ReturnValue_6) == 0x001A20, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_K2_GetComponentLocation_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_SpawnSoundAtLocation_ReturnValue_4) == 0x001A38, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_SpawnSoundAtLocation_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Swim) == 0x001A40, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Swim' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_IsValid_ReturnValue_11) == 0x001A41, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_IsValid_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x001A42, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetController_ReturnValue_4) == 0x001A48, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetController_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_AsPlayer_Controller_5) == 0x001A50, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_AsPlayer_Controller_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_bSuccess_19) == 0x001A58, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_bSuccess_19' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Create_ReturnValue_1) == 0x001A60, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Create_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_AddToPlayerScreen_ReturnValue) == 0x001A68, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_AddToPlayerScreen_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_Rotation) == 0x001A70, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_Rotation' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_K2_SetWorldRotation_SweepHitResult_1) == 0x001A88, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_K2_SetWorldRotation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_IsLocallyControlled_ReturnValue_16) == 0x001B70, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_IsLocallyControlled_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_IsLocallyControlled_ReturnValue_17) == 0x001B71, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_IsLocallyControlled_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_IsLocallyControlled_ReturnValue_18) == 0x001B72, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_IsLocallyControlled_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_NewRotation_1) == 0x001B78, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_NewRotation_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_Loc_1) == 0x001B90, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_Loc_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_Normal_2) == 0x001BA8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_Normal_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_NewRotation) == 0x001BC0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_NewRotation' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_Loc) == 0x001BD8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_Loc' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_Normal_1) == 0x001BF0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_Normal_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_Stop) == 0x001C08, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_Stop' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_Rot) == 0x001C10, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_Rot' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_Comp) == 0x001C28, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_Comp' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_HitLocation) == 0x001C30, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_HitLocation' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_Normal) == 0x001C48, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_Normal' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BeginPullOtherCharacter_self_CastInput) == 0x001C60, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BeginPullOtherCharacter_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetController_ReturnValue_5) == 0x001C70, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetController_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_AsPC_Game) == 0x001C78, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_AsPC_Game' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_bSuccess_20) == 0x001C80, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_bSuccess_20' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_IsLocallyControlled_ReturnValue_19) == 0x001C81, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_IsLocallyControlled_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_SwitchEnum_CmpSuccess_3) == 0x001C82, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_SwitchEnum_CmpSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_bool_Has_Been_Initd_Variable_12) == 0x001C83, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_bool_Has_Been_Initd_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_K2_GetComponentLocation_ReturnValue_7) == 0x001C88, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_K2_GetComponentLocation_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_IsLocallyControlled_ReturnValue_20) == 0x001CA0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_IsLocallyControlled_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_IsLocallyControlled_ReturnValue_21) == 0x001CA1, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_IsLocallyControlled_ReturnValue_21' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_Tyrolienne_1) == 0x001CA8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_Tyrolienne_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_Tyrolienne) == 0x001CB0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_Tyrolienne' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_Tyro) == 0x001CB8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_Tyro' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_K2_AttachToComponent_ReturnValue) == 0x001CC0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_K2_AttachToComponent_ReturnValue_1) == 0x001CC1, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_K2_AttachToComponent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Tyrolienne) == 0x001CC8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Tyrolienne' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_bool_IsClosed_Variable_12) == 0x001CD0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_bool_IsClosed_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_K2_GetComponentLocation_ReturnValue_8) == 0x001CD8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_K2_GetComponentLocation_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_VLerp_ReturnValue_1) == 0x001CF0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_VLerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x001D08, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_K2_SetWorldLocation_SweepHitResult_2) == 0x001D20, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_K2_SetWorldLocation_SweepHitResult_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_K2_SetWorldLocation_SweepHitResult_3) == 0x001E08, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_K2_SetWorldLocation_SweepHitResult_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetPlayerController_ReturnValue_1) == 0x001EF0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetPlayerController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_IsLocallyControlled_ReturnValue_22) == 0x001EF8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_IsLocallyControlled_ReturnValue_22' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_AsBPI_Player_Controller) == 0x001F00, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_AsBPI_Player_Controller' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_bSuccess_21) == 0x001F10, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_bSuccess_21' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_SunMesh) == 0x001F18, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_SunMesh' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetPlayerController_ReturnValue_2) == 0x001F20, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetPlayerController_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_AsBPI_Player_Controller_1) == 0x001F28, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_AsBPI_Player_Controller_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_bSuccess_22) == 0x001F38, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_bSuccess_22' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x001F40, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Multiply_DoubleDouble_ReturnValue_6) == 0x001F48, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Multiply_DoubleDouble_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_MakeRotator_ReturnValue_2) == 0x001F50, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_MakeRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_K2_AddLocalRotation_SweepHitResult) == 0x001F68, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_K2_AddLocalRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Subtract_VectorVector_ReturnValue_2) == 0x002050, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Subtract_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_VLerp_ReturnValue_2) == 0x002068, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_VLerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_K2_SetWorldLocation_SweepHitResult_4) == 0x002080, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_K2_SetWorldLocation_SweepHitResult_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_K2_GetComponentLocation_ReturnValue_9) == 0x002168, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_K2_GetComponentLocation_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_LookAround) == 0x002180, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_LookAround' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetCurrentActiveMontage_ReturnValue) == 0x002188, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetCurrentActiveMontage_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_BeginTransform) == 0x002190, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_BeginTransform' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_IsValid_ReturnValue_12) == 0x0021F0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_IsValid_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakTransform_Location_1) == 0x0021F8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakTransform_Rotation_1) == 0x002210, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakTransform_Scale_1) == 0x002228, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_K2_SetWorldRotation_SweepHitResult_2) == 0x002240, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_K2_SetWorldRotation_SweepHitResult_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_bool_IsClosed_Variable_13) == 0x002328, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_bool_IsClosed_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_MantleHeight_1) == 0x002330, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_MantleHeight_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_MantleLedgeWS_1) == 0x002340, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_MantleLedgeWS_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_MantleType_1) == 0x0023B0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_MantleType_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_MantleHeight) == 0x0023B8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_MantleHeight' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_MantleLedgeWS) == 0x0023C0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_MantleLedgeWS' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_MantleType) == 0x002430, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_MantleType' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_bool_Has_Been_Initd_Variable_13) == 0x002431, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_bool_Has_Been_Initd_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_Mantle_Params) == 0x002438, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_Mantle_Params' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Montage_Play_ReturnValue) == 0x002468, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Montage_Play_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_IsLocallyControlled_ReturnValue_23) == 0x00246C, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_IsLocallyControlled_ReturnValue_23' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_Bounce_3) == 0x002470, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_Bounce_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_Instigator_3) == 0x002478, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_Instigator_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_UseControlRot_3) == 0x002479, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_UseControlRot_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_JustZ_3) == 0x00247A, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_JustZ_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_Bounce_2) == 0x002480, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_Bounce_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_Instigator_2) == 0x002488, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_Instigator_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_UseControlRot_2) == 0x002489, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_UseControlRot_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_JustZ_2) == 0x00248A, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_JustZ_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_Bounce_1) == 0x002490, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_Bounce_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_Instigator_1) == 0x002498, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_Instigator_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_UseControlRot_1) == 0x002499, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_UseControlRot_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_JustZ_1) == 0x00249A, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_JustZ_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Force) == 0x0024A0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Force' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_Instigator) == 0x0024A8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_Instigator' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Event_UseControlRot) == 0x0024A9, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Event_UseControlRot' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_K2_GetActorLocation_ReturnValue_7) == 0x0024B0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_K2_GetActorLocation_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Array_Get_Item_8) == 0x0024C8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Array_Get_Item_8' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_SpawnSoundAtLocation_ReturnValue_5) == 0x0024D0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_SpawnSoundAtLocation_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_AsBPI_Chain_Physics_3) == 0x0024D8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_AsBPI_Chain_Physics_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_DynamicCast_bSuccess_23) == 0x0024E8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_DynamicCast_bSuccess_23' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Array_Length_ReturnValue_8) == 0x0024EC, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Array_Length_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_bool_Has_Been_Initd_Variable_14) == 0x0024F0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_bool_Has_Been_Initd_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Less_IntInt_ReturnValue_7) == 0x0024F1, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Less_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_Bounce) == 0x0024F8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_Bounce' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_Instigator) == 0x002500, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_Instigator' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_UseControlRot) == 0x002501, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_UseControlRot' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_JustZ) == 0x002502, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_JustZ' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_SelectFloat_ReturnValue_2) == 0x002508, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_SelectFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Multiply_DoubleDouble_ReturnValue_7) == 0x002510, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Multiply_DoubleDouble_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetAllActorsOfClass_OutActors) == 0x002518, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Array_Get_Item_9) == 0x002528, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Array_Get_Item_9' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Array_Length_ReturnValue_9) == 0x002530, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Array_Length_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Less_IntInt_ReturnValue_8) == 0x002534, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Less_IntInt_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x002535, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_SelectControlRot_DesiredControlRotation) == 0x002538, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_SelectControlRot_DesiredControlRotation' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetForwardVector_ReturnValue_2) == 0x002550, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetForwardVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Multiply_VectorFloat_ReturnValue_3) == 0x002568, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Multiply_VectorFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_X_14) == 0x002580, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_X_14' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_Y_14) == 0x002588, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_Y_14' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_Z_14) == 0x002590, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_Z_14' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_SelectFloat_ReturnValue_3) == 0x002598, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_SelectFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_SelectFloat_ReturnValue_4) == 0x0025A0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_SelectFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_MakeVector_ReturnValue_12) == 0x0025A8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_MakeVector_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_MakeVector_ReturnValue_13) == 0x0025C0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_MakeVector_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_Select_Default) == 0x0025D8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_ComponentBoundEvent_HitComponent) == 0x0025E0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_ComponentBoundEvent_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_ComponentBoundEvent_OtherActor) == 0x0025E8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_ComponentBoundEvent_OtherComp) == 0x0025F0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_ComponentBoundEvent_NormalImpulse) == 0x0025F8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_ComponentBoundEvent_NormalImpulse' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_ComponentBoundEvent_Hit) == 0x002610, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_ComponentBoundEvent_Hit' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_CalculateFloorNormal_ImpactNormal) == 0x0026F8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_CalculateFloorNormal_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetWorldDeltaSeconds_ReturnValue_1) == 0x002710, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetWorldDeltaSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Divide_DoubleDouble_ReturnValue_2) == 0x002718, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Divide_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_X_15) == 0x002720, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_X_15' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_Y_15) == 0x002728, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_Y_15' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_Z_15) == 0x002730, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_Z_15' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_MakeVector_ReturnValue_14) == 0x002738, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_MakeVector_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Abs_ReturnValue_2) == 0x002750, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Abs_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Less_DoubleDouble_ReturnValue_2) == 0x002758, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Less_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_IsPlaying_ReturnValue) == 0x002759, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_IsPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, Temp_bool_IsClosed_Variable_14) == 0x00275A, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::Temp_bool_IsClosed_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Add_DoubleDouble_ReturnValue_5) == 0x002760, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Add_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_K2_AddWorldOffset_SweepHitResult) == 0x002768, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_K2_AddWorldOffset_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_K2_GetComponentLocation_ReturnValue_10) == 0x002850, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_K2_GetComponentLocation_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, K2Node_CustomEvent_New_Location_Z) == 0x002868, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::K2Node_CustomEvent_New_Location_Z' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_X_16) == 0x002870, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_X_16' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_Y_16) == 0x002878, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_Y_16' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_Z_16) == 0x002880, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_Z_16' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Less_DoubleDouble_ReturnValue_3) == 0x002888, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Less_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_X_17) == 0x002890, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_X_17' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_Y_17) == 0x002898, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_Y_17' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_Z_17) == 0x0028A0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_Z_17' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_GetDesiredMoveDirection_ReturnValue_1) == 0x0028A8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_GetDesiredMoveDirection_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_MakeVector2D_ReturnValue) == 0x0028C0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_ClampAxes2D_ReturnValue) == 0x0028D0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_ClampAxes2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector2D_X) == 0x0028E0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector2D_Y) == 0x0028E8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_MakeVector2D_ReturnValue_1) == 0x0028F0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_VSize2D_ReturnValue) == 0x002900, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_VSize2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Multiply_VectorFloat_ReturnValue_4) == 0x002908, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Multiply_VectorFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_X_18) == 0x002920, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_X_18' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_Y_18) == 0x002928, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_Y_18' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_BreakVector_Z_18) == 0x002930, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_BreakVector_Z_18' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_MakeVector_ReturnValue_15) == 0x002938, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_MakeVector_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_MantleUpdate_BlendIn_ImplicitCast) == 0x002950, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_MantleUpdate_BlendIn_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Lerp_Alpha_ImplicitCast) == 0x002958, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Lerp_Alpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_SetCapsuleHalfHeight_HalfHeight_ImplicitCast) == 0x002960, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_SetCapsuleHalfHeight_HalfHeight_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Lerp_Alpha_ImplicitCast_1) == 0x002968, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Lerp_Alpha_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Lerp_Alpha_ImplicitCast_2) == 0x002970, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Lerp_Alpha_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Lerp_Alpha_ImplicitCast_3) == 0x002978, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Lerp_Alpha_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_ClientStartCameraShake_Scale_ImplicitCast) == 0x002980, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_ClientStartCameraShake_Scale_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Lerp_Alpha_ImplicitCast_4) == 0x002988, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Lerp_Alpha_ImplicitCast_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x002990, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Lerp_Alpha_ImplicitCast_5) == 0x002998, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Lerp_Alpha_ImplicitCast_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_SetScalarParameterValue_Value_ImplicitCast_1) == 0x0029A0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_SetScalarParameterValue_Value_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Lerp_Alpha_ImplicitCast_6) == 0x0029A8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Lerp_Alpha_ImplicitCast_6' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_ResyncChainTimeline_Alpha_ImplicitCast) == 0x0029B0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_ResyncChainTimeline_Alpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Lerp_B_ImplicitCast) == 0x0029B8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Lerp_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Lerp_A_ImplicitCast) == 0x0029C0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Lerp_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_SetFieldOfView_InFieldOfView_ImplicitCast) == 0x0029C8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_SetFieldOfView_InFieldOfView_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_Lerp_A_ImplicitCast_1) == 0x0029D0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_Lerp_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_SetFieldOfView_InFieldOfView_ImplicitCast_1) == 0x0029D8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_SetFieldOfView_InFieldOfView_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_AddControllerYawInput_Val_ImplicitCast) == 0x0029DC, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_AddControllerYawInput_Val_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_AddControllerPitchInput_Val_ImplicitCast) == 0x0029E0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_AddControllerPitchInput_Val_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_SetPlayRate_NewRate_ImplicitCast) == 0x0029E4, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_SetPlayRate_NewRate_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_SetPlayRate_NewRate_ImplicitCast_1) == 0x0029E8, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_SetPlayRate_NewRate_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_RetriggerableDelay_Duration_ImplicitCast) == 0x0029EC, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_RetriggerableDelay_Duration_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_ShuffleMantleCheck_Duration_ImplicitCast) == 0x0029F0, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_ShuffleMantleCheck_Duration_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ExecuteUbergraph_BP_Character, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x0029F4, "Member 'BP_Character_C_ExecuteUbergraph_BP_Character::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");

// Function BP_Character.BP_Character_C.Find Chain Physics
// 0x0080 (0x0080 - 0x0000)
struct BP_Character_C_Find_Chain_Physics final
{
public:
	class FString                                 Char;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Char02;                                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Cosmetics;                                         // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3226[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Chain_C*                            Chain;                                             // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3227[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Conv_StringToName_ReturnValue_1;          // 0x003C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3228[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_Chain_C*>                    CallFunc_GetAllActorsOfClass_OutActors;            // 0x0058(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3229[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Chain_C*                            CallFunc_Array_Get_Item;                           // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue;          // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue_1;             // 0x007B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_Find_Chain_Physics) == 0x000008, "Wrong alignment on BP_Character_C_Find_Chain_Physics");
static_assert(sizeof(BP_Character_C_Find_Chain_Physics) == 0x000080, "Wrong size on BP_Character_C_Find_Chain_Physics");
static_assert(offsetof(BP_Character_C_Find_Chain_Physics, Char) == 0x000000, "Member 'BP_Character_C_Find_Chain_Physics::Char' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Find_Chain_Physics, Char02) == 0x000010, "Member 'BP_Character_C_Find_Chain_Physics::Char02' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Find_Chain_Physics, Cosmetics) == 0x000020, "Member 'BP_Character_C_Find_Chain_Physics::Cosmetics' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Find_Chain_Physics, ReturnValue) == 0x000021, "Member 'BP_Character_C_Find_Chain_Physics::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Find_Chain_Physics, Chain) == 0x000028, "Member 'BP_Character_C_Find_Chain_Physics::Chain' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Find_Chain_Physics, CallFunc_Conv_StringToName_ReturnValue) == 0x000030, "Member 'BP_Character_C_Find_Chain_Physics::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Find_Chain_Physics, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x000038, "Member 'BP_Character_C_Find_Chain_Physics::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Find_Chain_Physics, CallFunc_Conv_StringToName_ReturnValue_1) == 0x00003C, "Member 'BP_Character_C_Find_Chain_Physics::CallFunc_Conv_StringToName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Find_Chain_Physics, Temp_int_Array_Index_Variable) == 0x000044, "Member 'BP_Character_C_Find_Chain_Physics::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Find_Chain_Physics, Temp_int_Loop_Counter_Variable) == 0x000048, "Member 'BP_Character_C_Find_Chain_Physics::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Find_Chain_Physics, CallFunc_Add_IntInt_ReturnValue) == 0x00004C, "Member 'BP_Character_C_Find_Chain_Physics::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Find_Chain_Physics, Temp_bool_Variable) == 0x000050, "Member 'BP_Character_C_Find_Chain_Physics::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Find_Chain_Physics, CallFunc_GetAllActorsOfClass_OutActors) == 0x000058, "Member 'BP_Character_C_Find_Chain_Physics::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Find_Chain_Physics, CallFunc_Array_Length_ReturnValue) == 0x000068, "Member 'BP_Character_C_Find_Chain_Physics::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Find_Chain_Physics, CallFunc_Array_Get_Item) == 0x000070, "Member 'BP_Character_C_Find_Chain_Physics::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Find_Chain_Physics, CallFunc_Less_IntInt_ReturnValue) == 0x000078, "Member 'BP_Character_C_Find_Chain_Physics::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Find_Chain_Physics, CallFunc_EqualEqual_BoolBool_ReturnValue) == 0x000079, "Member 'BP_Character_C_Find_Chain_Physics::CallFunc_EqualEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Find_Chain_Physics, CallFunc_Array_Contains_ReturnValue) == 0x00007A, "Member 'BP_Character_C_Find_Chain_Physics::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Find_Chain_Physics, CallFunc_Array_Contains_ReturnValue_1) == 0x00007B, "Member 'BP_Character_C_Find_Chain_Physics::CallFunc_Array_Contains_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Find_Chain_Physics, CallFunc_BooleanAND_ReturnValue) == 0x00007C, "Member 'BP_Character_C_Find_Chain_Physics::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Find_Chain_Physics, K2Node_Select_Default) == 0x00007D, "Member 'BP_Character_C_Find_Chain_Physics::K2Node_Select_Default' has a wrong offset!");

// Function BP_Character.BP_Character_C.FixCapsuleRotation
// 0x0128 (0x0128 - 0x0000)
struct BP_Character_C_FixCapsuleRotation final
{
public:
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_322A[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x0040(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Character_C_FixCapsuleRotation) == 0x000008, "Wrong alignment on BP_Character_C_FixCapsuleRotation");
static_assert(sizeof(BP_Character_C_FixCapsuleRotation) == 0x000128, "Wrong size on BP_Character_C_FixCapsuleRotation");
static_assert(offsetof(BP_Character_C_FixCapsuleRotation, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000000, "Member 'BP_Character_C_FixCapsuleRotation::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixCapsuleRotation, CallFunc_BreakRotator_Roll) == 0x000018, "Member 'BP_Character_C_FixCapsuleRotation::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixCapsuleRotation, CallFunc_BreakRotator_Pitch) == 0x00001C, "Member 'BP_Character_C_FixCapsuleRotation::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixCapsuleRotation, CallFunc_BreakRotator_Yaw) == 0x000020, "Member 'BP_Character_C_FixCapsuleRotation::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixCapsuleRotation, CallFunc_MakeRotator_ReturnValue) == 0x000028, "Member 'BP_Character_C_FixCapsuleRotation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixCapsuleRotation, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x000040, "Member 'BP_Character_C_FixCapsuleRotation::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");

// Function BP_Character.BP_Character_C.FixClimbersDistance
// 0x0020 (0x0020 - 0x0000)
struct BP_Character_C_FixClimbersDistance final
{
public:
	double                                        Force;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxDistance;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Players;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
};
static_assert(alignof(BP_Character_C_FixClimbersDistance) == 0x000008, "Wrong alignment on BP_Character_C_FixClimbersDistance");
static_assert(sizeof(BP_Character_C_FixClimbersDistance) == 0x000020, "Wrong size on BP_Character_C_FixClimbersDistance");
static_assert(offsetof(BP_Character_C_FixClimbersDistance, Force) == 0x000000, "Member 'BP_Character_C_FixClimbersDistance::Force' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixClimbersDistance, MaxDistance) == 0x000008, "Member 'BP_Character_C_FixClimbersDistance::MaxDistance' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixClimbersDistance, Players) == 0x000010, "Member 'BP_Character_C_FixClimbersDistance::Players' has a wrong offset!");

// Function BP_Character.BP_Character_C.FixFirstMaillon
// 0x0170 (0x0170 - 0x0000)
struct BP_Character_C_FixFirstMaillon final
{
public:
	class AActor*                                 LocalChain;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlaying_ReturnValue;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_322B[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Vector_Distance_ReturnValue;              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_322C[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x0088(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Character_C_FixFirstMaillon) == 0x000008, "Wrong alignment on BP_Character_C_FixFirstMaillon");
static_assert(sizeof(BP_Character_C_FixFirstMaillon) == 0x000170, "Wrong size on BP_Character_C_FixFirstMaillon");
static_assert(offsetof(BP_Character_C_FixFirstMaillon, LocalChain) == 0x000000, "Member 'BP_Character_C_FixFirstMaillon::LocalChain' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixFirstMaillon, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_Character_C_FixFirstMaillon::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixFirstMaillon, CallFunc_IsPlaying_ReturnValue) == 0x000009, "Member 'BP_Character_C_FixFirstMaillon::CallFunc_IsPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixFirstMaillon, CallFunc_GetSocketLocation_ReturnValue) == 0x000010, "Member 'BP_Character_C_FixFirstMaillon::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixFirstMaillon, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000028, "Member 'BP_Character_C_FixFirstMaillon::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixFirstMaillon, CallFunc_Vector_Distance_ReturnValue) == 0x000040, "Member 'BP_Character_C_FixFirstMaillon::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixFirstMaillon, CallFunc_FindLookAtRotation_ReturnValue) == 0x000048, "Member 'BP_Character_C_FixFirstMaillon::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixFirstMaillon, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000060, "Member 'BP_Character_C_FixFirstMaillon::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixFirstMaillon, CallFunc_MapRangeClamped_ReturnValue) == 0x000068, "Member 'BP_Character_C_FixFirstMaillon::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixFirstMaillon, CallFunc_MakeVector_ReturnValue) == 0x000070, "Member 'BP_Character_C_FixFirstMaillon::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixFirstMaillon, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x000088, "Member 'BP_Character_C_FixFirstMaillon::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");

// Function BP_Character.BP_Character_C.FixPlayerToGround
// 0x0288 (0x0288 - 0x0000)
struct BP_Character_C_FixPlayerToGround final
{
public:
	bool                                          Fixation;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_322D[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                NewLocalVar;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_322E[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      Temp_object_Variable;                              // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Gamestate_C>      K2Node_DynamicCast_AsBPI_Gamestate;                // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_322F[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APawn*>                          CallFunc_GetPawnArray_Array;                       // 0x0050(0x0010)(ReferenceParm)
	class UPhysicalMaterial*                      K2Node_Select_Default;                             // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDesiredMoveDirection_ReturnValue;      // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3230[0x7];                                     // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x00C0(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x01A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x01AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3231[0x1];                                     // 0x01AB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3232[0x4];                                     // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x01B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x01D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x01E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0200(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0218(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0220(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0228(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3233[0x4];                                     // 0x024C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0250(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0268(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ComponentHasTag_ReturnValue;              // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ActorHasTag_ReturnValue;                  // 0x0281(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0282(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_FixPlayerToGround) == 0x000008, "Wrong alignment on BP_Character_C_FixPlayerToGround");
static_assert(sizeof(BP_Character_C_FixPlayerToGround) == 0x000288, "Wrong size on BP_Character_C_FixPlayerToGround");
static_assert(offsetof(BP_Character_C_FixPlayerToGround, Fixation) == 0x000000, "Member 'BP_Character_C_FixPlayerToGround::Fixation' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixPlayerToGround, NewLocalVar) == 0x000008, "Member 'BP_Character_C_FixPlayerToGround::NewLocalVar' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixPlayerToGround, Temp_bool_Variable) == 0x000020, "Member 'BP_Character_C_FixPlayerToGround::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixPlayerToGround, Temp_object_Variable) == 0x000028, "Member 'BP_Character_C_FixPlayerToGround::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixPlayerToGround, CallFunc_GetGameState_ReturnValue) == 0x000030, "Member 'BP_Character_C_FixPlayerToGround::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixPlayerToGround, K2Node_DynamicCast_AsBPI_Gamestate) == 0x000038, "Member 'BP_Character_C_FixPlayerToGround::K2Node_DynamicCast_AsBPI_Gamestate' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixPlayerToGround, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'BP_Character_C_FixPlayerToGround::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixPlayerToGround, CallFunc_GetPawnArray_Array) == 0x000050, "Member 'BP_Character_C_FixPlayerToGround::CallFunc_GetPawnArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixPlayerToGround, K2Node_Select_Default) == 0x000060, "Member 'BP_Character_C_FixPlayerToGround::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixPlayerToGround, CallFunc_GetDesiredMoveDirection_ReturnValue) == 0x000068, "Member 'BP_Character_C_FixPlayerToGround::CallFunc_GetDesiredMoveDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixPlayerToGround, CallFunc_VSize_ReturnValue) == 0x000080, "Member 'BP_Character_C_FixPlayerToGround::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixPlayerToGround, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000088, "Member 'BP_Character_C_FixPlayerToGround::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixPlayerToGround, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000090, "Member 'BP_Character_C_FixPlayerToGround::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixPlayerToGround, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000A8, "Member 'BP_Character_C_FixPlayerToGround::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixPlayerToGround, CallFunc_LineTraceSingle_OutHit) == 0x0000C0, "Member 'BP_Character_C_FixPlayerToGround::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixPlayerToGround, CallFunc_LineTraceSingle_ReturnValue) == 0x0001A8, "Member 'BP_Character_C_FixPlayerToGround::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixPlayerToGround, CallFunc_BreakHitResult_bBlockingHit) == 0x0001A9, "Member 'BP_Character_C_FixPlayerToGround::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixPlayerToGround, CallFunc_BreakHitResult_bInitialOverlap) == 0x0001AA, "Member 'BP_Character_C_FixPlayerToGround::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixPlayerToGround, CallFunc_BreakHitResult_Time) == 0x0001AC, "Member 'BP_Character_C_FixPlayerToGround::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixPlayerToGround, CallFunc_BreakHitResult_Distance) == 0x0001B0, "Member 'BP_Character_C_FixPlayerToGround::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixPlayerToGround, CallFunc_BreakHitResult_Location) == 0x0001B8, "Member 'BP_Character_C_FixPlayerToGround::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixPlayerToGround, CallFunc_BreakHitResult_ImpactPoint) == 0x0001D0, "Member 'BP_Character_C_FixPlayerToGround::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixPlayerToGround, CallFunc_BreakHitResult_Normal) == 0x0001E8, "Member 'BP_Character_C_FixPlayerToGround::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixPlayerToGround, CallFunc_BreakHitResult_ImpactNormal) == 0x000200, "Member 'BP_Character_C_FixPlayerToGround::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixPlayerToGround, CallFunc_BreakHitResult_PhysMat) == 0x000218, "Member 'BP_Character_C_FixPlayerToGround::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixPlayerToGround, CallFunc_BreakHitResult_HitActor) == 0x000220, "Member 'BP_Character_C_FixPlayerToGround::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixPlayerToGround, CallFunc_BreakHitResult_HitComponent) == 0x000228, "Member 'BP_Character_C_FixPlayerToGround::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixPlayerToGround, CallFunc_BreakHitResult_HitBoneName) == 0x000230, "Member 'BP_Character_C_FixPlayerToGround::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixPlayerToGround, CallFunc_BreakHitResult_BoneName) == 0x000238, "Member 'BP_Character_C_FixPlayerToGround::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixPlayerToGround, CallFunc_BreakHitResult_HitItem) == 0x000240, "Member 'BP_Character_C_FixPlayerToGround::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixPlayerToGround, CallFunc_BreakHitResult_ElementIndex) == 0x000244, "Member 'BP_Character_C_FixPlayerToGround::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixPlayerToGround, CallFunc_BreakHitResult_FaceIndex) == 0x000248, "Member 'BP_Character_C_FixPlayerToGround::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixPlayerToGround, CallFunc_BreakHitResult_TraceStart) == 0x000250, "Member 'BP_Character_C_FixPlayerToGround::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixPlayerToGround, CallFunc_BreakHitResult_TraceEnd) == 0x000268, "Member 'BP_Character_C_FixPlayerToGround::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixPlayerToGround, CallFunc_ComponentHasTag_ReturnValue) == 0x000280, "Member 'BP_Character_C_FixPlayerToGround::CallFunc_ComponentHasTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixPlayerToGround, CallFunc_ActorHasTag_ReturnValue) == 0x000281, "Member 'BP_Character_C_FixPlayerToGround::CallFunc_ActorHasTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FixPlayerToGround, CallFunc_BooleanOR_ReturnValue) == 0x000282, "Member 'BP_Character_C_FixPlayerToGround::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.Flotter
// 0x0040 (0x0040 - 0x0000)
struct BP_Character_C_Flotter final
{
public:
	bool                                          Param_Flotte;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3234[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UChristian_ALS_AnimBP_C*                K2Node_DynamicCast_AsChristian_ALS_Anim_BP;        // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3235[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3236[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UHumanWingAnimBP_C*                     K2Node_DynamicCast_AsHuman_Wing_Anim_BP;           // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_Flotter) == 0x000008, "Wrong alignment on BP_Character_C_Flotter");
static_assert(sizeof(BP_Character_C_Flotter) == 0x000040, "Wrong size on BP_Character_C_Flotter");
static_assert(offsetof(BP_Character_C_Flotter, Param_Flotte) == 0x000000, "Member 'BP_Character_C_Flotter::Param_Flotte' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Flotter, K2Node_DynamicCast_AsChristian_ALS_Anim_BP) == 0x000008, "Member 'BP_Character_C_Flotter::K2Node_DynamicCast_AsChristian_ALS_Anim_BP' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Flotter, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_Character_C_Flotter::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Flotter, CallFunc_SelectFloat_ReturnValue) == 0x000018, "Member 'BP_Character_C_Flotter::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Flotter, CallFunc_IsVisible_ReturnValue) == 0x000020, "Member 'BP_Character_C_Flotter::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Flotter, CallFunc_GetAnimInstance_ReturnValue) == 0x000028, "Member 'BP_Character_C_Flotter::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Flotter, K2Node_DynamicCast_AsHuman_Wing_Anim_BP) == 0x000030, "Member 'BP_Character_C_Flotter::K2Node_DynamicCast_AsHuman_Wing_Anim_BP' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Flotter, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'BP_Character_C_Flotter::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function BP_Character.BP_Character_C.FlushTransform
// 0x0038 (0x0038 - 0x0000)
struct BP_Character_C_FlushTransform final
{
public:
	struct FVector                                New_Transform_Location;                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               New_Transform_Rotation;                            // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        Duration;                                          // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_FlushTransform) == 0x000008, "Wrong alignment on BP_Character_C_FlushTransform");
static_assert(sizeof(BP_Character_C_FlushTransform) == 0x000038, "Wrong size on BP_Character_C_FlushTransform");
static_assert(offsetof(BP_Character_C_FlushTransform, New_Transform_Location) == 0x000000, "Member 'BP_Character_C_FlushTransform::New_Transform_Location' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FlushTransform, New_Transform_Rotation) == 0x000018, "Member 'BP_Character_C_FlushTransform::New_Transform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_Character_C_FlushTransform, Duration) == 0x000030, "Member 'BP_Character_C_FlushTransform::Duration' has a wrong offset!");

// Function BP_Character.BP_Character_C.Get Belt Fall Cam Loc Rot
// 0x0060 (0x0060 - 0x0000)
struct BP_Character_C_Get_Belt_Fall_Cam_Loc_Rot final
{
public:
	struct FVector                                Loc;                                               // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rot;                                               // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Character_C_Get_Belt_Fall_Cam_Loc_Rot) == 0x000008, "Wrong alignment on BP_Character_C_Get_Belt_Fall_Cam_Loc_Rot");
static_assert(sizeof(BP_Character_C_Get_Belt_Fall_Cam_Loc_Rot) == 0x000060, "Wrong size on BP_Character_C_Get_Belt_Fall_Cam_Loc_Rot");
static_assert(offsetof(BP_Character_C_Get_Belt_Fall_Cam_Loc_Rot, Loc) == 0x000000, "Member 'BP_Character_C_Get_Belt_Fall_Cam_Loc_Rot::Loc' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Get_Belt_Fall_Cam_Loc_Rot, Rot) == 0x000018, "Member 'BP_Character_C_Get_Belt_Fall_Cam_Loc_Rot::Rot' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Get_Belt_Fall_Cam_Loc_Rot, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000030, "Member 'BP_Character_C_Get_Belt_Fall_Cam_Loc_Rot::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Get_Belt_Fall_Cam_Loc_Rot, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000048, "Member 'BP_Character_C_Get_Belt_Fall_Cam_Loc_Rot::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.GetAllConnectedChainPhysics
// 0x0080 (0x0080 - 0x0000)
struct BP_Character_C_GetAllConnectedChainPhysics final
{
public:
	bool                                          Cosmetics;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3237[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_Chain_C*>                    Chains;                                            // 0x0008(0x0010)(Parm, OutParm)
	TArray<class ABP_Chain_C*>                    Array;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3238[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3239[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue_1;             // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Find_Chain_Physics_ReturnValue;           // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_323A[0x6];                                     // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Chain_C*                            CallFunc_Find_Chain_Physics_Chain;                 // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_GetAllConnectedChainPhysics) == 0x000008, "Wrong alignment on BP_Character_C_GetAllConnectedChainPhysics");
static_assert(sizeof(BP_Character_C_GetAllConnectedChainPhysics) == 0x000080, "Wrong size on BP_Character_C_GetAllConnectedChainPhysics");
static_assert(offsetof(BP_Character_C_GetAllConnectedChainPhysics, Cosmetics) == 0x000000, "Member 'BP_Character_C_GetAllConnectedChainPhysics::Cosmetics' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetAllConnectedChainPhysics, Chains) == 0x000008, "Member 'BP_Character_C_GetAllConnectedChainPhysics::Chains' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetAllConnectedChainPhysics, Array) == 0x000018, "Member 'BP_Character_C_GetAllConnectedChainPhysics::Array' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetAllConnectedChainPhysics, Temp_int_Array_Index_Variable) == 0x000028, "Member 'BP_Character_C_GetAllConnectedChainPhysics::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetAllConnectedChainPhysics, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'BP_Character_C_GetAllConnectedChainPhysics::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetAllConnectedChainPhysics, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'BP_Character_C_GetAllConnectedChainPhysics::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetAllConnectedChainPhysics, CallFunc_GetDisplayName_ReturnValue) == 0x000038, "Member 'BP_Character_C_GetAllConnectedChainPhysics::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetAllConnectedChainPhysics, CallFunc_Array_Get_Item) == 0x000048, "Member 'BP_Character_C_GetAllConnectedChainPhysics::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetAllConnectedChainPhysics, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'BP_Character_C_GetAllConnectedChainPhysics::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetAllConnectedChainPhysics, CallFunc_GetDisplayName_ReturnValue_1) == 0x000058, "Member 'BP_Character_C_GetAllConnectedChainPhysics::CallFunc_GetDisplayName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetAllConnectedChainPhysics, CallFunc_Less_IntInt_ReturnValue) == 0x000068, "Member 'BP_Character_C_GetAllConnectedChainPhysics::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetAllConnectedChainPhysics, CallFunc_Find_Chain_Physics_ReturnValue) == 0x000069, "Member 'BP_Character_C_GetAllConnectedChainPhysics::CallFunc_Find_Chain_Physics_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetAllConnectedChainPhysics, CallFunc_Find_Chain_Physics_Chain) == 0x000070, "Member 'BP_Character_C_GetAllConnectedChainPhysics::CallFunc_Find_Chain_Physics_Chain' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetAllConnectedChainPhysics, CallFunc_Array_Add_ReturnValue) == 0x000078, "Member 'BP_Character_C_GetAllConnectedChainPhysics::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.GetAnimCurveValue
// 0x0020 (0x0020 - 0x0000)
struct BP_Character_C_GetAnimCurveValue final
{
public:
	class FName                                   CurveName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_323B[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_ReturnValue_ImplicitCast;    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_GetAnimCurveValue) == 0x000008, "Wrong alignment on BP_Character_C_GetAnimCurveValue");
static_assert(sizeof(BP_Character_C_GetAnimCurveValue) == 0x000020, "Wrong size on BP_Character_C_GetAnimCurveValue");
static_assert(offsetof(BP_Character_C_GetAnimCurveValue, CurveName) == 0x000000, "Member 'BP_Character_C_GetAnimCurveValue::CurveName' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetAnimCurveValue, ReturnValue) == 0x000008, "Member 'BP_Character_C_GetAnimCurveValue::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetAnimCurveValue, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_Character_C_GetAnimCurveValue::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetAnimCurveValue, CallFunc_GetCurveValue_ReturnValue) == 0x000014, "Member 'BP_Character_C_GetAnimCurveValue::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetAnimCurveValue, K2Node_FunctionResult_ReturnValue_ImplicitCast) == 0x000018, "Member 'BP_Character_C_GetAnimCurveValue::K2Node_FunctionResult_ReturnValue_ImplicitCast' has a wrong offset!");

// Function BP_Character.BP_Character_C.GetAnimVariables
// 0x0080 (0x0080 - 0x0000)
struct BP_Character_C_GetAnimVariables final
{
public:
	bool                                          Jump;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Fall;                                              // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_323C[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RadialVelocity;                                    // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              MoveInput;                                         // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Climb;                                             // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Pull;                                              // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_323D[0x6];                                     // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_PulledCharacter;                             // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDriving;                                         // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_323E[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DriveLeftHand;                                     // 0x0048(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DriveRightHand;                                    // 0x0060(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LookAround;                                        // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_GetAnimVariables) == 0x000008, "Wrong alignment on BP_Character_C_GetAnimVariables");
static_assert(sizeof(BP_Character_C_GetAnimVariables) == 0x000080, "Wrong size on BP_Character_C_GetAnimVariables");
static_assert(offsetof(BP_Character_C_GetAnimVariables, Jump) == 0x000000, "Member 'BP_Character_C_GetAnimVariables::Jump' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetAnimVariables, Fall) == 0x000001, "Member 'BP_Character_C_GetAnimVariables::Fall' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetAnimVariables, RadialVelocity) == 0x000008, "Member 'BP_Character_C_GetAnimVariables::RadialVelocity' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetAnimVariables, MoveInput) == 0x000020, "Member 'BP_Character_C_GetAnimVariables::MoveInput' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetAnimVariables, Climb) == 0x000030, "Member 'BP_Character_C_GetAnimVariables::Climb' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetAnimVariables, Pull) == 0x000031, "Member 'BP_Character_C_GetAnimVariables::Pull' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetAnimVariables, Param_PulledCharacter) == 0x000038, "Member 'BP_Character_C_GetAnimVariables::Param_PulledCharacter' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetAnimVariables, IsDriving) == 0x000040, "Member 'BP_Character_C_GetAnimVariables::IsDriving' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetAnimVariables, DriveLeftHand) == 0x000048, "Member 'BP_Character_C_GetAnimVariables::DriveLeftHand' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetAnimVariables, DriveRightHand) == 0x000060, "Member 'BP_Character_C_GetAnimVariables::DriveRightHand' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetAnimVariables, LookAround) == 0x000078, "Member 'BP_Character_C_GetAnimVariables::LookAround' has a wrong offset!");

// Function BP_Character.BP_Character_C.GetAttachedCharacters
// 0x0010 (0x0010 - 0x0000)
struct BP_Character_C_GetAttachedCharacters final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(BP_Character_C_GetAttachedCharacters) == 0x000008, "Wrong alignment on BP_Character_C_GetAttachedCharacters");
static_assert(sizeof(BP_Character_C_GetAttachedCharacters) == 0x000010, "Wrong size on BP_Character_C_GetAttachedCharacters");
static_assert(offsetof(BP_Character_C_GetAttachedCharacters, ReturnValue) == 0x000000, "Member 'BP_Character_C_GetAttachedCharacters::ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.GetAttachedComponent
// 0x0008 (0x0008 - 0x0000)
struct BP_Character_C_GetAttachedComponent final
{
public:
	class UPrimitiveComponent*                    Comp;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_GetAttachedComponent) == 0x000008, "Wrong alignment on BP_Character_C_GetAttachedComponent");
static_assert(sizeof(BP_Character_C_GetAttachedComponent) == 0x000008, "Wrong size on BP_Character_C_GetAttachedComponent");
static_assert(offsetof(BP_Character_C_GetAttachedComponent, Comp) == 0x000000, "Member 'BP_Character_C_GetAttachedComponent::Comp' has a wrong offset!");

// Function BP_Character.BP_Character_C.GetBaseLocation
// 0x0018 (0x0018 - 0x0000)
struct BP_Character_C_GetBaseLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_GetBaseLocation) == 0x000008, "Wrong alignment on BP_Character_C_GetBaseLocation");
static_assert(sizeof(BP_Character_C_GetBaseLocation) == 0x000018, "Wrong size on BP_Character_C_GetBaseLocation");
static_assert(offsetof(BP_Character_C_GetBaseLocation, Location) == 0x000000, "Member 'BP_Character_C_GetBaseLocation::Location' has a wrong offset!");

// Function BP_Character.BP_Character_C.GetBeltLocation
// 0x0018 (0x0018 - 0x0000)
struct BP_Character_C_GetBeltLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_GetBeltLocation) == 0x000008, "Wrong alignment on BP_Character_C_GetBeltLocation");
static_assert(sizeof(BP_Character_C_GetBeltLocation) == 0x000018, "Wrong size on BP_Character_C_GetBeltLocation");
static_assert(offsetof(BP_Character_C_GetBeltLocation, Location) == 0x000000, "Member 'BP_Character_C_GetBeltLocation::Location' has a wrong offset!");

// Function BP_Character.BP_Character_C.GetBeltSocket
// 0x0008 (0x0008 - 0x0000)
struct BP_Character_C_GetBeltSocket final
{
public:
	class USceneComponent*                        Comp;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_GetBeltSocket) == 0x000008, "Wrong alignment on BP_Character_C_GetBeltSocket");
static_assert(sizeof(BP_Character_C_GetBeltSocket) == 0x000008, "Wrong size on BP_Character_C_GetBeltSocket");
static_assert(offsetof(BP_Character_C_GetBeltSocket, Comp) == 0x000000, "Member 'BP_Character_C_GetBeltSocket::Comp' has a wrong offset!");

// Function BP_Character.BP_Character_C.GetCalpsuleBaseLocation
// 0x0098 (0x0098 - 0x0000)
struct BP_Character_C_GetCalpsuleBaseLocation final
{
public:
	double                                        ZOffset;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_323F[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_GetCalpsuleBaseLocation) == 0x000008, "Wrong alignment on BP_Character_C_GetCalpsuleBaseLocation");
static_assert(sizeof(BP_Character_C_GetCalpsuleBaseLocation) == 0x000098, "Wrong size on BP_Character_C_GetCalpsuleBaseLocation");
static_assert(offsetof(BP_Character_C_GetCalpsuleBaseLocation, ZOffset) == 0x000000, "Member 'BP_Character_C_GetCalpsuleBaseLocation::ZOffset' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetCalpsuleBaseLocation, ReturnValue) == 0x000008, "Member 'BP_Character_C_GetCalpsuleBaseLocation::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetCalpsuleBaseLocation, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000020, "Member 'BP_Character_C_GetCalpsuleBaseLocation::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetCalpsuleBaseLocation, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x000038, "Member 'BP_Character_C_GetCalpsuleBaseLocation::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetCalpsuleBaseLocation, CallFunc_GetUpVector_ReturnValue) == 0x000040, "Member 'BP_Character_C_GetCalpsuleBaseLocation::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetCalpsuleBaseLocation, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000058, "Member 'BP_Character_C_GetCalpsuleBaseLocation::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetCalpsuleBaseLocation, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000060, "Member 'BP_Character_C_GetCalpsuleBaseLocation::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetCalpsuleBaseLocation, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000078, "Member 'BP_Character_C_GetCalpsuleBaseLocation::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetCalpsuleBaseLocation, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x000090, "Member 'BP_Character_C_GetCalpsuleBaseLocation::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BP_Character.BP_Character_C.GetCapsuleBase
// 0x0008 (0x0008 - 0x0000)
struct BP_Character_C_GetCapsuleBase final
{
public:
	class USphereComponent*                       base;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_GetCapsuleBase) == 0x000008, "Wrong alignment on BP_Character_C_GetCapsuleBase");
static_assert(sizeof(BP_Character_C_GetCapsuleBase) == 0x000008, "Wrong size on BP_Character_C_GetCapsuleBase");
static_assert(offsetof(BP_Character_C_GetCapsuleBase, base) == 0x000000, "Member 'BP_Character_C_GetCapsuleBase::base' has a wrong offset!");

// Function BP_Character.BP_Character_C.GetCapsuleComponent
// 0x0008 (0x0008 - 0x0000)
struct BP_Character_C_GetCapsuleComponent final
{
public:
	class UCapsuleComponent*                      Param_Capsule;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_GetCapsuleComponent) == 0x000008, "Wrong alignment on BP_Character_C_GetCapsuleComponent");
static_assert(sizeof(BP_Character_C_GetCapsuleComponent) == 0x000008, "Wrong size on BP_Character_C_GetCapsuleComponent");
static_assert(offsetof(BP_Character_C_GetCapsuleComponent, Param_Capsule) == 0x000000, "Member 'BP_Character_C_GetCapsuleComponent::Param_Capsule' has a wrong offset!");

// Function BP_Character.BP_Character_C.GetCapsuleLocation
// 0x0018 (0x0018 - 0x0000)
struct BP_Character_C_GetCapsuleLocation final
{
public:
	struct FVector                                NewParam;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_GetCapsuleLocation) == 0x000008, "Wrong alignment on BP_Character_C_GetCapsuleLocation");
static_assert(sizeof(BP_Character_C_GetCapsuleLocation) == 0x000018, "Wrong size on BP_Character_C_GetCapsuleLocation");
static_assert(offsetof(BP_Character_C_GetCapsuleLocation, NewParam) == 0x000000, "Member 'BP_Character_C_GetCapsuleLocation::NewParam' has a wrong offset!");

// Function BP_Character.BP_Character_C.GetCapsuleLocationFromBase
// 0x0080 (0x0080 - 0x0000)
struct BP_Character_C_GetCapsuleLocationFromBase final
{
public:
	struct FVector                                BaseLocation;                                      // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZOffset;                                           // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3240[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_GetCapsuleLocationFromBase) == 0x000008, "Wrong alignment on BP_Character_C_GetCapsuleLocationFromBase");
static_assert(sizeof(BP_Character_C_GetCapsuleLocationFromBase) == 0x000080, "Wrong size on BP_Character_C_GetCapsuleLocationFromBase");
static_assert(offsetof(BP_Character_C_GetCapsuleLocationFromBase, BaseLocation) == 0x000000, "Member 'BP_Character_C_GetCapsuleLocationFromBase::BaseLocation' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetCapsuleLocationFromBase, ZOffset) == 0x000018, "Member 'BP_Character_C_GetCapsuleLocationFromBase::ZOffset' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetCapsuleLocationFromBase, ReturnValue) == 0x000020, "Member 'BP_Character_C_GetCapsuleLocationFromBase::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetCapsuleLocationFromBase, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x000038, "Member 'BP_Character_C_GetCapsuleLocationFromBase::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetCapsuleLocationFromBase, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000040, "Member 'BP_Character_C_GetCapsuleLocationFromBase::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetCapsuleLocationFromBase, CallFunc_MakeVector_ReturnValue) == 0x000048, "Member 'BP_Character_C_GetCapsuleLocationFromBase::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetCapsuleLocationFromBase, CallFunc_Add_VectorVector_ReturnValue) == 0x000060, "Member 'BP_Character_C_GetCapsuleLocationFromBase::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetCapsuleLocationFromBase, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x000078, "Member 'BP_Character_C_GetCapsuleLocationFromBase::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BP_Character.BP_Character_C.GetCapsuleRotation
// 0x0030 (0x0030 - 0x0000)
struct BP_Character_C_GetCapsuleRotation final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Character_C_GetCapsuleRotation) == 0x000008, "Wrong alignment on BP_Character_C_GetCapsuleRotation");
static_assert(sizeof(BP_Character_C_GetCapsuleRotation) == 0x000030, "Wrong size on BP_Character_C_GetCapsuleRotation");
static_assert(offsetof(BP_Character_C_GetCapsuleRotation, Rotation) == 0x000000, "Member 'BP_Character_C_GetCapsuleRotation::Rotation' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetCapsuleRotation, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000018, "Member 'BP_Character_C_GetCapsuleRotation::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.GetCharacter
// 0x0001 (0x0001 - 0x0000)
struct BP_Character_C_GetCharacter final
{
public:
	E_ChoosenChar                                 Character;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_GetCharacter) == 0x000001, "Wrong alignment on BP_Character_C_GetCharacter");
static_assert(sizeof(BP_Character_C_GetCharacter) == 0x000001, "Wrong size on BP_Character_C_GetCharacter");
static_assert(offsetof(BP_Character_C_GetCharacter, Character) == 0x000000, "Member 'BP_Character_C_GetCharacter::Character' has a wrong offset!");

// Function BP_Character.BP_Character_C.GetCharacterVelocity
// 0x0018 (0x0018 - 0x0000)
struct BP_Character_C_GetCharacterVelocity final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_GetCharacterVelocity) == 0x000008, "Wrong alignment on BP_Character_C_GetCharacterVelocity");
static_assert(sizeof(BP_Character_C_GetCharacterVelocity) == 0x000018, "Wrong size on BP_Character_C_GetCharacterVelocity");
static_assert(offsetof(BP_Character_C_GetCharacterVelocity, ReturnValue) == 0x000000, "Member 'BP_Character_C_GetCharacterVelocity::ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.GetConnectedChains
// 0x0010 (0x0010 - 0x0000)
struct BP_Character_C_GetConnectedChains final
{
public:
	TArray<class AActor*>                         Chains;                                            // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(BP_Character_C_GetConnectedChains) == 0x000008, "Wrong alignment on BP_Character_C_GetConnectedChains");
static_assert(sizeof(BP_Character_C_GetConnectedChains) == 0x000010, "Wrong size on BP_Character_C_GetConnectedChains");
static_assert(offsetof(BP_Character_C_GetConnectedChains, Chains) == 0x000000, "Member 'BP_Character_C_GetConnectedChains::Chains' has a wrong offset!");

// Function BP_Character.BP_Character_C.GetCosmeticSocket
// 0x0008 (0x0008 - 0x0000)
struct BP_Character_C_GetCosmeticSocket final
{
public:
	class UPrimitiveComponent*                    Comp;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_GetCosmeticSocket) == 0x000008, "Wrong alignment on BP_Character_C_GetCosmeticSocket");
static_assert(sizeof(BP_Character_C_GetCosmeticSocket) == 0x000008, "Wrong size on BP_Character_C_GetCosmeticSocket");
static_assert(offsetof(BP_Character_C_GetCosmeticSocket, Comp) == 0x000000, "Member 'BP_Character_C_GetCosmeticSocket::Comp' has a wrong offset!");

// Function BP_Character.BP_Character_C.GetCurrentVehicle
// 0x0008 (0x0008 - 0x0000)
struct BP_Character_C_GetCurrentVehicle final
{
public:
	class AActor*                                 Vehicle;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_GetCurrentVehicle) == 0x000008, "Wrong alignment on BP_Character_C_GetCurrentVehicle");
static_assert(sizeof(BP_Character_C_GetCurrentVehicle) == 0x000008, "Wrong size on BP_Character_C_GetCurrentVehicle");
static_assert(offsetof(BP_Character_C_GetCurrentVehicle, Vehicle) == 0x000000, "Member 'BP_Character_C_GetCurrentVehicle::Vehicle' has a wrong offset!");

// Function BP_Character.BP_Character_C.GetDesiredMoveDirection
// 0x00D0 (0x00D0 - 0x0000)
struct BP_Character_C_GetDesiredMoveDirection final
{
public:
	bool                                          Normalize;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3241[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RightAxisScale;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectMoveForwardAxis_ReturnValue;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectMoveRightAxis_ReturnValue;          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue;                 // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ClampVectorSize_ReturnValue;              // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_GetDesiredMoveDirection) == 0x000008, "Wrong alignment on BP_Character_C_GetDesiredMoveDirection");
static_assert(sizeof(BP_Character_C_GetDesiredMoveDirection) == 0x0000D0, "Wrong size on BP_Character_C_GetDesiredMoveDirection");
static_assert(offsetof(BP_Character_C_GetDesiredMoveDirection, Normalize) == 0x000000, "Member 'BP_Character_C_GetDesiredMoveDirection::Normalize' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetDesiredMoveDirection, RightAxisScale) == 0x000008, "Member 'BP_Character_C_GetDesiredMoveDirection::RightAxisScale' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetDesiredMoveDirection, ReturnValue) == 0x000010, "Member 'BP_Character_C_GetDesiredMoveDirection::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetDesiredMoveDirection, CallFunc_SelectMoveForwardAxis_ReturnValue) == 0x000028, "Member 'BP_Character_C_GetDesiredMoveDirection::CallFunc_SelectMoveForwardAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetDesiredMoveDirection, CallFunc_SelectMoveRightAxis_ReturnValue) == 0x000030, "Member 'BP_Character_C_GetDesiredMoveDirection::CallFunc_SelectMoveRightAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetDesiredMoveDirection, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000038, "Member 'BP_Character_C_GetDesiredMoveDirection::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetDesiredMoveDirection, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000040, "Member 'BP_Character_C_GetDesiredMoveDirection::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetDesiredMoveDirection, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000058, "Member 'BP_Character_C_GetDesiredMoveDirection::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetDesiredMoveDirection, CallFunc_Add_VectorVector_ReturnValue) == 0x000070, "Member 'BP_Character_C_GetDesiredMoveDirection::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetDesiredMoveDirection, CallFunc_Normal_ReturnValue) == 0x000088, "Member 'BP_Character_C_GetDesiredMoveDirection::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetDesiredMoveDirection, CallFunc_SelectVector_ReturnValue) == 0x0000A0, "Member 'BP_Character_C_GetDesiredMoveDirection::CallFunc_SelectVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetDesiredMoveDirection, CallFunc_ClampVectorSize_ReturnValue) == 0x0000B8, "Member 'BP_Character_C_GetDesiredMoveDirection::CallFunc_ClampVectorSize_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.GetFakeChainSocket
// 0x0008 (0x0008 - 0x0000)
struct BP_Character_C_GetFakeChainSocket final
{
public:
	class USceneComponent*                        Socket;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_GetFakeChainSocket) == 0x000008, "Wrong alignment on BP_Character_C_GetFakeChainSocket");
static_assert(sizeof(BP_Character_C_GetFakeChainSocket) == 0x000008, "Wrong size on BP_Character_C_GetFakeChainSocket");
static_assert(offsetof(BP_Character_C_GetFakeChainSocket, Socket) == 0x000000, "Member 'BP_Character_C_GetFakeChainSocket::Socket' has a wrong offset!");

// Function BP_Character.BP_Character_C.GetHandLocation
// 0x0030 (0x0030 - 0x0000)
struct BP_Character_C_GetHandLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_GetHandLocation) == 0x000008, "Wrong alignment on BP_Character_C_GetHandLocation");
static_assert(sizeof(BP_Character_C_GetHandLocation) == 0x000030, "Wrong size on BP_Character_C_GetHandLocation");
static_assert(offsetof(BP_Character_C_GetHandLocation, Location) == 0x000000, "Member 'BP_Character_C_GetHandLocation::Location' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetHandLocation, CallFunc_GetSocketLocation_ReturnValue) == 0x000018, "Member 'BP_Character_C_GetHandLocation::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.GetIsDetectableByPlacingBlocks
// 0x0001 (0x0001 - 0x0000)
struct BP_Character_C_GetIsDetectableByPlacingBlocks final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_GetIsDetectableByPlacingBlocks) == 0x000001, "Wrong alignment on BP_Character_C_GetIsDetectableByPlacingBlocks");
static_assert(sizeof(BP_Character_C_GetIsDetectableByPlacingBlocks) == 0x000001, "Wrong size on BP_Character_C_GetIsDetectableByPlacingBlocks");
static_assert(offsetof(BP_Character_C_GetIsDetectableByPlacingBlocks, ReturnValue) == 0x000000, "Member 'BP_Character_C_GetIsDetectableByPlacingBlocks::ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.GetIsDriving
// 0x0002 (0x0002 - 0x0000)
struct BP_Character_C_GetIsDriving final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_GetIsDriving) == 0x000001, "Wrong alignment on BP_Character_C_GetIsDriving");
static_assert(sizeof(BP_Character_C_GetIsDriving) == 0x000002, "Wrong size on BP_Character_C_GetIsDriving");
static_assert(offsetof(BP_Character_C_GetIsDriving, ReturnValue) == 0x000000, "Member 'BP_Character_C_GetIsDriving::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetIsDriving, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_Character_C_GetIsDriving::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.GetLastUpdateRotation
// 0x0018 (0x0018 - 0x0000)
struct BP_Character_C_GetLastUpdateRotation final
{
public:
	struct FRotator                               Rot;                                               // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Character_C_GetLastUpdateRotation) == 0x000008, "Wrong alignment on BP_Character_C_GetLastUpdateRotation");
static_assert(sizeof(BP_Character_C_GetLastUpdateRotation) == 0x000018, "Wrong size on BP_Character_C_GetLastUpdateRotation");
static_assert(offsetof(BP_Character_C_GetLastUpdateRotation, Rot) == 0x000000, "Member 'BP_Character_C_GetLastUpdateRotation::Rot' has a wrong offset!");

// Function BP_Character.BP_Character_C.GetMantleAsset
// 0x00D0 (0x00D0 - 0x0000)
struct BP_Character_C_GetMantleAsset final
{
public:
	EMantleType                                   MantleType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3242[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMantle_Asset                          ReturnValue;                                       // 0x0008(0x0040)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
	struct FMantle_Asset                          K2Node_MakeStruct_Mantle_Asset;                    // 0x0048(0x0040)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3243[0x7];                                     // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMantle_Asset                          K2Node_MakeStruct_Mantle_Asset_1;                  // 0x0090(0x0040)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_GetMantleAsset) == 0x000008, "Wrong alignment on BP_Character_C_GetMantleAsset");
static_assert(sizeof(BP_Character_C_GetMantleAsset) == 0x0000D0, "Wrong size on BP_Character_C_GetMantleAsset");
static_assert(offsetof(BP_Character_C_GetMantleAsset, MantleType) == 0x000000, "Member 'BP_Character_C_GetMantleAsset::MantleType' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetMantleAsset, ReturnValue) == 0x000008, "Member 'BP_Character_C_GetMantleAsset::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetMantleAsset, K2Node_MakeStruct_Mantle_Asset) == 0x000048, "Member 'BP_Character_C_GetMantleAsset::K2Node_MakeStruct_Mantle_Asset' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetMantleAsset, K2Node_SwitchEnum_CmpSuccess) == 0x000088, "Member 'BP_Character_C_GetMantleAsset::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetMantleAsset, K2Node_MakeStruct_Mantle_Asset_1) == 0x000090, "Member 'BP_Character_C_GetMantleAsset::K2Node_MakeStruct_Mantle_Asset_1' has a wrong offset!");

// Function BP_Character.BP_Character_C.GetMappedSpeed
// 0x0068 (0x0068 - 0x0000)
struct BP_Character_C_GetMappedSpeed final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LocSprintSpeed;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LocRunSpeed;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LocWalkSpeed;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3244[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_1;            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_2;            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default;                             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_1;                           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_LocWalkSpeed_ImplicitCast;      // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_LocRunSpeed_ImplicitCast;       // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_LocSprintSpeed_ImplicitCast;    // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_GetMappedSpeed) == 0x000008, "Wrong alignment on BP_Character_C_GetMappedSpeed");
static_assert(sizeof(BP_Character_C_GetMappedSpeed) == 0x000068, "Wrong size on BP_Character_C_GetMappedSpeed");
static_assert(offsetof(BP_Character_C_GetMappedSpeed, ReturnValue) == 0x000000, "Member 'BP_Character_C_GetMappedSpeed::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetMappedSpeed, LocSprintSpeed) == 0x000008, "Member 'BP_Character_C_GetMappedSpeed::LocSprintSpeed' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetMappedSpeed, LocRunSpeed) == 0x000010, "Member 'BP_Character_C_GetMappedSpeed::LocRunSpeed' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetMappedSpeed, LocWalkSpeed) == 0x000018, "Member 'BP_Character_C_GetMappedSpeed::LocWalkSpeed' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetMappedSpeed, Temp_bool_Variable) == 0x000020, "Member 'BP_Character_C_GetMappedSpeed::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetMappedSpeed, Temp_bool_Variable_1) == 0x000021, "Member 'BP_Character_C_GetMappedSpeed::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetMappedSpeed, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000022, "Member 'BP_Character_C_GetMappedSpeed::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetMappedSpeed, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000023, "Member 'BP_Character_C_GetMappedSpeed::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetMappedSpeed, CallFunc_MapRangeClamped_ReturnValue) == 0x000028, "Member 'BP_Character_C_GetMappedSpeed::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetMappedSpeed, CallFunc_MapRangeClamped_ReturnValue_1) == 0x000030, "Member 'BP_Character_C_GetMappedSpeed::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetMappedSpeed, CallFunc_MapRangeClamped_ReturnValue_2) == 0x000038, "Member 'BP_Character_C_GetMappedSpeed::CallFunc_MapRangeClamped_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetMappedSpeed, K2Node_Select_Default) == 0x000040, "Member 'BP_Character_C_GetMappedSpeed::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetMappedSpeed, K2Node_Select_Default_1) == 0x000048, "Member 'BP_Character_C_GetMappedSpeed::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetMappedSpeed, K2Node_VariableSet_LocWalkSpeed_ImplicitCast) == 0x000050, "Member 'BP_Character_C_GetMappedSpeed::K2Node_VariableSet_LocWalkSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetMappedSpeed, K2Node_VariableSet_LocRunSpeed_ImplicitCast) == 0x000058, "Member 'BP_Character_C_GetMappedSpeed::K2Node_VariableSet_LocRunSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_GetMappedSpeed, K2Node_VariableSet_LocSprintSpeed_ImplicitCast) == 0x000060, "Member 'BP_Character_C_GetMappedSpeed::K2Node_VariableSet_LocSprintSpeed_ImplicitCast' has a wrong offset!");

// Function BP_Character.BP_Character_C.GetMovementState
// 0x0001 (0x0001 - 0x0000)
struct BP_Character_C_GetMovementState final
{
public:
	EALS_MovementState                            State;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_GetMovementState) == 0x000001, "Wrong alignment on BP_Character_C_GetMovementState");
static_assert(sizeof(BP_Character_C_GetMovementState) == 0x000001, "Wrong size on BP_Character_C_GetMovementState");
static_assert(offsetof(BP_Character_C_GetMovementState, State) == 0x000000, "Member 'BP_Character_C_GetMovementState::State' has a wrong offset!");

// Function BP_Character.BP_Character_C.GetSkeletalMesh
// 0x0008 (0x0008 - 0x0000)
struct BP_Character_C_GetSkeletalMesh final
{
public:
	class USkeletalMeshComponent*                 SKM;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_GetSkeletalMesh) == 0x000008, "Wrong alignment on BP_Character_C_GetSkeletalMesh");
static_assert(sizeof(BP_Character_C_GetSkeletalMesh) == 0x000008, "Wrong size on BP_Character_C_GetSkeletalMesh");
static_assert(offsetof(BP_Character_C_GetSkeletalMesh, SKM) == 0x000000, "Member 'BP_Character_C_GetSkeletalMesh::SKM' has a wrong offset!");

// Function BP_Character.BP_Character_C.GetWalkMagnitude
// 0x0008 (0x0008 - 0x0000)
struct BP_Character_C_GetWalkMagnitude final
{
public:
	double                                        Magnitude;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_GetWalkMagnitude) == 0x000008, "Wrong alignment on BP_Character_C_GetWalkMagnitude");
static_assert(sizeof(BP_Character_C_GetWalkMagnitude) == 0x000008, "Wrong size on BP_Character_C_GetWalkMagnitude");
static_assert(offsetof(BP_Character_C_GetWalkMagnitude, Magnitude) == 0x000000, "Member 'BP_Character_C_GetWalkMagnitude::Magnitude' has a wrong offset!");

// Function BP_Character.BP_Character_C.Handle Movement and Damping
// 0x0878 (0x0878 - 0x0000)
struct BP_Character_C_Handle_Movement_and_Damping final
{
public:
	bool                                          ChaineTendueLocal;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3245[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X;                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3246[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDesiredMoveDirection_ReturnValue;      // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue_1;                      // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue_1;       // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3247[0x4];                                     // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3248[0x4];                                     // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectMoveRightAxis_ReturnValue;          // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectMoveForwardAxis_ReturnValue;        // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectMoveRightAxis_ReturnValue_1;        // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectMoveForwardAxis_ReturnValue_1;      // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ClampVectorSize_ReturnValue;              // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0120(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ClampVectorSize_ReturnValue_1;            // 0x0150(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_2;                          // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_2;                          // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_2;                          // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0188(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_4;      // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x01A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_SelectControlRot_DesiredControlRotation;  // 0x01C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x01D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3249[0x4];                                     // 0x01FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x0200(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0218(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_3;       // 0x0230(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_1;           // 0x0248(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_2;           // 0x0260(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_SelectControlRot_DesiredControlRotation_1; // 0x0278(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_SelectVector_ReturnValue;                 // 0x0290(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue_1;             // 0x02A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_4;       // 0x02C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_5;       // 0x02D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x02F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue_2;       // 0x0308(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_6;       // 0x0310(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0328(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_7;       // 0x0330(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_5;      // 0x0348(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0350(0x0010)(ConstParm, ReferenceParm)
	TArray<class AActor*>                         Temp_object_Variable_1;                            // 0x0360(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_GetPhysicsLinearVelocity_ReturnValue;     // 0x0370(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0388(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_3;                          // 0x03A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_3;                          // 0x03A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_3;                          // 0x03B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDesiredMoveDirection_ReturnValue_1;    // 0x03B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_1;            // 0x03D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ClampVectorSize_ReturnValue_2;            // 0x03D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDesiredMoveDirection_ReturnValue_2;    // 0x03F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_8;       // 0x0408(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_9;       // 0x0420(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VInterpTo_ReturnValue;                    // 0x0438(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x0450(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDesiredMoveDirection_ReturnValue_3;    // 0x0468(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0480(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               CallFunc_TraceVisibility_Result;                   // 0x0498(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_324A[0x7];                                     // 0x0499(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Dot_VectorVector_ReturnValue;             // 0x04A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x04A8(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x0590(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               CallFunc_TraceVisibility_Result_1;                 // 0x0591(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_324B[0x6];                                     // 0x0592(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit_1;                 // 0x0598(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue_1;            // 0x0680(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_324C[0x7];                                     // 0x0681(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_6;      // 0x0688(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_7;      // 0x0690(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0698(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_324D[0x7];                                     // 0x0699(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_10;      // 0x06A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x06B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_324E[0x4];                                     // 0x06BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetPhysicsLinearVelocity_ReturnValue_1;   // 0x06C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ClampVectorSize_ReturnValue_3;            // 0x06D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_4;                          // 0x06F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_4;                          // 0x06F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_4;                          // 0x0700(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_5;                          // 0x0708(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_5;                          // 0x0710(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_5;                          // 0x0718(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x0720(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0738(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0739(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_324F[0x6];                                     // 0x073A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetAllActorsWithInterface_OutActors;      // 0x0740(0x0010)(ReferenceParm)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0750(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0758(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3250[0x4];                                     // 0x075C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_Character_C>      K2Node_DynamicCast_AsBPI_Character;                // 0x0760(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0770(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0771(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0772(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3251[0x1];                                     // 0x0773(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0774(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0778(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_2;            // 0x0780(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_8;      // 0x0788(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_11;      // 0x0790(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x07A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_12;      // 0x07C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue_1;               // 0x07D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue_2;               // 0x07F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue;      // 0x0808(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3252[0x7];                                     // 0x0809(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue_1;                // 0x0810(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_2;                // 0x0818(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x0820(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0838(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3253[0x7];                                     // 0x0839(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_13;      // 0x0840(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_InTime_ImplicitCast;        // 0x0858(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VInterpTo_DeltaTime_ImplicitCast;         // 0x085C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_B_ImplicitCast;     // 0x0860(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_B_ImplicitCast_1;   // 0x0868(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetAngularDamping_InDamping_ImplicitCast; // 0x0870(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetAngularDamping_InDamping_ImplicitCast_1; // 0x0874(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_Handle_Movement_and_Damping) == 0x000008, "Wrong alignment on BP_Character_C_Handle_Movement_and_Damping");
static_assert(sizeof(BP_Character_C_Handle_Movement_and_Damping) == 0x000878, "Wrong size on BP_Character_C_Handle_Movement_and_Damping");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, ChaineTendueLocal) == 0x000000, "Member 'BP_Character_C_Handle_Movement_and_Damping::ChaineTendueLocal' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_BreakVector_X) == 0x000008, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_BreakVector_Y) == 0x000010, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_BreakVector_Z) == 0x000018, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_MapRangeClamped_ReturnValue) == 0x000020, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_VSize_ReturnValue) == 0x000028, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000030, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_GetFloatValue_ReturnValue) == 0x000038, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_IsValid_ReturnValue) == 0x00003C, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_GetForwardVector_ReturnValue) == 0x000040, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_GetDesiredMoveDirection_ReturnValue) == 0x000058, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_GetDesiredMoveDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_VSize_ReturnValue_1) == 0x000070, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000078, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_SelectFloat_ReturnValue) == 0x000080, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_GetRightVector_ReturnValue) == 0x000088, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x0000A0, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_GetWorldDeltaSeconds_ReturnValue_1) == 0x0000A8, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_GetWorldDeltaSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, Temp_int_Loop_Counter_Variable) == 0x0000B0, "Member 'BP_Character_C_Handle_Movement_and_Damping::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x0000B8, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_Add_IntInt_ReturnValue) == 0x0000C0, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x0000C8, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_SelectMoveRightAxis_ReturnValue) == 0x0000D0, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_SelectMoveRightAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_SelectMoveForwardAxis_ReturnValue) == 0x0000D8, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_SelectMoveForwardAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_SelectMoveRightAxis_ReturnValue_1) == 0x0000E0, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_SelectMoveRightAxis_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_MakeVector_ReturnValue) == 0x0000E8, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_SelectMoveForwardAxis_ReturnValue_1) == 0x000100, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_SelectMoveForwardAxis_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_ClampVectorSize_ReturnValue) == 0x000108, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_ClampVectorSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_MakeVector_ReturnValue_1) == 0x000120, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_BreakVector_X_1) == 0x000138, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_BreakVector_Y_1) == 0x000140, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_BreakVector_Z_1) == 0x000148, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_ClampVectorSize_ReturnValue_1) == 0x000150, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_ClampVectorSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x000168, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_BreakVector_X_2) == 0x000170, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_BreakVector_Y_2) == 0x000178, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_BreakVector_Z_2) == 0x000180, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000188, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_Multiply_DoubleDouble_ReturnValue_4) == 0x0001A0, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_Multiply_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x0001A8, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_SelectControlRot_DesiredControlRotation) == 0x0001C0, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_SelectControlRot_DesiredControlRotation' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_Add_VectorVector_ReturnValue) == 0x0001D8, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_BreakRotator_Roll) == 0x0001F0, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_BreakRotator_Pitch) == 0x0001F4, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_BreakRotator_Yaw) == 0x0001F8, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x000200, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_MakeRotator_ReturnValue) == 0x000218, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_Multiply_VectorFloat_ReturnValue_3) == 0x000230, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_Multiply_VectorFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_GetForwardVector_ReturnValue_1) == 0x000248, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_GetForwardVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_GetForwardVector_ReturnValue_2) == 0x000260, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_GetForwardVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_SelectControlRot_DesiredControlRotation_1) == 0x000278, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_SelectControlRot_DesiredControlRotation_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_SelectVector_ReturnValue) == 0x000290, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_SelectVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_GetRightVector_ReturnValue_1) == 0x0002A8, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_GetRightVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_Multiply_VectorFloat_ReturnValue_4) == 0x0002C0, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_Multiply_VectorFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_Multiply_VectorFloat_ReturnValue_5) == 0x0002D8, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_Multiply_VectorFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0002F0, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_GetWorldDeltaSeconds_ReturnValue_2) == 0x000308, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_GetWorldDeltaSeconds_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_Multiply_VectorFloat_ReturnValue_6) == 0x000310, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_Multiply_VectorFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000328, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_Multiply_VectorFloat_ReturnValue_7) == 0x000330, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_Multiply_VectorFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_Multiply_DoubleDouble_ReturnValue_5) == 0x000348, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_Multiply_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, Temp_object_Variable) == 0x000350, "Member 'BP_Character_C_Handle_Movement_and_Damping::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, Temp_object_Variable_1) == 0x000360, "Member 'BP_Character_C_Handle_Movement_and_Damping::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_GetPhysicsLinearVelocity_ReturnValue) == 0x000370, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_GetPhysicsLinearVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000388, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_BreakVector_X_3) == 0x0003A0, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_BreakVector_Y_3) == 0x0003A8, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_BreakVector_Z_3) == 0x0003B0, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_GetDesiredMoveDirection_ReturnValue_1) == 0x0003B8, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_GetDesiredMoveDirection_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_MapRangeClamped_ReturnValue_1) == 0x0003D0, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_ClampVectorSize_ReturnValue_2) == 0x0003D8, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_ClampVectorSize_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_GetDesiredMoveDirection_ReturnValue_2) == 0x0003F0, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_GetDesiredMoveDirection_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_Multiply_VectorFloat_ReturnValue_8) == 0x000408, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_Multiply_VectorFloat_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_Multiply_VectorFloat_ReturnValue_9) == 0x000420, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_Multiply_VectorFloat_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_VInterpTo_ReturnValue) == 0x000438, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_VInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_Add_VectorVector_ReturnValue_2) == 0x000450, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_GetDesiredMoveDirection_ReturnValue_3) == 0x000468, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_GetDesiredMoveDirection_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_Normal_ReturnValue) == 0x000480, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_TraceVisibility_Result) == 0x000498, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_TraceVisibility_Result' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_Dot_VectorVector_ReturnValue) == 0x0004A0, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_LineTraceSingle_OutHit) == 0x0004A8, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_LineTraceSingle_ReturnValue) == 0x000590, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_TraceVisibility_Result_1) == 0x000591, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_TraceVisibility_Result_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_LineTraceSingle_OutHit_1) == 0x000598, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_LineTraceSingle_OutHit_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_LineTraceSingle_ReturnValue_1) == 0x000680, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_LineTraceSingle_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_Multiply_DoubleDouble_ReturnValue_6) == 0x000688, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_Multiply_DoubleDouble_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_Multiply_DoubleDouble_ReturnValue_7) == 0x000690, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_Multiply_DoubleDouble_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000698, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_Multiply_VectorFloat_ReturnValue_10) == 0x0006A0, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_Multiply_VectorFloat_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, Temp_int_Array_Index_Variable) == 0x0006B8, "Member 'BP_Character_C_Handle_Movement_and_Damping::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_GetPhysicsLinearVelocity_ReturnValue_1) == 0x0006C0, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_GetPhysicsLinearVelocity_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_ClampVectorSize_ReturnValue_3) == 0x0006D8, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_ClampVectorSize_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_BreakVector_X_4) == 0x0006F0, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_BreakVector_X_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_BreakVector_Y_4) == 0x0006F8, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_BreakVector_Y_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_BreakVector_Z_4) == 0x000700, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_BreakVector_Z_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_BreakVector_X_5) == 0x000708, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_BreakVector_X_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_BreakVector_Y_5) == 0x000710, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_BreakVector_Y_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_BreakVector_Z_5) == 0x000718, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_BreakVector_Z_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_MakeVector_ReturnValue_2) == 0x000720, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_IsValid_ReturnValue_1) == 0x000738, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, K2Node_SwitchEnum_CmpSuccess) == 0x000739, "Member 'BP_Character_C_Handle_Movement_and_Damping::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_GetAllActorsWithInterface_OutActors) == 0x000740, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_GetAllActorsWithInterface_OutActors' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_Array_Get_Item) == 0x000750, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_Array_Length_ReturnValue) == 0x000758, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, K2Node_DynamicCast_AsBPI_Character) == 0x000760, "Member 'BP_Character_C_Handle_Movement_and_Damping::K2Node_DynamicCast_AsBPI_Character' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, K2Node_DynamicCast_bSuccess) == 0x000770, "Member 'BP_Character_C_Handle_Movement_and_Damping::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_Less_IntInt_ReturnValue) == 0x000771, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000772, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_Array_Length_ReturnValue_1) == 0x000774, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000778, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_MapRangeClamped_ReturnValue_2) == 0x000780, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_MapRangeClamped_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_Multiply_DoubleDouble_ReturnValue_8) == 0x000788, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_Multiply_DoubleDouble_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_Multiply_VectorFloat_ReturnValue_11) == 0x000790, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_Multiply_VectorFloat_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0007A8, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_Multiply_VectorFloat_ReturnValue_12) == 0x0007C0, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_Multiply_VectorFloat_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_SelectVector_ReturnValue_1) == 0x0007D8, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_SelectVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_SelectVector_ReturnValue_2) == 0x0007F0, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_SelectVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_EqualEqual_VectorVector_ReturnValue) == 0x000808, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_EqualEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_SelectFloat_ReturnValue_1) == 0x000810, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_SelectFloat_ReturnValue_2) == 0x000818, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_SelectFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x000820, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000838, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_Multiply_VectorFloat_ReturnValue_13) == 0x000840, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_Multiply_VectorFloat_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_GetFloatValue_InTime_ImplicitCast) == 0x000858, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_GetFloatValue_InTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_VInterpTo_DeltaTime_ImplicitCast) == 0x00085C, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_VInterpTo_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_Multiply_DoubleDouble_B_ImplicitCast) == 0x000860, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_Multiply_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_Multiply_DoubleDouble_B_ImplicitCast_1) == 0x000868, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_Multiply_DoubleDouble_B_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_SetAngularDamping_InDamping_ImplicitCast) == 0x000870, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_SetAngularDamping_InDamping_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Handle_Movement_and_Damping, CallFunc_SetAngularDamping_InDamping_ImplicitCast_1) == 0x000874, "Member 'BP_Character_C_Handle_Movement_and_Damping::CallFunc_SetAngularDamping_InDamping_ImplicitCast_1' has a wrong offset!");

// Function BP_Character.BP_Character_C.HandSplash
// 0x0001 (0x0001 - 0x0000)
struct BP_Character_C_HandSplash final
{
public:
	bool                                          RightHand;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_HandSplash) == 0x000001, "Wrong alignment on BP_Character_C_HandSplash");
static_assert(sizeof(BP_Character_C_HandSplash) == 0x000001, "Wrong size on BP_Character_C_HandSplash");
static_assert(offsetof(BP_Character_C_HandSplash, RightHand) == 0x000000, "Member 'BP_Character_C_HandSplash::RightHand' has a wrong offset!");

// Function BP_Character.BP_Character_C.ImproveFail
// 0x01F0 (0x01F0 - 0x0000)
struct BP_Character_C_ImproveFail final
{
public:
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3254[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_UpdateSpeedByPlayersNumber_ReturnSpeed;   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_UpdateSpeedByPlayersNumber_ReturnSpeed_1; // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCloseToGround_ReturnValue;              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3255[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3256[0x6];                                     // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_Array_Get_Item;                           // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Character_C>      K2Node_DynamicCast_AsBPI_Character;                // 0x0098(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3257[0x7];                                     // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_Character_C>      K2Node_DynamicCast_AsBPI_Character_1;              // 0x00B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsClimbing_ReturnValue;                   // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPulling_Pulling;                        // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3258[0x5];                                     // 0x00C3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_Character_C>      K2Node_DynamicCast_AsBPI_Character_2;              // 0x00C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3259[0x7];                                     // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Character_C*                        K2Node_DynamicCast_AsBP_Character;                 // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGrounded_Grounded;                      // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_325A[0x6];                                     // 0x00EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_2;                          // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_2;                          // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_2;                          // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0150(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0174(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0175(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_325B[0x2];                                     // 0x0176(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_3;        // 0x0178(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_3;                          // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_3;                          // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_3;                          // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x01A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDirectionUnitVector_ReturnValue;       // 0x01C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x01D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_ImproveFail) == 0x000008, "Wrong alignment on BP_Character_C_ImproveFail");
static_assert(sizeof(BP_Character_C_ImproveFail) == 0x0001F0, "Wrong size on BP_Character_C_ImproveFail");
static_assert(offsetof(BP_Character_C_ImproveFail, Temp_int_Loop_Counter_Variable) == 0x000000, "Member 'BP_Character_C_ImproveFail::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'BP_Character_C_ImproveFail::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_Character_C_ImproveFail::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, CallFunc_UpdateSpeedByPlayersNumber_ReturnSpeed) == 0x000010, "Member 'BP_Character_C_ImproveFail::CallFunc_UpdateSpeedByPlayersNumber_ReturnSpeed' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, CallFunc_MakeVector_ReturnValue) == 0x000018, "Member 'BP_Character_C_ImproveFail::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, CallFunc_UpdateSpeedByPlayersNumber_ReturnSpeed_1) == 0x000030, "Member 'BP_Character_C_ImproveFail::CallFunc_UpdateSpeedByPlayersNumber_ReturnSpeed_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, CallFunc_IsCloseToGround_ReturnValue) == 0x000038, "Member 'BP_Character_C_ImproveFail::CallFunc_IsCloseToGround_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000040, "Member 'BP_Character_C_ImproveFail::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, Temp_bool_Has_Been_Initd_Variable) == 0x000058, "Member 'BP_Character_C_ImproveFail::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, Temp_bool_IsClosed_Variable) == 0x000059, "Member 'BP_Character_C_ImproveFail::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000060, "Member 'BP_Character_C_ImproveFail::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, CallFunc_Array_Get_Item) == 0x000078, "Member 'BP_Character_C_ImproveFail::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, CallFunc_BreakVector_X) == 0x000080, "Member 'BP_Character_C_ImproveFail::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, CallFunc_BreakVector_Y) == 0x000088, "Member 'BP_Character_C_ImproveFail::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, CallFunc_BreakVector_Z) == 0x000090, "Member 'BP_Character_C_ImproveFail::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, K2Node_DynamicCast_AsBPI_Character) == 0x000098, "Member 'BP_Character_C_ImproveFail::K2Node_DynamicCast_AsBPI_Character' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, K2Node_DynamicCast_bSuccess) == 0x0000A8, "Member 'BP_Character_C_ImproveFail::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, K2Node_DynamicCast_AsBPI_Character_1) == 0x0000B0, "Member 'BP_Character_C_ImproveFail::K2Node_DynamicCast_AsBPI_Character_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, K2Node_DynamicCast_bSuccess_1) == 0x0000C0, "Member 'BP_Character_C_ImproveFail::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, CallFunc_IsClimbing_ReturnValue) == 0x0000C1, "Member 'BP_Character_C_ImproveFail::CallFunc_IsClimbing_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, CallFunc_IsPulling_Pulling) == 0x0000C2, "Member 'BP_Character_C_ImproveFail::CallFunc_IsPulling_Pulling' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, K2Node_DynamicCast_AsBPI_Character_2) == 0x0000C8, "Member 'BP_Character_C_ImproveFail::K2Node_DynamicCast_AsBPI_Character_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, K2Node_DynamicCast_bSuccess_2) == 0x0000D8, "Member 'BP_Character_C_ImproveFail::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, K2Node_DynamicCast_AsBP_Character) == 0x0000E0, "Member 'BP_Character_C_ImproveFail::K2Node_DynamicCast_AsBP_Character' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, K2Node_DynamicCast_bSuccess_3) == 0x0000E8, "Member 'BP_Character_C_ImproveFail::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, CallFunc_IsGrounded_Grounded) == 0x0000E9, "Member 'BP_Character_C_ImproveFail::CallFunc_IsGrounded_Grounded' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x0000F0, "Member 'BP_Character_C_ImproveFail::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x000108, "Member 'BP_Character_C_ImproveFail::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, CallFunc_BreakVector_X_1) == 0x000120, "Member 'BP_Character_C_ImproveFail::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, CallFunc_BreakVector_Y_1) == 0x000128, "Member 'BP_Character_C_ImproveFail::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, CallFunc_BreakVector_Z_1) == 0x000130, "Member 'BP_Character_C_ImproveFail::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, CallFunc_BreakVector_X_2) == 0x000138, "Member 'BP_Character_C_ImproveFail::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, CallFunc_BreakVector_Y_2) == 0x000140, "Member 'BP_Character_C_ImproveFail::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, CallFunc_BreakVector_Z_2) == 0x000148, "Member 'BP_Character_C_ImproveFail::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, CallFunc_MakeVector_ReturnValue_1) == 0x000150, "Member 'BP_Character_C_ImproveFail::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000168, "Member 'BP_Character_C_ImproveFail::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, CallFunc_Array_Length_ReturnValue) == 0x000170, "Member 'BP_Character_C_ImproveFail::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000174, "Member 'BP_Character_C_ImproveFail::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, CallFunc_Less_IntInt_ReturnValue) == 0x000175, "Member 'BP_Character_C_ImproveFail::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, CallFunc_K2_GetActorLocation_ReturnValue_3) == 0x000178, "Member 'BP_Character_C_ImproveFail::CallFunc_K2_GetActorLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, CallFunc_BreakVector_X_3) == 0x000190, "Member 'BP_Character_C_ImproveFail::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, CallFunc_BreakVector_Y_3) == 0x000198, "Member 'BP_Character_C_ImproveFail::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, CallFunc_BreakVector_Z_3) == 0x0001A0, "Member 'BP_Character_C_ImproveFail::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, CallFunc_MakeVector_ReturnValue_2) == 0x0001A8, "Member 'BP_Character_C_ImproveFail::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, CallFunc_GetDirectionUnitVector_ReturnValue) == 0x0001C0, "Member 'BP_Character_C_ImproveFail::CallFunc_GetDirectionUnitVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ImproveFail, CallFunc_Multiply_VectorVector_ReturnValue) == 0x0001D8, "Member 'BP_Character_C_ImproveFail::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.IsBeingAttracted
// 0x0002 (0x0002 - 0x0000)
struct BP_Character_C_IsBeingAttracted final
{
public:
	bool                                          Attracted;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_IsBeingAttracted) == 0x000001, "Wrong alignment on BP_Character_C_IsBeingAttracted");
static_assert(sizeof(BP_Character_C_IsBeingAttracted) == 0x000002, "Wrong size on BP_Character_C_IsBeingAttracted");
static_assert(offsetof(BP_Character_C_IsBeingAttracted, Attracted) == 0x000000, "Member 'BP_Character_C_IsBeingAttracted::Attracted' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsBeingAttracted, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_Character_C_IsBeingAttracted::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.IsChained
// 0x0001 (0x0001 - 0x0000)
struct BP_Character_C_IsChained final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_IsChained) == 0x000001, "Wrong alignment on BP_Character_C_IsChained");
static_assert(sizeof(BP_Character_C_IsChained) == 0x000001, "Wrong size on BP_Character_C_IsChained");
static_assert(offsetof(BP_Character_C_IsChained, ReturnValue) == 0x000000, "Member 'BP_Character_C_IsChained::ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.IsClimbing
// 0x0001 (0x0001 - 0x0000)
struct BP_Character_C_IsClimbing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_IsClimbing) == 0x000001, "Wrong alignment on BP_Character_C_IsClimbing");
static_assert(sizeof(BP_Character_C_IsClimbing) == 0x000001, "Wrong size on BP_Character_C_IsClimbing");
static_assert(offsetof(BP_Character_C_IsClimbing, ReturnValue) == 0x000000, "Member 'BP_Character_C_IsClimbing::ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.IsCloseToGround
// 0x0138 (0x0138 - 0x0000)
struct BP_Character_C_IsCloseToGround final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_325C[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0008(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_SphereTraceSingle_OutHit;                 // 0x0048(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingle_ReturnValue;            // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_IsCloseToGround) == 0x000008, "Wrong alignment on BP_Character_C_IsCloseToGround");
static_assert(sizeof(BP_Character_C_IsCloseToGround) == 0x000138, "Wrong size on BP_Character_C_IsCloseToGround");
static_assert(offsetof(BP_Character_C_IsCloseToGround, ReturnValue) == 0x000000, "Member 'BP_Character_C_IsCloseToGround::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsCloseToGround, Temp_object_Variable) == 0x000008, "Member 'BP_Character_C_IsCloseToGround::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsCloseToGround, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'BP_Character_C_IsCloseToGround::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsCloseToGround, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000030, "Member 'BP_Character_C_IsCloseToGround::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsCloseToGround, CallFunc_SphereTraceSingle_OutHit) == 0x000048, "Member 'BP_Character_C_IsCloseToGround::CallFunc_SphereTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsCloseToGround, CallFunc_SphereTraceSingle_ReturnValue) == 0x000130, "Member 'BP_Character_C_IsCloseToGround::CallFunc_SphereTraceSingle_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.IsGrounded
// 0x0001 (0x0001 - 0x0000)
struct BP_Character_C_IsGrounded final
{
public:
	bool                                          Param_Grounded;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_IsGrounded) == 0x000001, "Wrong alignment on BP_Character_C_IsGrounded");
static_assert(sizeof(BP_Character_C_IsGrounded) == 0x000001, "Wrong size on BP_Character_C_IsGrounded");
static_assert(offsetof(BP_Character_C_IsGrounded, Param_Grounded) == 0x000000, "Member 'BP_Character_C_IsGrounded::Param_Grounded' has a wrong offset!");

// Function BP_Character.BP_Character_C.IsInCinematicMode
// 0x0001 (0x0001 - 0x0000)
struct BP_Character_C_IsInCinematicMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_IsInCinematicMode) == 0x000001, "Wrong alignment on BP_Character_C_IsInCinematicMode");
static_assert(sizeof(BP_Character_C_IsInCinematicMode) == 0x000001, "Wrong size on BP_Character_C_IsInCinematicMode");
static_assert(offsetof(BP_Character_C_IsInCinematicMode, ReturnValue) == 0x000000, "Member 'BP_Character_C_IsInCinematicMode::ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.IsOnTyrolienne
// 0x0002 (0x0002 - 0x0000)
struct BP_Character_C_IsOnTyrolienne final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_IsOnTyrolienne) == 0x000001, "Wrong alignment on BP_Character_C_IsOnTyrolienne");
static_assert(sizeof(BP_Character_C_IsOnTyrolienne) == 0x000002, "Wrong size on BP_Character_C_IsOnTyrolienne");
static_assert(offsetof(BP_Character_C_IsOnTyrolienne, ReturnValue) == 0x000000, "Member 'BP_Character_C_IsOnTyrolienne::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsOnTyrolienne, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_Character_C_IsOnTyrolienne::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.IsPulling
// 0x0002 (0x0002 - 0x0000)
struct BP_Character_C_IsPulling final
{
public:
	bool                                          Pulling;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_IsPulling) == 0x000001, "Wrong alignment on BP_Character_C_IsPulling");
static_assert(sizeof(BP_Character_C_IsPulling) == 0x000002, "Wrong size on BP_Character_C_IsPulling");
static_assert(offsetof(BP_Character_C_IsPulling, Pulling) == 0x000000, "Member 'BP_Character_C_IsPulling::Pulling' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsPulling, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_Character_C_IsPulling::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.IsSomeoneStuckFalling
// 0x0070 (0x0070 - 0x0000)
struct BP_Character_C_IsSomeoneStuckFalling final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_325D[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_Character_C*>                CallFunc_GetAllActorsOfClass_OutActors;            // 0x0010(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_325E[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Character_C*                        CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_325F[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue;           // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_IsSomeoneStuckFalling) == 0x000008, "Wrong alignment on BP_Character_C_IsSomeoneStuckFalling");
static_assert(sizeof(BP_Character_C_IsSomeoneStuckFalling) == 0x000070, "Wrong size on BP_Character_C_IsSomeoneStuckFalling");
static_assert(offsetof(BP_Character_C_IsSomeoneStuckFalling, ReturnValue) == 0x000000, "Member 'BP_Character_C_IsSomeoneStuckFalling::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsSomeoneStuckFalling, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_Character_C_IsSomeoneStuckFalling::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsSomeoneStuckFalling, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BP_Character_C_IsSomeoneStuckFalling::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsSomeoneStuckFalling, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_Character_C_IsSomeoneStuckFalling::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsSomeoneStuckFalling, CallFunc_GetAllActorsOfClass_OutActors) == 0x000010, "Member 'BP_Character_C_IsSomeoneStuckFalling::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsSomeoneStuckFalling, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_Character_C_IsSomeoneStuckFalling::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsSomeoneStuckFalling, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_Character_C_IsSomeoneStuckFalling::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsSomeoneStuckFalling, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'BP_Character_C_IsSomeoneStuckFalling::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsSomeoneStuckFalling, CallFunc_GetVelocity_ReturnValue) == 0x000038, "Member 'BP_Character_C_IsSomeoneStuckFalling::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsSomeoneStuckFalling, CallFunc_BreakVector_X) == 0x000050, "Member 'BP_Character_C_IsSomeoneStuckFalling::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsSomeoneStuckFalling, CallFunc_BreakVector_Y) == 0x000058, "Member 'BP_Character_C_IsSomeoneStuckFalling::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsSomeoneStuckFalling, CallFunc_BreakVector_Z) == 0x000060, "Member 'BP_Character_C_IsSomeoneStuckFalling::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsSomeoneStuckFalling, CallFunc_InRange_FloatFloat_ReturnValue) == 0x000068, "Member 'BP_Character_C_IsSomeoneStuckFalling::CallFunc_InRange_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsSomeoneStuckFalling, CallFunc_Not_PreBool_ReturnValue) == 0x000069, "Member 'BP_Character_C_IsSomeoneStuckFalling::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsSomeoneStuckFalling, CallFunc_BooleanAND_ReturnValue) == 0x00006A, "Member 'BP_Character_C_IsSomeoneStuckFalling::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.IsSwimming
// 0x0001 (0x0001 - 0x0000)
struct BP_Character_C_IsSwimming final
{
public:
	bool                                          Param_Swim;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_IsSwimming) == 0x000001, "Wrong alignment on BP_Character_C_IsSwimming");
static_assert(sizeof(BP_Character_C_IsSwimming) == 0x000001, "Wrong size on BP_Character_C_IsSwimming");
static_assert(offsetof(BP_Character_C_IsSwimming, Param_Swim) == 0x000000, "Member 'BP_Character_C_IsSwimming::Param_Swim' has a wrong offset!");

// Function BP_Character.BP_Character_C.IsWalkableSurface
// 0x01E0 (0x01E0 - 0x0000)
struct BP_Character_C_IsWalkableSurface final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x00E8)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x00E8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3260[0x1];                                     // 0x00EB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3261[0x4];                                     // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0110(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0128(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0140(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0158(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0160(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0168(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3262[0x4];                                     // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0190(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_IsWalkableSurface) == 0x000008, "Wrong alignment on BP_Character_C_IsWalkableSurface");
static_assert(sizeof(BP_Character_C_IsWalkableSurface) == 0x0001E0, "Wrong size on BP_Character_C_IsWalkableSurface");
static_assert(offsetof(BP_Character_C_IsWalkableSurface, Hit) == 0x000000, "Member 'BP_Character_C_IsWalkableSurface::Hit' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsWalkableSurface, ReturnValue) == 0x0000E8, "Member 'BP_Character_C_IsWalkableSurface::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsWalkableSurface, CallFunc_BreakHitResult_bBlockingHit) == 0x0000E9, "Member 'BP_Character_C_IsWalkableSurface::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsWalkableSurface, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000EA, "Member 'BP_Character_C_IsWalkableSurface::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsWalkableSurface, CallFunc_BreakHitResult_Time) == 0x0000EC, "Member 'BP_Character_C_IsWalkableSurface::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsWalkableSurface, CallFunc_BreakHitResult_Distance) == 0x0000F0, "Member 'BP_Character_C_IsWalkableSurface::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsWalkableSurface, CallFunc_BreakHitResult_Location) == 0x0000F8, "Member 'BP_Character_C_IsWalkableSurface::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsWalkableSurface, CallFunc_BreakHitResult_ImpactPoint) == 0x000110, "Member 'BP_Character_C_IsWalkableSurface::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsWalkableSurface, CallFunc_BreakHitResult_Normal) == 0x000128, "Member 'BP_Character_C_IsWalkableSurface::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsWalkableSurface, CallFunc_BreakHitResult_ImpactNormal) == 0x000140, "Member 'BP_Character_C_IsWalkableSurface::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsWalkableSurface, CallFunc_BreakHitResult_PhysMat) == 0x000158, "Member 'BP_Character_C_IsWalkableSurface::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsWalkableSurface, CallFunc_BreakHitResult_HitActor) == 0x000160, "Member 'BP_Character_C_IsWalkableSurface::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsWalkableSurface, CallFunc_BreakHitResult_HitComponent) == 0x000168, "Member 'BP_Character_C_IsWalkableSurface::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsWalkableSurface, CallFunc_BreakHitResult_HitBoneName) == 0x000170, "Member 'BP_Character_C_IsWalkableSurface::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsWalkableSurface, CallFunc_BreakHitResult_BoneName) == 0x000178, "Member 'BP_Character_C_IsWalkableSurface::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsWalkableSurface, CallFunc_BreakHitResult_HitItem) == 0x000180, "Member 'BP_Character_C_IsWalkableSurface::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsWalkableSurface, CallFunc_BreakHitResult_ElementIndex) == 0x000184, "Member 'BP_Character_C_IsWalkableSurface::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsWalkableSurface, CallFunc_BreakHitResult_FaceIndex) == 0x000188, "Member 'BP_Character_C_IsWalkableSurface::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsWalkableSurface, CallFunc_BreakHitResult_TraceStart) == 0x000190, "Member 'BP_Character_C_IsWalkableSurface::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsWalkableSurface, CallFunc_BreakHitResult_TraceEnd) == 0x0001A8, "Member 'BP_Character_C_IsWalkableSurface::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsWalkableSurface, CallFunc_BreakVector_X) == 0x0001C0, "Member 'BP_Character_C_IsWalkableSurface::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsWalkableSurface, CallFunc_BreakVector_Y) == 0x0001C8, "Member 'BP_Character_C_IsWalkableSurface::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsWalkableSurface, CallFunc_BreakVector_Z) == 0x0001D0, "Member 'BP_Character_C_IsWalkableSurface::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Character_C_IsWalkableSurface, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0001D8, "Member 'BP_Character_C_IsWalkableSurface::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.Jump
// 0x0118 (0x0118 - 0x0000)
struct BP_Character_C_Jump final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3263[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CallFunc_SpawnSoundAtLocation_ReturnValue;         // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3264[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_ChainPhysics_C>   K2Node_DynamicCast_AsBPI_Chain_Physics;            // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3265[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3266[0x3];                                     // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetPhysicsLinearVelocity_ReturnValue;     // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetPhysicsLinearVelocity_ReturnValue_1;   // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IALS_Animation_BPI_C>  K2Node_DynamicCast_AsALS_Animation_BPI;            // 0x0100(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_Jump) == 0x000008, "Wrong alignment on BP_Character_C_Jump");
static_assert(sizeof(BP_Character_C_Jump) == 0x000118, "Wrong size on BP_Character_C_Jump");
static_assert(offsetof(BP_Character_C_Jump, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_Character_C_Jump::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Jump, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000008, "Member 'BP_Character_C_Jump::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Jump, CallFunc_SpawnSoundAtLocation_ReturnValue) == 0x000020, "Member 'BP_Character_C_Jump::CallFunc_SpawnSoundAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Jump, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'BP_Character_C_Jump::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Jump, CallFunc_Array_Get_Item) == 0x000030, "Member 'BP_Character_C_Jump::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Jump, K2Node_DynamicCast_AsBPI_Chain_Physics) == 0x000038, "Member 'BP_Character_C_Jump::K2Node_DynamicCast_AsBPI_Chain_Physics' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Jump, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'BP_Character_C_Jump::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Jump, CallFunc_Add_IntInt_ReturnValue) == 0x00004C, "Member 'BP_Character_C_Jump::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Jump, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'BP_Character_C_Jump::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Jump, CallFunc_Less_IntInt_ReturnValue) == 0x000054, "Member 'BP_Character_C_Jump::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Jump, CallFunc_GetPhysicsLinearVelocity_ReturnValue) == 0x000058, "Member 'BP_Character_C_Jump::CallFunc_GetPhysicsLinearVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Jump, CallFunc_BreakVector_X) == 0x000070, "Member 'BP_Character_C_Jump::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Jump, CallFunc_BreakVector_Y) == 0x000078, "Member 'BP_Character_C_Jump::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Jump, CallFunc_BreakVector_Z) == 0x000080, "Member 'BP_Character_C_Jump::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Jump, CallFunc_GetPhysicsLinearVelocity_ReturnValue_1) == 0x000088, "Member 'BP_Character_C_Jump::CallFunc_GetPhysicsLinearVelocity_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Jump, CallFunc_MakeVector_ReturnValue) == 0x0000A0, "Member 'BP_Character_C_Jump::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Jump, CallFunc_BreakVector_X_1) == 0x0000B8, "Member 'BP_Character_C_Jump::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Jump, CallFunc_BreakVector_Y_1) == 0x0000C0, "Member 'BP_Character_C_Jump::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Jump, CallFunc_BreakVector_Z_1) == 0x0000C8, "Member 'BP_Character_C_Jump::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Jump, CallFunc_MakeVector_ReturnValue_1) == 0x0000D0, "Member 'BP_Character_C_Jump::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Jump, CallFunc_MakeVector_ReturnValue_2) == 0x0000E8, "Member 'BP_Character_C_Jump::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Jump, K2Node_DynamicCast_AsALS_Animation_BPI) == 0x000100, "Member 'BP_Character_C_Jump::K2Node_DynamicCast_AsALS_Animation_BPI' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Jump, K2Node_DynamicCast_bSuccess_1) == 0x000110, "Member 'BP_Character_C_Jump::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function BP_Character.BP_Character_C.JumpTraceHits
// 0x0218 (0x0218 - 0x0000)
struct BP_Character_C_JumpTraceHits final
{
public:
	TArray<struct FHitResult>                     Array;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          Good;                                              // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3267[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_Array_Get_Item;                           // 0x0020(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3268[0x2];                                     // 0x010A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3269[0x4];                                     // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0118(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0130(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0148(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0160(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0178(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0180(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0188(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_326A[0x4];                                     // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_326B[0x7];                                     // 0x01E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x01E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0214(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_JumpTraceHits) == 0x000008, "Wrong alignment on BP_Character_C_JumpTraceHits");
static_assert(sizeof(BP_Character_C_JumpTraceHits) == 0x000218, "Wrong size on BP_Character_C_JumpTraceHits");
static_assert(offsetof(BP_Character_C_JumpTraceHits, Array) == 0x000000, "Member 'BP_Character_C_JumpTraceHits::Array' has a wrong offset!");
static_assert(offsetof(BP_Character_C_JumpTraceHits, Good) == 0x000010, "Member 'BP_Character_C_JumpTraceHits::Good' has a wrong offset!");
static_assert(offsetof(BP_Character_C_JumpTraceHits, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'BP_Character_C_JumpTraceHits::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_JumpTraceHits, Temp_int_Array_Index_Variable) == 0x000018, "Member 'BP_Character_C_JumpTraceHits::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_JumpTraceHits, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'BP_Character_C_JumpTraceHits::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_JumpTraceHits, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_Character_C_JumpTraceHits::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Character_C_JumpTraceHits, CallFunc_BreakHitResult_bBlockingHit) == 0x000108, "Member 'BP_Character_C_JumpTraceHits::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_Character_C_JumpTraceHits, CallFunc_BreakHitResult_bInitialOverlap) == 0x000109, "Member 'BP_Character_C_JumpTraceHits::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_Character_C_JumpTraceHits, CallFunc_BreakHitResult_Time) == 0x00010C, "Member 'BP_Character_C_JumpTraceHits::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_Character_C_JumpTraceHits, CallFunc_BreakHitResult_Distance) == 0x000110, "Member 'BP_Character_C_JumpTraceHits::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_Character_C_JumpTraceHits, CallFunc_BreakHitResult_Location) == 0x000118, "Member 'BP_Character_C_JumpTraceHits::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_Character_C_JumpTraceHits, CallFunc_BreakHitResult_ImpactPoint) == 0x000130, "Member 'BP_Character_C_JumpTraceHits::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_Character_C_JumpTraceHits, CallFunc_BreakHitResult_Normal) == 0x000148, "Member 'BP_Character_C_JumpTraceHits::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_Character_C_JumpTraceHits, CallFunc_BreakHitResult_ImpactNormal) == 0x000160, "Member 'BP_Character_C_JumpTraceHits::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_Character_C_JumpTraceHits, CallFunc_BreakHitResult_PhysMat) == 0x000178, "Member 'BP_Character_C_JumpTraceHits::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_Character_C_JumpTraceHits, CallFunc_BreakHitResult_HitActor) == 0x000180, "Member 'BP_Character_C_JumpTraceHits::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_Character_C_JumpTraceHits, CallFunc_BreakHitResult_HitComponent) == 0x000188, "Member 'BP_Character_C_JumpTraceHits::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Character_C_JumpTraceHits, CallFunc_BreakHitResult_HitBoneName) == 0x000190, "Member 'BP_Character_C_JumpTraceHits::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_Character_C_JumpTraceHits, CallFunc_BreakHitResult_BoneName) == 0x000198, "Member 'BP_Character_C_JumpTraceHits::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BP_Character_C_JumpTraceHits, CallFunc_BreakHitResult_HitItem) == 0x0001A0, "Member 'BP_Character_C_JumpTraceHits::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_Character_C_JumpTraceHits, CallFunc_BreakHitResult_ElementIndex) == 0x0001A4, "Member 'BP_Character_C_JumpTraceHits::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_Character_C_JumpTraceHits, CallFunc_BreakHitResult_FaceIndex) == 0x0001A8, "Member 'BP_Character_C_JumpTraceHits::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_Character_C_JumpTraceHits, CallFunc_BreakHitResult_TraceStart) == 0x0001B0, "Member 'BP_Character_C_JumpTraceHits::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_Character_C_JumpTraceHits, CallFunc_BreakHitResult_TraceEnd) == 0x0001C8, "Member 'BP_Character_C_JumpTraceHits::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_Character_C_JumpTraceHits, CallFunc_Less_IntInt_ReturnValue) == 0x0001E0, "Member 'BP_Character_C_JumpTraceHits::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_JumpTraceHits, CallFunc_GetDisplayName_ReturnValue) == 0x0001E8, "Member 'BP_Character_C_JumpTraceHits::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_JumpTraceHits, CallFunc_BreakVector_X) == 0x0001F8, "Member 'BP_Character_C_JumpTraceHits::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Character_C_JumpTraceHits, CallFunc_BreakVector_Y) == 0x000200, "Member 'BP_Character_C_JumpTraceHits::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Character_C_JumpTraceHits, CallFunc_BreakVector_Z) == 0x000208, "Member 'BP_Character_C_JumpTraceHits::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Character_C_JumpTraceHits, CallFunc_Add_IntInt_ReturnValue) == 0x000210, "Member 'BP_Character_C_JumpTraceHits::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_JumpTraceHits, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000214, "Member 'BP_Character_C_JumpTraceHits::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.LimitRotation
// 0x00F0 (0x00F0 - 0x0000)
struct BP_Character_C_LimitRotation final
{
public:
	double                                        AimYawMin;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AimYawMax;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InterpSpeed;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_SelectControlRot_DesiredControlRotation;  // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_326C[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_SelectControlRot_DesiredControlRotation_1; // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue;           // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x00A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_326D[0x2];                                     // 0x00A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast_1;        // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_InRange_FloatFloat_Value_ImplicitCast;    // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_LimitRotation) == 0x000008, "Wrong alignment on BP_Character_C_LimitRotation");
static_assert(sizeof(BP_Character_C_LimitRotation) == 0x0000F0, "Wrong size on BP_Character_C_LimitRotation");
static_assert(offsetof(BP_Character_C_LimitRotation, AimYawMin) == 0x000000, "Member 'BP_Character_C_LimitRotation::AimYawMin' has a wrong offset!");
static_assert(offsetof(BP_Character_C_LimitRotation, AimYawMax) == 0x000008, "Member 'BP_Character_C_LimitRotation::AimYawMax' has a wrong offset!");
static_assert(offsetof(BP_Character_C_LimitRotation, InterpSpeed) == 0x000010, "Member 'BP_Character_C_LimitRotation::InterpSpeed' has a wrong offset!");
static_assert(offsetof(BP_Character_C_LimitRotation, CallFunc_SelectControlRot_DesiredControlRotation) == 0x000018, "Member 'BP_Character_C_LimitRotation::CallFunc_SelectControlRot_DesiredControlRotation' has a wrong offset!");
static_assert(offsetof(BP_Character_C_LimitRotation, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000030, "Member 'BP_Character_C_LimitRotation::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_LimitRotation, CallFunc_BreakRotator_Roll) == 0x000048, "Member 'BP_Character_C_LimitRotation::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Character_C_LimitRotation, CallFunc_BreakRotator_Pitch) == 0x00004C, "Member 'BP_Character_C_LimitRotation::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Character_C_LimitRotation, CallFunc_BreakRotator_Yaw) == 0x000050, "Member 'BP_Character_C_LimitRotation::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Character_C_LimitRotation, CallFunc_SelectControlRot_DesiredControlRotation_1) == 0x000058, "Member 'BP_Character_C_LimitRotation::CallFunc_SelectControlRot_DesiredControlRotation_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_LimitRotation, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000070, "Member 'BP_Character_C_LimitRotation::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_LimitRotation, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x000078, "Member 'BP_Character_C_LimitRotation::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_LimitRotation, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000090, "Member 'BP_Character_C_LimitRotation::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_LimitRotation, CallFunc_BreakRotator_Roll_1) == 0x000098, "Member 'BP_Character_C_LimitRotation::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_LimitRotation, CallFunc_BreakRotator_Pitch_1) == 0x00009C, "Member 'BP_Character_C_LimitRotation::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_LimitRotation, CallFunc_BreakRotator_Yaw_1) == 0x0000A0, "Member 'BP_Character_C_LimitRotation::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_LimitRotation, CallFunc_InRange_FloatFloat_ReturnValue) == 0x0000A4, "Member 'BP_Character_C_LimitRotation::CallFunc_InRange_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_LimitRotation, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0000A5, "Member 'BP_Character_C_LimitRotation::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_LimitRotation, CallFunc_SelectFloat_ReturnValue) == 0x0000A8, "Member 'BP_Character_C_LimitRotation::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_LimitRotation, CallFunc_MakeRotator_ReturnValue) == 0x0000B0, "Member 'BP_Character_C_LimitRotation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_LimitRotation, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x0000C8, "Member 'BP_Character_C_LimitRotation::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_LimitRotation, CallFunc_Add_DoubleDouble_A_ImplicitCast_1) == 0x0000D0, "Member 'BP_Character_C_LimitRotation::CallFunc_Add_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_LimitRotation, CallFunc_InRange_FloatFloat_Value_ImplicitCast) == 0x0000D8, "Member 'BP_Character_C_LimitRotation::CallFunc_InRange_FloatFloat_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_LimitRotation, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x0000E0, "Member 'BP_Character_C_LimitRotation::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_LimitRotation, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x0000E8, "Member 'BP_Character_C_LimitRotation::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");

// Function BP_Character.BP_Character_C.LookRight
// 0x0008 (0x0008 - 0x0000)
struct BP_Character_C_LookRight final
{
public:
	double                                        Axis;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_LookRight) == 0x000008, "Wrong alignment on BP_Character_C_LookRight");
static_assert(sizeof(BP_Character_C_LookRight) == 0x000008, "Wrong size on BP_Character_C_LookRight");
static_assert(offsetof(BP_Character_C_LookRight, Axis) == 0x000000, "Member 'BP_Character_C_LookRight::Axis' has a wrong offset!");

// Function BP_Character.BP_Character_C.LookUp
// 0x0008 (0x0008 - 0x0000)
struct BP_Character_C_LookUp final
{
public:
	double                                        Axis;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_LookUp) == 0x000008, "Wrong alignment on BP_Character_C_LookUp");
static_assert(sizeof(BP_Character_C_LookUp) == 0x000008, "Wrong size on BP_Character_C_LookUp");
static_assert(offsetof(BP_Character_C_LookUp, Axis) == 0x000000, "Member 'BP_Character_C_LookUp::Axis' has a wrong offset!");

// Function BP_Character.BP_Character_C.MakeOutline
// 0x0001 (0x0001 - 0x0000)
struct BP_Character_C_MakeOutline final
{
public:
	bool                                          Outline;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_MakeOutline) == 0x000001, "Wrong alignment on BP_Character_C_MakeOutline");
static_assert(sizeof(BP_Character_C_MakeOutline) == 0x000001, "Wrong size on BP_Character_C_MakeOutline");
static_assert(offsetof(BP_Character_C_MakeOutline, Outline) == 0x000000, "Member 'BP_Character_C_MakeOutline::Outline' has a wrong offset!");

// Function BP_Character.BP_Character_C.MantleCheck
// 0x0B40 (0x0B40 - 0x0000)
struct BP_Character_C_MantleCheck final
{
public:
	struct FMantle_TraceSettings                  Trace_Settings;                                    // 0x0000(0x0014)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               DebugType;                                         // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Vault;                                             // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMantleType                                   MantleType;                                        // 0x0016(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_326E[0x1];                                     // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MantleHeight;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             TargetTransform;                                   // 0x0020(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DownTraceLocation;                                 // 0x0088(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InitialTrace_Normal;                               // 0x00A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InitialTrace_ImpactPoint;                          // 0x00B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Gamestate_C>      K2Node_DynamicCast_AsBPI_Gamestate;                // 0x00D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_326F[0x7];                                     // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class APawn*>                          CallFunc_GetPawnArray_Array;                       // 0x0108(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0118(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_SphereTraceSingle_OutHit;                 // 0x0130(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingle_ReturnValue;            // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0219(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x021A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3270[0x1];                                     // 0x021B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3271[0x4];                                     // 0x0224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0228(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0240(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0258(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0270(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0288(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0290(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0298(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x02A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x02B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x02B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x02B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3272[0x4];                                     // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x02C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x02D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x02F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3273[0x7];                                     // 0x02F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x02F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0310(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0328(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_1;               // 0x0340(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_2;               // 0x0348(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Gamestate_C>      K2Node_DynamicCast_AsBPI_Gamestate_1;              // 0x0350(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0360(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3274[0x7];                                     // 0x0361(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_Gamestate_C>      K2Node_DynamicCast_AsBPI_Gamestate_2;              // 0x0368(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0378(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3275[0x7];                                     // 0x0379(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APawn*>                          CallFunc_GetPawnArray_Array_1;                     // 0x0380(0x0010)(ReferenceParm)
	TArray<class APawn*>                          CallFunc_GetPawnArray_Array_2;                     // 0x0390(0x0010)(ReferenceParm)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_3;               // 0x03A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Gamestate_C>      K2Node_DynamicCast_AsBPI_Gamestate_3;              // 0x03A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x03B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3276[0x7];                                     // 0x03B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APawn*>                          CallFunc_GetPawnArray_Array_3;                     // 0x03C0(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x03D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x03E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDesiredMoveDirection_ReturnValue;      // 0x0400(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0418(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0420(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0428(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0430(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0448(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0450(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0468(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0470(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0478(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0490(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_2;           // 0x0498(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_3;           // 0x04A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x04A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x04B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCalpsuleBaseLocation_ReturnValue;      // 0x04C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCalpsuleBaseLocation_ReturnValue_1;    // 0x04E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x04F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0500(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0508(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0510(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x0528(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0540(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3277[0x7];                                     // 0x0541(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_3;           // 0x0548(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_CapsuleTraceSingle_OutHit;                // 0x0560(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_CapsuleTraceSingle_ReturnValue;           // 0x0648(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWalkableSurface_ReturnValue;            // 0x0649(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x064A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x064B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x064C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x0650(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3278[0x4];                                     // 0x0654(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x0658(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x0670(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x0688(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x06A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x06B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x06C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x06C8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x06D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName_1;                // 0x06D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x06E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_1;            // 0x06E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x06E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3279[0x4];                                     // 0x06EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x06F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x0708(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0720(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0721(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0722(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0723(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0724(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0725(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_327A[0x2];                                     // 0x0726(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x0728(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_2;                          // 0x0740(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_2;                          // 0x0748(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_2;                          // 0x0750(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x0758(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FALS_ComponentAndTransform             K2Node_MakeStruct_ALS_ComponentAndTransform;       // 0x0770(0x0070)(NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_4;           // 0x07E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_5;           // 0x07F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_SphereTraceSingle_OutHit_1;               // 0x0810(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingle_ReturnValue_1;          // 0x08F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_327B[0x7];                                     // 0x08F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0900(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWalkableSurface_ReturnValue_1;          // 0x0918(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_327C[0x7];                                     // 0x0919(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x0920(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_2;            // 0x0938(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_2;         // 0x0939(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_327D[0x2];                                     // 0x093A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_2;                    // 0x093C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_2;                // 0x0940(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_327E[0x4];                                     // 0x0944(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location_2;                // 0x0948(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_2;             // 0x0960(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_2;                  // 0x0978(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_2;            // 0x0990(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_2;                 // 0x09A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_2;                // 0x09B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_2;            // 0x09B8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_2;             // 0x09C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName_2;                // 0x09C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_2;                 // 0x09D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_2;            // 0x09D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_2;               // 0x09D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_327F[0x4];                                     // 0x09DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart_2;              // 0x09E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_2;                // 0x09F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCapsuleLocationFromBase_ReturnValue;   // 0x0A10(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AInOutPillar_BP_C*                      K2Node_DynamicCast_AsIn_Out_Pillar_BP;             // 0x0A28(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0A30(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3280[0xF];                                     // 0x0A31(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0A40(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CapsuleHasRoomCheck_HasRoom;              // 0x0AA0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3281[0x7];                                     // 0x0AA1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X_3;                          // 0x0AA8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_3;                          // 0x0AB0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_3;                          // 0x0AB8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_4;                          // 0x0AC0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_4;                          // 0x0AC8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_4;                          // 0x0AD0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0AD8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3282[0x7];                                     // 0x0AD9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue_3;                 // 0x0AE0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x0AF8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast;          // 0x0B00(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast_1;        // 0x0B08(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_A_ImplicitCast;     // 0x0B10(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast_1;        // 0x0B18(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_B_ImplicitCast;     // 0x0B20(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_VectorFloat_B_ImplicitCast;      // 0x0B28(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CapsuleTraceSingle_HalfHeight_ImplicitCast; // 0x0B30(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_MantleCheck) == 0x000010, "Wrong alignment on BP_Character_C_MantleCheck");
static_assert(sizeof(BP_Character_C_MantleCheck) == 0x000B40, "Wrong size on BP_Character_C_MantleCheck");
static_assert(offsetof(BP_Character_C_MantleCheck, Trace_Settings) == 0x000000, "Member 'BP_Character_C_MantleCheck::Trace_Settings' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, DebugType) == 0x000014, "Member 'BP_Character_C_MantleCheck::DebugType' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, Vault) == 0x000015, "Member 'BP_Character_C_MantleCheck::Vault' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, MantleType) == 0x000016, "Member 'BP_Character_C_MantleCheck::MantleType' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, MantleHeight) == 0x000018, "Member 'BP_Character_C_MantleCheck::MantleHeight' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, TargetTransform) == 0x000020, "Member 'BP_Character_C_MantleCheck::TargetTransform' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, HitComponent) == 0x000080, "Member 'BP_Character_C_MantleCheck::HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, DownTraceLocation) == 0x000088, "Member 'BP_Character_C_MantleCheck::DownTraceLocation' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, InitialTrace_Normal) == 0x0000A0, "Member 'BP_Character_C_MantleCheck::InitialTrace_Normal' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, InitialTrace_ImpactPoint) == 0x0000B8, "Member 'BP_Character_C_MantleCheck::InitialTrace_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_GetGameState_ReturnValue) == 0x0000D0, "Member 'BP_Character_C_MantleCheck::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, K2Node_DynamicCast_AsBPI_Gamestate) == 0x0000D8, "Member 'BP_Character_C_MantleCheck::K2Node_DynamicCast_AsBPI_Gamestate' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, K2Node_DynamicCast_bSuccess) == 0x0000E8, "Member 'BP_Character_C_MantleCheck::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x0000F0, "Member 'BP_Character_C_MantleCheck::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_GetPawnArray_Array) == 0x000108, "Member 'BP_Character_C_MantleCheck::CallFunc_GetPawnArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_Add_VectorVector_ReturnValue) == 0x000118, "Member 'BP_Character_C_MantleCheck::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_SphereTraceSingle_OutHit) == 0x000130, "Member 'BP_Character_C_MantleCheck::CallFunc_SphereTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_SphereTraceSingle_ReturnValue) == 0x000218, "Member 'BP_Character_C_MantleCheck::CallFunc_SphereTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_bBlockingHit) == 0x000219, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_bInitialOverlap) == 0x00021A, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_Time) == 0x00021C, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_Distance) == 0x000220, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_Location) == 0x000228, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_ImpactPoint) == 0x000240, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_Normal) == 0x000258, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_ImpactNormal) == 0x000270, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_PhysMat) == 0x000288, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_HitActor) == 0x000290, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_HitComponent) == 0x000298, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_HitBoneName) == 0x0002A0, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_BoneName) == 0x0002A8, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_HitItem) == 0x0002B0, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_ElementIndex) == 0x0002B4, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_FaceIndex) == 0x0002B8, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_TraceStart) == 0x0002C0, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_TraceEnd) == 0x0002D8, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, K2Node_SwitchEnum_CmpSuccess) == 0x0002F0, "Member 'BP_Character_C_MantleCheck::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakTransform_Location) == 0x0002F8, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakTransform_Rotation) == 0x000310, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakTransform_Scale) == 0x000328, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_GetGameState_ReturnValue_1) == 0x000340, "Member 'BP_Character_C_MantleCheck::CallFunc_GetGameState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_GetGameState_ReturnValue_2) == 0x000348, "Member 'BP_Character_C_MantleCheck::CallFunc_GetGameState_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, K2Node_DynamicCast_AsBPI_Gamestate_1) == 0x000350, "Member 'BP_Character_C_MantleCheck::K2Node_DynamicCast_AsBPI_Gamestate_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, K2Node_DynamicCast_bSuccess_1) == 0x000360, "Member 'BP_Character_C_MantleCheck::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, K2Node_DynamicCast_AsBPI_Gamestate_2) == 0x000368, "Member 'BP_Character_C_MantleCheck::K2Node_DynamicCast_AsBPI_Gamestate_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, K2Node_DynamicCast_bSuccess_2) == 0x000378, "Member 'BP_Character_C_MantleCheck::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_GetPawnArray_Array_1) == 0x000380, "Member 'BP_Character_C_MantleCheck::CallFunc_GetPawnArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_GetPawnArray_Array_2) == 0x000390, "Member 'BP_Character_C_MantleCheck::CallFunc_GetPawnArray_Array_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_GetGameState_ReturnValue_3) == 0x0003A0, "Member 'BP_Character_C_MantleCheck::CallFunc_GetGameState_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, K2Node_DynamicCast_AsBPI_Gamestate_3) == 0x0003A8, "Member 'BP_Character_C_MantleCheck::K2Node_DynamicCast_AsBPI_Gamestate_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, K2Node_DynamicCast_bSuccess_3) == 0x0003B8, "Member 'BP_Character_C_MantleCheck::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_GetPawnArray_Array_3) == 0x0003C0, "Member 'BP_Character_C_MantleCheck::CallFunc_GetPawnArray_Array_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x0003D0, "Member 'BP_Character_C_MantleCheck::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0003E8, "Member 'BP_Character_C_MantleCheck::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_GetDesiredMoveDirection_ReturnValue) == 0x000400, "Member 'BP_Character_C_MantleCheck::CallFunc_GetDesiredMoveDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakVector_X) == 0x000418, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakVector_Y) == 0x000420, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakVector_Z) == 0x000428, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000430, "Member 'BP_Character_C_MantleCheck::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000448, "Member 'BP_Character_C_MantleCheck::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000450, "Member 'BP_Character_C_MantleCheck::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000468, "Member 'BP_Character_C_MantleCheck::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000470, "Member 'BP_Character_C_MantleCheck::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_MakeVector_ReturnValue) == 0x000478, "Member 'BP_Character_C_MantleCheck::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000490, "Member 'BP_Character_C_MantleCheck::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_Add_DoubleDouble_ReturnValue_2) == 0x000498, "Member 'BP_Character_C_MantleCheck::CallFunc_Add_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_Add_DoubleDouble_ReturnValue_3) == 0x0004A0, "Member 'BP_Character_C_MantleCheck::CallFunc_Add_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x0004A8, "Member 'BP_Character_C_MantleCheck::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_MakeVector_ReturnValue_1) == 0x0004B0, "Member 'BP_Character_C_MantleCheck::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_GetCalpsuleBaseLocation_ReturnValue) == 0x0004C8, "Member 'BP_Character_C_MantleCheck::CallFunc_GetCalpsuleBaseLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_GetCalpsuleBaseLocation_ReturnValue_1) == 0x0004E0, "Member 'BP_Character_C_MantleCheck::CallFunc_GetCalpsuleBaseLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakVector_X_1) == 0x0004F8, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakVector_Y_1) == 0x000500, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakVector_Z_1) == 0x000508, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000510, "Member 'BP_Character_C_MantleCheck::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_Add_VectorVector_ReturnValue_2) == 0x000528, "Member 'BP_Character_C_MantleCheck::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000540, "Member 'BP_Character_C_MantleCheck::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_Add_VectorVector_ReturnValue_3) == 0x000548, "Member 'BP_Character_C_MantleCheck::CallFunc_Add_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_CapsuleTraceSingle_OutHit) == 0x000560, "Member 'BP_Character_C_MantleCheck::CallFunc_CapsuleTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_CapsuleTraceSingle_ReturnValue) == 0x000648, "Member 'BP_Character_C_MantleCheck::CallFunc_CapsuleTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_IsWalkableSurface_ReturnValue) == 0x000649, "Member 'BP_Character_C_MantleCheck::CallFunc_IsWalkableSurface_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_bBlockingHit_1) == 0x00064A, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x00064B, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_Time_1) == 0x00064C, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_Distance_1) == 0x000650, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_Location_1) == 0x000658, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_ImpactPoint_1) == 0x000670, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_Normal_1) == 0x000688, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_ImpactNormal_1) == 0x0006A0, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_PhysMat_1) == 0x0006B8, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_HitActor_1) == 0x0006C0, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_HitComponent_1) == 0x0006C8, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_HitBoneName_1) == 0x0006D0, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_BoneName_1) == 0x0006D8, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_BoneName_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_HitItem_1) == 0x0006E0, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_ElementIndex_1) == 0x0006E4, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_ElementIndex_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_FaceIndex_1) == 0x0006E8, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_TraceStart_1) == 0x0006F0, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_TraceEnd_1) == 0x000708, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_Not_PreBool_ReturnValue) == 0x000720, "Member 'BP_Character_C_MantleCheck::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BooleanAND_ReturnValue) == 0x000721, "Member 'BP_Character_C_MantleCheck::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_Not_PreBool_ReturnValue_1) == 0x000722, "Member 'BP_Character_C_MantleCheck::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BooleanAND_ReturnValue_1) == 0x000723, "Member 'BP_Character_C_MantleCheck::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, K2Node_SwitchEnum_CmpSuccess_1) == 0x000724, "Member 'BP_Character_C_MantleCheck::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_HasAuthority_ReturnValue) == 0x000725, "Member 'BP_Character_C_MantleCheck::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x000728, "Member 'BP_Character_C_MantleCheck::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakVector_X_2) == 0x000740, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakVector_Y_2) == 0x000748, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakVector_Z_2) == 0x000750, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_MakeVector_ReturnValue_2) == 0x000758, "Member 'BP_Character_C_MantleCheck::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, K2Node_MakeStruct_ALS_ComponentAndTransform) == 0x000770, "Member 'BP_Character_C_MantleCheck::K2Node_MakeStruct_ALS_ComponentAndTransform' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_Add_VectorVector_ReturnValue_4) == 0x0007E0, "Member 'BP_Character_C_MantleCheck::CallFunc_Add_VectorVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_Add_VectorVector_ReturnValue_5) == 0x0007F8, "Member 'BP_Character_C_MantleCheck::CallFunc_Add_VectorVector_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_SphereTraceSingle_OutHit_1) == 0x000810, "Member 'BP_Character_C_MantleCheck::CallFunc_SphereTraceSingle_OutHit_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_SphereTraceSingle_ReturnValue_1) == 0x0008F8, "Member 'BP_Character_C_MantleCheck::CallFunc_SphereTraceSingle_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000900, "Member 'BP_Character_C_MantleCheck::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_IsWalkableSurface_ReturnValue_1) == 0x000918, "Member 'BP_Character_C_MantleCheck::CallFunc_IsWalkableSurface_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x000920, "Member 'BP_Character_C_MantleCheck::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_bBlockingHit_2) == 0x000938, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_bBlockingHit_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_bInitialOverlap_2) == 0x000939, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_bInitialOverlap_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_Time_2) == 0x00093C, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_Time_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_Distance_2) == 0x000940, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_Distance_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_Location_2) == 0x000948, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_Location_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_ImpactPoint_2) == 0x000960, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_ImpactPoint_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_Normal_2) == 0x000978, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_Normal_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_ImpactNormal_2) == 0x000990, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_ImpactNormal_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_PhysMat_2) == 0x0009A8, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_PhysMat_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_HitActor_2) == 0x0009B0, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_HitActor_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_HitComponent_2) == 0x0009B8, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_HitComponent_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_HitBoneName_2) == 0x0009C0, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_HitBoneName_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_BoneName_2) == 0x0009C8, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_BoneName_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_HitItem_2) == 0x0009D0, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_HitItem_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_ElementIndex_2) == 0x0009D4, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_ElementIndex_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_FaceIndex_2) == 0x0009D8, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_FaceIndex_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_TraceStart_2) == 0x0009E0, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_TraceStart_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakHitResult_TraceEnd_2) == 0x0009F8, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakHitResult_TraceEnd_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_GetCapsuleLocationFromBase_ReturnValue) == 0x000A10, "Member 'BP_Character_C_MantleCheck::CallFunc_GetCapsuleLocationFromBase_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, K2Node_DynamicCast_AsIn_Out_Pillar_BP) == 0x000A28, "Member 'BP_Character_C_MantleCheck::K2Node_DynamicCast_AsIn_Out_Pillar_BP' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, K2Node_DynamicCast_bSuccess_4) == 0x000A30, "Member 'BP_Character_C_MantleCheck::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_MakeTransform_ReturnValue) == 0x000A40, "Member 'BP_Character_C_MantleCheck::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_CapsuleHasRoomCheck_HasRoom) == 0x000AA0, "Member 'BP_Character_C_MantleCheck::CallFunc_CapsuleHasRoomCheck_HasRoom' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakVector_X_3) == 0x000AA8, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakVector_Y_3) == 0x000AB0, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakVector_Z_3) == 0x000AB8, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakVector_X_4) == 0x000AC0, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakVector_X_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakVector_Y_4) == 0x000AC8, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakVector_Y_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BreakVector_Z_4) == 0x000AD0, "Member 'BP_Character_C_MantleCheck::CallFunc_BreakVector_Z_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_BooleanAND_ReturnValue_2) == 0x000AD8, "Member 'BP_Character_C_MantleCheck::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_MakeVector_ReturnValue_3) == 0x000AE0, "Member 'BP_Character_C_MantleCheck::CallFunc_MakeVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x000AF8, "Member 'BP_Character_C_MantleCheck::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_Add_DoubleDouble_B_ImplicitCast) == 0x000B00, "Member 'BP_Character_C_MantleCheck::CallFunc_Add_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_Add_DoubleDouble_A_ImplicitCast_1) == 0x000B08, "Member 'BP_Character_C_MantleCheck::CallFunc_Add_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_Subtract_DoubleDouble_A_ImplicitCast) == 0x000B10, "Member 'BP_Character_C_MantleCheck::CallFunc_Subtract_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_Add_DoubleDouble_B_ImplicitCast_1) == 0x000B18, "Member 'BP_Character_C_MantleCheck::CallFunc_Add_DoubleDouble_B_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_Subtract_DoubleDouble_B_ImplicitCast) == 0x000B20, "Member 'BP_Character_C_MantleCheck::CallFunc_Subtract_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_Multiply_VectorFloat_B_ImplicitCast) == 0x000B28, "Member 'BP_Character_C_MantleCheck::CallFunc_Multiply_VectorFloat_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleCheck, CallFunc_CapsuleTraceSingle_HalfHeight_ImplicitCast) == 0x000B30, "Member 'BP_Character_C_MantleCheck::CallFunc_CapsuleTraceSingle_HalfHeight_ImplicitCast' has a wrong offset!");

// Function BP_Character.BP_Character_C.MantleCheckShuffle
// 0x0008 (0x0008 - 0x0000)
struct BP_Character_C_MantleCheckShuffle final
{
public:
	double                                        Delay;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_MantleCheckShuffle) == 0x000008, "Wrong alignment on BP_Character_C_MantleCheckShuffle");
static_assert(sizeof(BP_Character_C_MantleCheckShuffle) == 0x000008, "Wrong size on BP_Character_C_MantleCheckShuffle");
static_assert(offsetof(BP_Character_C_MantleCheckShuffle, Delay) == 0x000000, "Member 'BP_Character_C_MantleCheckShuffle::Delay' has a wrong offset!");

// Function BP_Character.BP_Character_C.MantleStart
// 0x09A0 (0x09A0 - 0x0000)
struct BP_Character_C_MantleStart final
{
public:
	double                                        MantleHeight;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3283[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FALS_ComponentAndTransform             MantleLedgeWS;                                     // 0x0010(0x0070)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	EMantleType                                   MantleType;                                        // 0x0080(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3284[0x2];                                     // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsServer_ReturnValue;                     // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3285[0x7];                                     // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IALS_Animation_BPI_C>  K2Node_DynamicCast_AsALS_Animation_BPI;            // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3286[0xF];                                     // 0x00A1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x00B0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0110(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0128(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0140(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MinTime;                     // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MaxTime;                     // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3287[0x4];                                     // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0191(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3288[0x6];                                     // 0x0192(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0198(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x01B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x01C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMantle_Asset                          CallFunc_GetMantleAsset_ReturnValue;               // 0x01E0(0x0040)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0220(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue_1;     // 0x0280(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x02E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3289[0x8];                                     // 0x02E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_InvertTransform_ReturnValue;              // 0x02F0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AInOutPillar_BP_C*                      K2Node_DynamicCast_AsIn_Out_Pillar_BP;             // 0x0350(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0358(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_328A[0x7];                                     // 0x0359(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_ComposeTransforms_ReturnValue;            // 0x0360(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FALS_ComponentAndTransform             K2Node_MakeStruct_ALS_ComponentAndTransform;       // 0x03C0(0x0070)(NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0430(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_1;            // 0x0438(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0440(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_328B[0x4];                                     // 0x0444(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMantle_Params                         K2Node_MakeStruct_Mantle_Params;                   // 0x0448(0x0030)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0478(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_ChainPhysics_C>   K2Node_DynamicCast_AsBPI_Chain_Physics;            // 0x0480(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0490(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_328C[0x3];                                     // 0x0491(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0494(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0498(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_328D[0x3];                                     // 0x0499(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x049C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_2;                // 0x04A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_2;                // 0x04B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_2;                   // 0x04D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_3;                // 0x04E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_3;                // 0x0500(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_3;                   // 0x0518(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0530(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0534(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0538(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_328E[0x4];                                     // 0x053C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0540(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_2;                      // 0x0558(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_2;                     // 0x055C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_2;                       // 0x0560(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_328F[0x4];                                     // 0x0564(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0568(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0580(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_2;      // 0x0588(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_3;      // 0x0590(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0598(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location_4;                // 0x05B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_4;                // 0x05C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_4;                   // 0x05E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3290[0x8];                                     // 0x05F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0600(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_RotatorToVector_ReturnValue;         // 0x0660(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0678(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0690(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0698(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x06A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_5;                // 0x06A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_5;                // 0x06C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_5;                   // 0x06D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x06F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0708(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3291[0x7];                                     // 0x0709(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_2;      // 0x0710(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3292[0x8];                                     // 0x0728(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_2;              // 0x0730(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_6;                // 0x0790(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_6;                // 0x07A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_6;                   // 0x07C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_3;      // 0x07D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_3;                      // 0x07F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_3;                     // 0x07F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_3;                       // 0x07F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3293[0x4];                                     // 0x07FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_4;      // 0x0800(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_4;      // 0x0818(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_5;      // 0x0820(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_6;      // 0x0828(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0830(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3294[0x8];                                     // 0x0848(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_3;              // 0x0850(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_B_ImplicitCast;     // 0x08B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_A_ImplicitCast;     // 0x08B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_A_ImplicitCast_1;   // 0x08C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_A_ImplicitCast_2;   // 0x08C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_A_ImplicitCast_3;   // 0x08D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetTimelineLength_NewLength_ImplicitCast; // 0x08D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3295[0x4];                                     // 0x08DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Less_DoubleDouble_A_ImplicitCast;         // 0x08E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_InRangeA_ImplicitCast;    // 0x08E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_InRangeA_ImplicitCast_1;  // 0x08F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_OutRangeA_ImplicitCast;   // 0x08F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_OutRangeA_ImplicitCast_1; // 0x0900(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_InRangeB_ImplicitCast;    // 0x0908(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_InRangeB_ImplicitCast_1;  // 0x0910(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_OutRangeB_ImplicitCast;   // 0x0918(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_1; // 0x0920(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_StartingPosition_15_6F68E2244B632497DCA448A29CBDA0C8_ImplicitCast; // 0x0928(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_PlayRate_13_BBABD3264A1E44D275287FAE4C6D5556_ImplicitCast; // 0x092C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_B_ImplicitCast_1;   // 0x0930(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_B_ImplicitCast_2;   // 0x0938(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_B_ImplicitCast_3;   // 0x0940(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_B_ImplicitCast_4;   // 0x0948(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_B_ImplicitCast_5;   // 0x0950(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_B_ImplicitCast_6;   // 0x0958(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x0960(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x0964(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Roll_ImplicitCast;            // 0x0968(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3296[0x4];                                     // 0x096C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_A_ImplicitCast_4;   // 0x0970(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_A_ImplicitCast_5;   // 0x0978(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_A_ImplicitCast_6;   // 0x0980(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast_1;           // 0x0988(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast_1;         // 0x098C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Roll_ImplicitCast_1;          // 0x0990(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_MantleStart) == 0x000010, "Wrong alignment on BP_Character_C_MantleStart");
static_assert(sizeof(BP_Character_C_MantleStart) == 0x0009A0, "Wrong size on BP_Character_C_MantleStart");
static_assert(offsetof(BP_Character_C_MantleStart, MantleHeight) == 0x000000, "Member 'BP_Character_C_MantleStart::MantleHeight' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, MantleLedgeWS) == 0x000010, "Member 'BP_Character_C_MantleStart::MantleLedgeWS' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, MantleType) == 0x000080, "Member 'BP_Character_C_MantleStart::MantleType' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_IsLocallyControlled_ReturnValue) == 0x000081, "Member 'BP_Character_C_MantleStart::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_Array_Length_ReturnValue) == 0x000084, "Member 'BP_Character_C_MantleStart::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_IsServer_ReturnValue) == 0x000088, "Member 'BP_Character_C_MantleStart::CallFunc_IsServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, K2Node_DynamicCast_AsALS_Animation_BPI) == 0x000090, "Member 'BP_Character_C_MantleStart::K2Node_DynamicCast_AsALS_Animation_BPI' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, K2Node_DynamicCast_bSuccess) == 0x0000A0, "Member 'BP_Character_C_MantleStart::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x0000B0, "Member 'BP_Character_C_MantleStart::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_BreakTransform_Location) == 0x000110, "Member 'BP_Character_C_MantleStart::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_BreakTransform_Rotation) == 0x000128, "Member 'BP_Character_C_MantleStart::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_BreakTransform_Scale) == 0x000140, "Member 'BP_Character_C_MantleStart::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_GetTimeRange_MinTime) == 0x000158, "Member 'BP_Character_C_MantleStart::CallFunc_GetTimeRange_MinTime' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_GetTimeRange_MaxTime) == 0x00015C, "Member 'BP_Character_C_MantleStart::CallFunc_GetTimeRange_MaxTime' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_BreakRotator_Roll) == 0x000160, "Member 'BP_Character_C_MantleStart::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_BreakRotator_Pitch) == 0x000164, "Member 'BP_Character_C_MantleStart::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_BreakRotator_Yaw) == 0x000168, "Member 'BP_Character_C_MantleStart::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000170, "Member 'BP_Character_C_MantleStart::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_BreakVector_X) == 0x000178, "Member 'BP_Character_C_MantleStart::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_BreakVector_Y) == 0x000180, "Member 'BP_Character_C_MantleStart::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_BreakVector_Z) == 0x000188, "Member 'BP_Character_C_MantleStart::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_IsValid_ReturnValue) == 0x000190, "Member 'BP_Character_C_MantleStart::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000191, "Member 'BP_Character_C_MantleStart::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_BreakTransform_Location_1) == 0x000198, "Member 'BP_Character_C_MantleStart::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_BreakTransform_Rotation_1) == 0x0001B0, "Member 'BP_Character_C_MantleStart::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_BreakTransform_Scale_1) == 0x0001C8, "Member 'BP_Character_C_MantleStart::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_GetMantleAsset_ReturnValue) == 0x0001E0, "Member 'BP_Character_C_MantleStart::CallFunc_GetMantleAsset_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_MakeTransform_ReturnValue) == 0x000220, "Member 'BP_Character_C_MantleStart::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_K2_GetComponentToWorld_ReturnValue_1) == 0x000280, "Member 'BP_Character_C_MantleStart::CallFunc_K2_GetComponentToWorld_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_GetOwner_ReturnValue) == 0x0002E0, "Member 'BP_Character_C_MantleStart::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_InvertTransform_ReturnValue) == 0x0002F0, "Member 'BP_Character_C_MantleStart::CallFunc_InvertTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, K2Node_DynamicCast_AsIn_Out_Pillar_BP) == 0x000350, "Member 'BP_Character_C_MantleStart::K2Node_DynamicCast_AsIn_Out_Pillar_BP' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, K2Node_DynamicCast_bSuccess_1) == 0x000358, "Member 'BP_Character_C_MantleStart::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_ComposeTransforms_ReturnValue) == 0x000360, "Member 'BP_Character_C_MantleStart::CallFunc_ComposeTransforms_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, K2Node_MakeStruct_ALS_ComponentAndTransform) == 0x0003C0, "Member 'BP_Character_C_MantleStart::K2Node_MakeStruct_ALS_ComponentAndTransform' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_MapRangeClamped_ReturnValue) == 0x000430, "Member 'BP_Character_C_MantleStart::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_MapRangeClamped_ReturnValue_1) == 0x000438, "Member 'BP_Character_C_MantleStart::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, Temp_int_Array_Index_Variable) == 0x000440, "Member 'BP_Character_C_MantleStart::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, K2Node_MakeStruct_Mantle_Params) == 0x000448, "Member 'BP_Character_C_MantleStart::K2Node_MakeStruct_Mantle_Params' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_Array_Get_Item) == 0x000478, "Member 'BP_Character_C_MantleStart::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, K2Node_DynamicCast_AsBPI_Chain_Physics) == 0x000480, "Member 'BP_Character_C_MantleStart::K2Node_DynamicCast_AsBPI_Chain_Physics' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, K2Node_DynamicCast_bSuccess_2) == 0x000490, "Member 'BP_Character_C_MantleStart::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, Temp_int_Loop_Counter_Variable) == 0x000494, "Member 'BP_Character_C_MantleStart::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_Less_IntInt_ReturnValue) == 0x000498, "Member 'BP_Character_C_MantleStart::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_Add_IntInt_ReturnValue) == 0x00049C, "Member 'BP_Character_C_MantleStart::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_BreakTransform_Location_2) == 0x0004A0, "Member 'BP_Character_C_MantleStart::CallFunc_BreakTransform_Location_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_BreakTransform_Rotation_2) == 0x0004B8, "Member 'BP_Character_C_MantleStart::CallFunc_BreakTransform_Rotation_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_BreakTransform_Scale_2) == 0x0004D0, "Member 'BP_Character_C_MantleStart::CallFunc_BreakTransform_Scale_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_BreakTransform_Location_3) == 0x0004E8, "Member 'BP_Character_C_MantleStart::CallFunc_BreakTransform_Location_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_BreakTransform_Rotation_3) == 0x000500, "Member 'BP_Character_C_MantleStart::CallFunc_BreakTransform_Rotation_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_BreakTransform_Scale_3) == 0x000518, "Member 'BP_Character_C_MantleStart::CallFunc_BreakTransform_Scale_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_BreakRotator_Roll_1) == 0x000530, "Member 'BP_Character_C_MantleStart::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_BreakRotator_Pitch_1) == 0x000534, "Member 'BP_Character_C_MantleStart::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_BreakRotator_Yaw_1) == 0x000538, "Member 'BP_Character_C_MantleStart::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000540, "Member 'BP_Character_C_MantleStart::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_BreakRotator_Roll_2) == 0x000558, "Member 'BP_Character_C_MantleStart::CallFunc_BreakRotator_Roll_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_BreakRotator_Pitch_2) == 0x00055C, "Member 'BP_Character_C_MantleStart::CallFunc_BreakRotator_Pitch_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_BreakRotator_Yaw_2) == 0x000560, "Member 'BP_Character_C_MantleStart::CallFunc_BreakRotator_Yaw_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000568, "Member 'BP_Character_C_MantleStart::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000580, "Member 'BP_Character_C_MantleStart::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_Subtract_DoubleDouble_ReturnValue_2) == 0x000588, "Member 'BP_Character_C_MantleStart::CallFunc_Subtract_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_Subtract_DoubleDouble_ReturnValue_3) == 0x000590, "Member 'BP_Character_C_MantleStart::CallFunc_Subtract_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_MakeRotator_ReturnValue) == 0x000598, "Member 'BP_Character_C_MantleStart::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_BreakTransform_Location_4) == 0x0005B0, "Member 'BP_Character_C_MantleStart::CallFunc_BreakTransform_Location_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_BreakTransform_Rotation_4) == 0x0005C8, "Member 'BP_Character_C_MantleStart::CallFunc_BreakTransform_Rotation_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_BreakTransform_Scale_4) == 0x0005E0, "Member 'BP_Character_C_MantleStart::CallFunc_BreakTransform_Scale_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_MakeTransform_ReturnValue_1) == 0x000600, "Member 'BP_Character_C_MantleStart::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_Conv_RotatorToVector_ReturnValue) == 0x000660, "Member 'BP_Character_C_MantleStart::CallFunc_Conv_RotatorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000678, "Member 'BP_Character_C_MantleStart::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_BreakVector_X_1) == 0x000690, "Member 'BP_Character_C_MantleStart::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_BreakVector_Y_1) == 0x000698, "Member 'BP_Character_C_MantleStart::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_BreakVector_Z_1) == 0x0006A0, "Member 'BP_Character_C_MantleStart::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_BreakTransform_Location_5) == 0x0006A8, "Member 'BP_Character_C_MantleStart::CallFunc_BreakTransform_Location_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_BreakTransform_Rotation_5) == 0x0006C0, "Member 'BP_Character_C_MantleStart::CallFunc_BreakTransform_Rotation_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_BreakTransform_Scale_5) == 0x0006D8, "Member 'BP_Character_C_MantleStart::CallFunc_BreakTransform_Scale_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_MakeVector_ReturnValue) == 0x0006F0, "Member 'BP_Character_C_MantleStart::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_HasAuthority_ReturnValue) == 0x000708, "Member 'BP_Character_C_MantleStart::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_Subtract_VectorVector_ReturnValue_2) == 0x000710, "Member 'BP_Character_C_MantleStart::CallFunc_Subtract_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_MakeTransform_ReturnValue_2) == 0x000730, "Member 'BP_Character_C_MantleStart::CallFunc_MakeTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_BreakTransform_Location_6) == 0x000790, "Member 'BP_Character_C_MantleStart::CallFunc_BreakTransform_Location_6' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_BreakTransform_Rotation_6) == 0x0007A8, "Member 'BP_Character_C_MantleStart::CallFunc_BreakTransform_Rotation_6' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_BreakTransform_Scale_6) == 0x0007C0, "Member 'BP_Character_C_MantleStart::CallFunc_BreakTransform_Scale_6' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_Subtract_VectorVector_ReturnValue_3) == 0x0007D8, "Member 'BP_Character_C_MantleStart::CallFunc_Subtract_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_BreakRotator_Roll_3) == 0x0007F0, "Member 'BP_Character_C_MantleStart::CallFunc_BreakRotator_Roll_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_BreakRotator_Pitch_3) == 0x0007F4, "Member 'BP_Character_C_MantleStart::CallFunc_BreakRotator_Pitch_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_BreakRotator_Yaw_3) == 0x0007F8, "Member 'BP_Character_C_MantleStart::CallFunc_BreakRotator_Yaw_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_Subtract_VectorVector_ReturnValue_4) == 0x000800, "Member 'BP_Character_C_MantleStart::CallFunc_Subtract_VectorVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_Subtract_DoubleDouble_ReturnValue_4) == 0x000818, "Member 'BP_Character_C_MantleStart::CallFunc_Subtract_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_Subtract_DoubleDouble_ReturnValue_5) == 0x000820, "Member 'BP_Character_C_MantleStart::CallFunc_Subtract_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_Subtract_DoubleDouble_ReturnValue_6) == 0x000828, "Member 'BP_Character_C_MantleStart::CallFunc_Subtract_DoubleDouble_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_MakeRotator_ReturnValue_1) == 0x000830, "Member 'BP_Character_C_MantleStart::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_MakeTransform_ReturnValue_3) == 0x000850, "Member 'BP_Character_C_MantleStart::CallFunc_MakeTransform_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_Subtract_DoubleDouble_B_ImplicitCast) == 0x0008B0, "Member 'BP_Character_C_MantleStart::CallFunc_Subtract_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_Subtract_DoubleDouble_A_ImplicitCast) == 0x0008B8, "Member 'BP_Character_C_MantleStart::CallFunc_Subtract_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_Subtract_DoubleDouble_A_ImplicitCast_1) == 0x0008C0, "Member 'BP_Character_C_MantleStart::CallFunc_Subtract_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_Subtract_DoubleDouble_A_ImplicitCast_2) == 0x0008C8, "Member 'BP_Character_C_MantleStart::CallFunc_Subtract_DoubleDouble_A_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_Subtract_DoubleDouble_A_ImplicitCast_3) == 0x0008D0, "Member 'BP_Character_C_MantleStart::CallFunc_Subtract_DoubleDouble_A_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_SetTimelineLength_NewLength_ImplicitCast) == 0x0008D8, "Member 'BP_Character_C_MantleStart::CallFunc_SetTimelineLength_NewLength_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_Less_DoubleDouble_A_ImplicitCast) == 0x0008E0, "Member 'BP_Character_C_MantleStart::CallFunc_Less_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_MapRangeClamped_InRangeA_ImplicitCast) == 0x0008E8, "Member 'BP_Character_C_MantleStart::CallFunc_MapRangeClamped_InRangeA_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_MapRangeClamped_InRangeA_ImplicitCast_1) == 0x0008F0, "Member 'BP_Character_C_MantleStart::CallFunc_MapRangeClamped_InRangeA_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_MapRangeClamped_OutRangeA_ImplicitCast) == 0x0008F8, "Member 'BP_Character_C_MantleStart::CallFunc_MapRangeClamped_OutRangeA_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_MapRangeClamped_OutRangeA_ImplicitCast_1) == 0x000900, "Member 'BP_Character_C_MantleStart::CallFunc_MapRangeClamped_OutRangeA_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_MapRangeClamped_InRangeB_ImplicitCast) == 0x000908, "Member 'BP_Character_C_MantleStart::CallFunc_MapRangeClamped_InRangeB_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_MapRangeClamped_InRangeB_ImplicitCast_1) == 0x000910, "Member 'BP_Character_C_MantleStart::CallFunc_MapRangeClamped_InRangeB_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_MapRangeClamped_OutRangeB_ImplicitCast) == 0x000918, "Member 'BP_Character_C_MantleStart::CallFunc_MapRangeClamped_OutRangeB_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_1) == 0x000920, "Member 'BP_Character_C_MantleStart::CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, K2Node_MakeStruct_StartingPosition_15_6F68E2244B632497DCA448A29CBDA0C8_ImplicitCast) == 0x000928, "Member 'BP_Character_C_MantleStart::K2Node_MakeStruct_StartingPosition_15_6F68E2244B632497DCA448A29CBDA0C8_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, K2Node_MakeStruct_PlayRate_13_BBABD3264A1E44D275287FAE4C6D5556_ImplicitCast) == 0x00092C, "Member 'BP_Character_C_MantleStart::K2Node_MakeStruct_PlayRate_13_BBABD3264A1E44D275287FAE4C6D5556_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_Subtract_DoubleDouble_B_ImplicitCast_1) == 0x000930, "Member 'BP_Character_C_MantleStart::CallFunc_Subtract_DoubleDouble_B_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_Subtract_DoubleDouble_B_ImplicitCast_2) == 0x000938, "Member 'BP_Character_C_MantleStart::CallFunc_Subtract_DoubleDouble_B_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_Subtract_DoubleDouble_B_ImplicitCast_3) == 0x000940, "Member 'BP_Character_C_MantleStart::CallFunc_Subtract_DoubleDouble_B_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_Subtract_DoubleDouble_B_ImplicitCast_4) == 0x000948, "Member 'BP_Character_C_MantleStart::CallFunc_Subtract_DoubleDouble_B_ImplicitCast_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_Subtract_DoubleDouble_B_ImplicitCast_5) == 0x000950, "Member 'BP_Character_C_MantleStart::CallFunc_Subtract_DoubleDouble_B_ImplicitCast_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_Subtract_DoubleDouble_B_ImplicitCast_6) == 0x000958, "Member 'BP_Character_C_MantleStart::CallFunc_Subtract_DoubleDouble_B_ImplicitCast_6' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x000960, "Member 'BP_Character_C_MantleStart::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x000964, "Member 'BP_Character_C_MantleStart::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_MakeRotator_Roll_ImplicitCast) == 0x000968, "Member 'BP_Character_C_MantleStart::CallFunc_MakeRotator_Roll_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_Subtract_DoubleDouble_A_ImplicitCast_4) == 0x000970, "Member 'BP_Character_C_MantleStart::CallFunc_Subtract_DoubleDouble_A_ImplicitCast_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_Subtract_DoubleDouble_A_ImplicitCast_5) == 0x000978, "Member 'BP_Character_C_MantleStart::CallFunc_Subtract_DoubleDouble_A_ImplicitCast_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_Subtract_DoubleDouble_A_ImplicitCast_6) == 0x000980, "Member 'BP_Character_C_MantleStart::CallFunc_Subtract_DoubleDouble_A_ImplicitCast_6' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_MakeRotator_Yaw_ImplicitCast_1) == 0x000988, "Member 'BP_Character_C_MantleStart::CallFunc_MakeRotator_Yaw_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_MakeRotator_Pitch_ImplicitCast_1) == 0x00098C, "Member 'BP_Character_C_MantleStart::CallFunc_MakeRotator_Pitch_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStart, CallFunc_MakeRotator_Roll_ImplicitCast_1) == 0x000990, "Member 'BP_Character_C_MantleStart::CallFunc_MakeRotator_Roll_ImplicitCast_1' has a wrong offset!");

// Function BP_Character.BP_Character_C.MantleStartAll
// 0x0090 (0x0090 - 0x0000)
struct BP_Character_C_MantleStartAll final
{
public:
	double                                        MantleHeight;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3297[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FALS_ComponentAndTransform             MantleLedgeWS;                                     // 0x0010(0x0070)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	EMantleType                                   MantleType;                                        // 0x0080(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_MantleStartAll) == 0x000010, "Wrong alignment on BP_Character_C_MantleStartAll");
static_assert(sizeof(BP_Character_C_MantleStartAll) == 0x000090, "Wrong size on BP_Character_C_MantleStartAll");
static_assert(offsetof(BP_Character_C_MantleStartAll, MantleHeight) == 0x000000, "Member 'BP_Character_C_MantleStartAll::MantleHeight' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStartAll, MantleLedgeWS) == 0x000010, "Member 'BP_Character_C_MantleStartAll::MantleLedgeWS' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStartAll, MantleType) == 0x000080, "Member 'BP_Character_C_MantleStartAll::MantleType' has a wrong offset!");

// Function BP_Character.BP_Character_C.MantleStartSRV
// 0x0090 (0x0090 - 0x0000)
struct BP_Character_C_MantleStartSRV final
{
public:
	double                                        MantleHeight;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3298[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FALS_ComponentAndTransform             MantleLedgeWS;                                     // 0x0010(0x0070)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	EMantleType                                   MantleType;                                        // 0x0080(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_MantleStartSRV) == 0x000010, "Wrong alignment on BP_Character_C_MantleStartSRV");
static_assert(sizeof(BP_Character_C_MantleStartSRV) == 0x000090, "Wrong size on BP_Character_C_MantleStartSRV");
static_assert(offsetof(BP_Character_C_MantleStartSRV, MantleHeight) == 0x000000, "Member 'BP_Character_C_MantleStartSRV::MantleHeight' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStartSRV, MantleLedgeWS) == 0x000010, "Member 'BP_Character_C_MantleStartSRV::MantleLedgeWS' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleStartSRV, MantleType) == 0x000080, "Member 'BP_Character_C_MantleStartSRV::MantleType' has a wrong offset!");

// Function BP_Character.BP_Character_C.MantleUpdate
// 0x0D40 (0x0D40 - 0x0000)
struct BP_Character_C_MantleUpdate final
{
public:
	double                                        BlendIn;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3299[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LerpedTarget;                                      // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZCorrectionAlpha;                                  // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        XYCorrectionAlpha;                                 // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PositionAlpha;                                     // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_329A[0x2];                                     // 0x0096(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_329B[0x4];                                     // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_NewChain_C*                         K2Node_DynamicCast_AsBP_New_Chain;                 // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_329C[0x6];                                     // 0x00B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_SetActorLocationAndRotation_UpdateTarget__SweepHitResult; // 0x0100(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SetActorLocationAndRotation_UpdateTarget__ReturnValue; // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x01E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_329D[0x6];                                     // 0x01EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x01F0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_InvertTransform_ReturnValue;              // 0x0250(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x02B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x02C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x02E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_InverseTransformLocation_ReturnValue;     // 0x02F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_InverseTransformRotation_ReturnValue;     // 0x0310(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_InverseTransformLocation_ReturnValue_1;   // 0x0328(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0340(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPlaybackPosition_ReturnValue;          // 0x03A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_329E[0xC];                                     // 0x03A4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FALS_ComponentAndTransform             K2Node_MakeStruct_ALS_ComponentAndTransform;       // 0x03B0(0x0070)(NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0420(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVectorValue_ReturnValue;               // 0x0428(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0440(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0448(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0450(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_2;                // 0x0458(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_2;                // 0x0470(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_2;                   // 0x0488(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x04A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x04A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x04A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_329F[0x4];                                     // 0x04AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location_3;                // 0x04B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_3;                // 0x04C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_3;                   // 0x04E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x04F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0510(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0514(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0518(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32A0[0x4];                                     // 0x051C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0520(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0538(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_2;           // 0x0540(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_3;           // 0x0548(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0550(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32A1[0x8];                                     // 0x0568(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0570(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_4;                // 0x05D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_4;                // 0x05E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_4;                   // 0x0600(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0618(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0620(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0628(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_5;                // 0x0630(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_5;                // 0x0648(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_5;                   // 0x0660(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_2;                          // 0x0678(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_2;                          // 0x0680(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_2;                          // 0x0688(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0690(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_6;                // 0x06A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_6;                // 0x06C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_6;                   // 0x06D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_2;              // 0x06F0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_3;                          // 0x0750(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_3;                          // 0x0758(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_3;                          // 0x0760(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32A2[0x8];                                     // 0x0768(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_TLerp_ReturnValue;                        // 0x0770(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_7;                // 0x07D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_7;                // 0x07E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_7;                   // 0x0800(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_8;                // 0x0818(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_8;                // 0x0830(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_8;                   // 0x0848(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_4;                          // 0x0860(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_4;                          // 0x0868(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_4;                          // 0x0870(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_5;                          // 0x0878(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_5;                          // 0x0880(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_5;                          // 0x0888(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0890(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32A3[0x8];                                     // 0x08A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_3;              // 0x08B0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_9;                // 0x0910(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_9;                // 0x0928(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_9;                   // 0x0940(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32A4[0x8];                                     // 0x0958(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_TLerp_ReturnValue_1;                      // 0x0960(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_2;                      // 0x09C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_2;                     // 0x09C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_2;                       // 0x09C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32A5[0x4];                                     // 0x09CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location_10;               // 0x09D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_10;               // 0x09E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_10;                  // 0x0A00(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_6;                          // 0x0A18(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_6;                          // 0x0A20(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_6;                          // 0x0A28(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x0A30(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32A6[0x8];                                     // 0x0A48(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_4;              // 0x0A50(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_11;               // 0x0AB0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_11;               // 0x0AC8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_11;                  // 0x0AE0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x0AF8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_3;           // 0x0B10(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_3;                      // 0x0B28(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_3;                     // 0x0B2C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_3;                       // 0x0B30(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32A7[0x4];                                     // 0x0B34(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_4;           // 0x0B38(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_5;           // 0x0B40(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_6;           // 0x0B48(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0B50(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32A8[0x8];                                     // 0x0B68(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_5;              // 0x0B70(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_TLerp_ReturnValue_2;                      // 0x0BD0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_TLerp_ReturnValue_3;                      // 0x0C30(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_TLerp_Alpha_ImplicitCast;                 // 0x0C90(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32A9[0x4];                                     // 0x0C94(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x0C98(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast;          // 0x0CA0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetVectorValue_InTime_ImplicitCast;       // 0x0CA8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32AA[0x4];                                     // 0x0CAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast_1;        // 0x0CB0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast_2;        // 0x0CB8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast_3;        // 0x0CC0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_TLerp_Alpha_ImplicitCast_1;               // 0x0CC8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_TLerp_Alpha_ImplicitCast_2;               // 0x0CCC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast_1;        // 0x0CD0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast_2;        // 0x0CD8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast_3;        // 0x0CE0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x0CE8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x0CEC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Roll_ImplicitCast;            // 0x0CF0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_TLerp_Alpha_ImplicitCast_3;               // 0x0CF4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast_4;        // 0x0CF8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast_5;        // 0x0D00(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast_6;        // 0x0D08(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast_4;        // 0x0D10(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast_5;        // 0x0D18(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast_6;        // 0x0D20(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Roll_ImplicitCast_1;          // 0x0D28(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast_1;           // 0x0D2C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast_1;         // 0x0D30(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_MantleUpdate) == 0x000010, "Wrong alignment on BP_Character_C_MantleUpdate");
static_assert(sizeof(BP_Character_C_MantleUpdate) == 0x000D40, "Wrong size on BP_Character_C_MantleUpdate");
static_assert(offsetof(BP_Character_C_MantleUpdate, BlendIn) == 0x000000, "Member 'BP_Character_C_MantleUpdate::BlendIn' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, LerpedTarget) == 0x000010, "Member 'BP_Character_C_MantleUpdate::LerpedTarget' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, ZCorrectionAlpha) == 0x000070, "Member 'BP_Character_C_MantleUpdate::ZCorrectionAlpha' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, XYCorrectionAlpha) == 0x000078, "Member 'BP_Character_C_MantleUpdate::XYCorrectionAlpha' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, PositionAlpha) == 0x000080, "Member 'BP_Character_C_MantleUpdate::PositionAlpha' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, Temp_int_Array_Index_Variable) == 0x000088, "Member 'BP_Character_C_MantleUpdate::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, Temp_int_Loop_Counter_Variable) == 0x00008C, "Member 'BP_Character_C_MantleUpdate::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_Add_IntInt_ReturnValue) == 0x000090, "Member 'BP_Character_C_MantleUpdate::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_IsLocallyControlled_ReturnValue) == 0x000094, "Member 'BP_Character_C_MantleUpdate::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_IsValid_ReturnValue) == 0x000095, "Member 'BP_Character_C_MantleUpdate::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_Array_Get_Item) == 0x000098, "Member 'BP_Character_C_MantleUpdate::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_Array_Length_ReturnValue) == 0x0000A0, "Member 'BP_Character_C_MantleUpdate::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, K2Node_DynamicCast_AsBP_New_Chain) == 0x0000A8, "Member 'BP_Character_C_MantleUpdate::K2Node_DynamicCast_AsBP_New_Chain' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, K2Node_DynamicCast_bSuccess) == 0x0000B0, "Member 'BP_Character_C_MantleUpdate::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_Less_IntInt_ReturnValue) == 0x0000B1, "Member 'BP_Character_C_MantleUpdate::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakTransform_Location) == 0x0000B8, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakTransform_Rotation) == 0x0000D0, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakTransform_Scale) == 0x0000E8, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_SetActorLocationAndRotation_UpdateTarget__SweepHitResult) == 0x000100, "Member 'BP_Character_C_MantleUpdate::CallFunc_SetActorLocationAndRotation_UpdateTarget__SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_SetActorLocationAndRotation_UpdateTarget__ReturnValue) == 0x0001E8, "Member 'BP_Character_C_MantleUpdate::CallFunc_SetActorLocationAndRotation_UpdateTarget__ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_HasAuthority_ReturnValue) == 0x0001E9, "Member 'BP_Character_C_MantleUpdate::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x0001F0, "Member 'BP_Character_C_MantleUpdate::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_InvertTransform_ReturnValue) == 0x000250, "Member 'BP_Character_C_MantleUpdate::CallFunc_InvertTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakTransform_Location_1) == 0x0002B0, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakTransform_Rotation_1) == 0x0002C8, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakTransform_Scale_1) == 0x0002E0, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_InverseTransformLocation_ReturnValue) == 0x0002F8, "Member 'BP_Character_C_MantleUpdate::CallFunc_InverseTransformLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_InverseTransformRotation_ReturnValue) == 0x000310, "Member 'BP_Character_C_MantleUpdate::CallFunc_InverseTransformRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_InverseTransformLocation_ReturnValue_1) == 0x000328, "Member 'BP_Character_C_MantleUpdate::CallFunc_InverseTransformLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_MakeTransform_ReturnValue) == 0x000340, "Member 'BP_Character_C_MantleUpdate::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_GetPlaybackPosition_ReturnValue) == 0x0003A0, "Member 'BP_Character_C_MantleUpdate::CallFunc_GetPlaybackPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, K2Node_MakeStruct_ALS_ComponentAndTransform) == 0x0003B0, "Member 'BP_Character_C_MantleUpdate::K2Node_MakeStruct_ALS_ComponentAndTransform' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000420, "Member 'BP_Character_C_MantleUpdate::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_GetVectorValue_ReturnValue) == 0x000428, "Member 'BP_Character_C_MantleUpdate::CallFunc_GetVectorValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakVector_X) == 0x000440, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakVector_Y) == 0x000448, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakVector_Z) == 0x000450, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakTransform_Location_2) == 0x000458, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakTransform_Location_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakTransform_Rotation_2) == 0x000470, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakTransform_Rotation_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakTransform_Scale_2) == 0x000488, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakTransform_Scale_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakRotator_Roll) == 0x0004A0, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakRotator_Pitch) == 0x0004A4, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakRotator_Yaw) == 0x0004A8, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakTransform_Location_3) == 0x0004B0, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakTransform_Location_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakTransform_Rotation_3) == 0x0004C8, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakTransform_Rotation_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakTransform_Scale_3) == 0x0004E0, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakTransform_Scale_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_Add_VectorVector_ReturnValue) == 0x0004F8, "Member 'BP_Character_C_MantleUpdate::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakRotator_Roll_1) == 0x000510, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakRotator_Pitch_1) == 0x000514, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakRotator_Yaw_1) == 0x000518, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000520, "Member 'BP_Character_C_MantleUpdate::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000538, "Member 'BP_Character_C_MantleUpdate::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_Add_DoubleDouble_ReturnValue_2) == 0x000540, "Member 'BP_Character_C_MantleUpdate::CallFunc_Add_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_Add_DoubleDouble_ReturnValue_3) == 0x000548, "Member 'BP_Character_C_MantleUpdate::CallFunc_Add_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_MakeRotator_ReturnValue) == 0x000550, "Member 'BP_Character_C_MantleUpdate::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_MakeTransform_ReturnValue_1) == 0x000570, "Member 'BP_Character_C_MantleUpdate::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakTransform_Location_4) == 0x0005D0, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakTransform_Location_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakTransform_Rotation_4) == 0x0005E8, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakTransform_Rotation_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakTransform_Scale_4) == 0x000600, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakTransform_Scale_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakVector_X_1) == 0x000618, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakVector_Y_1) == 0x000620, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakVector_Z_1) == 0x000628, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakTransform_Location_5) == 0x000630, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakTransform_Location_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakTransform_Rotation_5) == 0x000648, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakTransform_Rotation_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakTransform_Scale_5) == 0x000660, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakTransform_Scale_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakVector_X_2) == 0x000678, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakVector_Y_2) == 0x000680, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakVector_Z_2) == 0x000688, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_MakeVector_ReturnValue) == 0x000690, "Member 'BP_Character_C_MantleUpdate::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakTransform_Location_6) == 0x0006A8, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakTransform_Location_6' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakTransform_Rotation_6) == 0x0006C0, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakTransform_Rotation_6' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakTransform_Scale_6) == 0x0006D8, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakTransform_Scale_6' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_MakeTransform_ReturnValue_2) == 0x0006F0, "Member 'BP_Character_C_MantleUpdate::CallFunc_MakeTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakVector_X_3) == 0x000750, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakVector_Y_3) == 0x000758, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakVector_Z_3) == 0x000760, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_TLerp_ReturnValue) == 0x000770, "Member 'BP_Character_C_MantleUpdate::CallFunc_TLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakTransform_Location_7) == 0x0007D0, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakTransform_Location_7' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakTransform_Rotation_7) == 0x0007E8, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakTransform_Rotation_7' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakTransform_Scale_7) == 0x000800, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakTransform_Scale_7' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakTransform_Location_8) == 0x000818, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakTransform_Location_8' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakTransform_Rotation_8) == 0x000830, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakTransform_Rotation_8' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakTransform_Scale_8) == 0x000848, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakTransform_Scale_8' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakVector_X_4) == 0x000860, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakVector_X_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakVector_Y_4) == 0x000868, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakVector_Y_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakVector_Z_4) == 0x000870, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakVector_Z_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakVector_X_5) == 0x000878, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakVector_X_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakVector_Y_5) == 0x000880, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakVector_Y_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakVector_Z_5) == 0x000888, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakVector_Z_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_MakeVector_ReturnValue_1) == 0x000890, "Member 'BP_Character_C_MantleUpdate::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_MakeTransform_ReturnValue_3) == 0x0008B0, "Member 'BP_Character_C_MantleUpdate::CallFunc_MakeTransform_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakTransform_Location_9) == 0x000910, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakTransform_Location_9' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakTransform_Rotation_9) == 0x000928, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakTransform_Rotation_9' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakTransform_Scale_9) == 0x000940, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakTransform_Scale_9' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_TLerp_ReturnValue_1) == 0x000960, "Member 'BP_Character_C_MantleUpdate::CallFunc_TLerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakRotator_Roll_2) == 0x0009C0, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakRotator_Roll_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakRotator_Pitch_2) == 0x0009C4, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakRotator_Pitch_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakRotator_Yaw_2) == 0x0009C8, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakRotator_Yaw_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakTransform_Location_10) == 0x0009D0, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakTransform_Location_10' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakTransform_Rotation_10) == 0x0009E8, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakTransform_Rotation_10' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakTransform_Scale_10) == 0x000A00, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakTransform_Scale_10' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakVector_X_6) == 0x000A18, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakVector_X_6' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakVector_Y_6) == 0x000A20, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakVector_Y_6' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakVector_Z_6) == 0x000A28, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakVector_Z_6' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_MakeVector_ReturnValue_2) == 0x000A30, "Member 'BP_Character_C_MantleUpdate::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_MakeTransform_ReturnValue_4) == 0x000A50, "Member 'BP_Character_C_MantleUpdate::CallFunc_MakeTransform_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakTransform_Location_11) == 0x000AB0, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakTransform_Location_11' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakTransform_Rotation_11) == 0x000AC8, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakTransform_Rotation_11' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakTransform_Scale_11) == 0x000AE0, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakTransform_Scale_11' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_Add_VectorVector_ReturnValue_2) == 0x000AF8, "Member 'BP_Character_C_MantleUpdate::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_Add_VectorVector_ReturnValue_3) == 0x000B10, "Member 'BP_Character_C_MantleUpdate::CallFunc_Add_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakRotator_Roll_3) == 0x000B28, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakRotator_Roll_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakRotator_Pitch_3) == 0x000B2C, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakRotator_Pitch_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_BreakRotator_Yaw_3) == 0x000B30, "Member 'BP_Character_C_MantleUpdate::CallFunc_BreakRotator_Yaw_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_Add_DoubleDouble_ReturnValue_4) == 0x000B38, "Member 'BP_Character_C_MantleUpdate::CallFunc_Add_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_Add_DoubleDouble_ReturnValue_5) == 0x000B40, "Member 'BP_Character_C_MantleUpdate::CallFunc_Add_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_Add_DoubleDouble_ReturnValue_6) == 0x000B48, "Member 'BP_Character_C_MantleUpdate::CallFunc_Add_DoubleDouble_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_MakeRotator_ReturnValue_1) == 0x000B50, "Member 'BP_Character_C_MantleUpdate::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_MakeTransform_ReturnValue_5) == 0x000B70, "Member 'BP_Character_C_MantleUpdate::CallFunc_MakeTransform_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_TLerp_ReturnValue_2) == 0x000BD0, "Member 'BP_Character_C_MantleUpdate::CallFunc_TLerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_TLerp_ReturnValue_3) == 0x000C30, "Member 'BP_Character_C_MantleUpdate::CallFunc_TLerp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_TLerp_Alpha_ImplicitCast) == 0x000C90, "Member 'BP_Character_C_MantleUpdate::CallFunc_TLerp_Alpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x000C98, "Member 'BP_Character_C_MantleUpdate::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_Add_DoubleDouble_B_ImplicitCast) == 0x000CA0, "Member 'BP_Character_C_MantleUpdate::CallFunc_Add_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_GetVectorValue_InTime_ImplicitCast) == 0x000CA8, "Member 'BP_Character_C_MantleUpdate::CallFunc_GetVectorValue_InTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_Add_DoubleDouble_A_ImplicitCast_1) == 0x000CB0, "Member 'BP_Character_C_MantleUpdate::CallFunc_Add_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_Add_DoubleDouble_A_ImplicitCast_2) == 0x000CB8, "Member 'BP_Character_C_MantleUpdate::CallFunc_Add_DoubleDouble_A_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_Add_DoubleDouble_A_ImplicitCast_3) == 0x000CC0, "Member 'BP_Character_C_MantleUpdate::CallFunc_Add_DoubleDouble_A_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_TLerp_Alpha_ImplicitCast_1) == 0x000CC8, "Member 'BP_Character_C_MantleUpdate::CallFunc_TLerp_Alpha_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_TLerp_Alpha_ImplicitCast_2) == 0x000CCC, "Member 'BP_Character_C_MantleUpdate::CallFunc_TLerp_Alpha_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_Add_DoubleDouble_B_ImplicitCast_1) == 0x000CD0, "Member 'BP_Character_C_MantleUpdate::CallFunc_Add_DoubleDouble_B_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_Add_DoubleDouble_B_ImplicitCast_2) == 0x000CD8, "Member 'BP_Character_C_MantleUpdate::CallFunc_Add_DoubleDouble_B_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_Add_DoubleDouble_B_ImplicitCast_3) == 0x000CE0, "Member 'BP_Character_C_MantleUpdate::CallFunc_Add_DoubleDouble_B_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x000CE8, "Member 'BP_Character_C_MantleUpdate::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x000CEC, "Member 'BP_Character_C_MantleUpdate::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_MakeRotator_Roll_ImplicitCast) == 0x000CF0, "Member 'BP_Character_C_MantleUpdate::CallFunc_MakeRotator_Roll_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_TLerp_Alpha_ImplicitCast_3) == 0x000CF4, "Member 'BP_Character_C_MantleUpdate::CallFunc_TLerp_Alpha_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_Add_DoubleDouble_A_ImplicitCast_4) == 0x000CF8, "Member 'BP_Character_C_MantleUpdate::CallFunc_Add_DoubleDouble_A_ImplicitCast_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_Add_DoubleDouble_A_ImplicitCast_5) == 0x000D00, "Member 'BP_Character_C_MantleUpdate::CallFunc_Add_DoubleDouble_A_ImplicitCast_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_Add_DoubleDouble_A_ImplicitCast_6) == 0x000D08, "Member 'BP_Character_C_MantleUpdate::CallFunc_Add_DoubleDouble_A_ImplicitCast_6' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_Add_DoubleDouble_B_ImplicitCast_4) == 0x000D10, "Member 'BP_Character_C_MantleUpdate::CallFunc_Add_DoubleDouble_B_ImplicitCast_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_Add_DoubleDouble_B_ImplicitCast_5) == 0x000D18, "Member 'BP_Character_C_MantleUpdate::CallFunc_Add_DoubleDouble_B_ImplicitCast_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_Add_DoubleDouble_B_ImplicitCast_6) == 0x000D20, "Member 'BP_Character_C_MantleUpdate::CallFunc_Add_DoubleDouble_B_ImplicitCast_6' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_MakeRotator_Roll_ImplicitCast_1) == 0x000D28, "Member 'BP_Character_C_MantleUpdate::CallFunc_MakeRotator_Roll_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_MakeRotator_Yaw_ImplicitCast_1) == 0x000D2C, "Member 'BP_Character_C_MantleUpdate::CallFunc_MakeRotator_Yaw_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MantleUpdate, CallFunc_MakeRotator_Pitch_ImplicitCast_1) == 0x000D30, "Member 'BP_Character_C_MantleUpdate::CallFunc_MakeRotator_Pitch_ImplicitCast_1' has a wrong offset!");

// Function BP_Character.BP_Character_C.MoveForward
// 0x0008 (0x0008 - 0x0000)
struct BP_Character_C_MoveForward final
{
public:
	double                                        Axis;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_MoveForward) == 0x000008, "Wrong alignment on BP_Character_C_MoveForward");
static_assert(sizeof(BP_Character_C_MoveForward) == 0x000008, "Wrong size on BP_Character_C_MoveForward");
static_assert(offsetof(BP_Character_C_MoveForward, Axis) == 0x000000, "Member 'BP_Character_C_MoveForward::Axis' has a wrong offset!");

// Function BP_Character.BP_Character_C.MoveForwardSRV
// 0x0008 (0x0008 - 0x0000)
struct BP_Character_C_MoveForwardSRV final
{
public:
	double                                        MoveForward;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_MoveForwardSRV) == 0x000008, "Wrong alignment on BP_Character_C_MoveForwardSRV");
static_assert(sizeof(BP_Character_C_MoveForwardSRV) == 0x000008, "Wrong size on BP_Character_C_MoveForwardSRV");
static_assert(offsetof(BP_Character_C_MoveForwardSRV, MoveForward) == 0x000000, "Member 'BP_Character_C_MoveForwardSRV::MoveForward' has a wrong offset!");

// Function BP_Character.BP_Character_C.MoveForwardVectorAll
// 0x0018 (0x0018 - 0x0000)
struct BP_Character_C_MoveForwardVectorAll final
{
public:
	struct FVector                                Param_MoveForwardVector;                           // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_MoveForwardVectorAll) == 0x000008, "Wrong alignment on BP_Character_C_MoveForwardVectorAll");
static_assert(sizeof(BP_Character_C_MoveForwardVectorAll) == 0x000018, "Wrong size on BP_Character_C_MoveForwardVectorAll");
static_assert(offsetof(BP_Character_C_MoveForwardVectorAll, Param_MoveForwardVector) == 0x000000, "Member 'BP_Character_C_MoveForwardVectorAll::Param_MoveForwardVector' has a wrong offset!");

// Function BP_Character.BP_Character_C.MoveForwardVectorSRV
// 0x0018 (0x0018 - 0x0000)
struct BP_Character_C_MoveForwardVectorSRV final
{
public:
	struct FVector                                Param_MoveForwardVector;                           // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_MoveForwardVectorSRV) == 0x000008, "Wrong alignment on BP_Character_C_MoveForwardVectorSRV");
static_assert(sizeof(BP_Character_C_MoveForwardVectorSRV) == 0x000018, "Wrong size on BP_Character_C_MoveForwardVectorSRV");
static_assert(offsetof(BP_Character_C_MoveForwardVectorSRV, Param_MoveForwardVector) == 0x000000, "Member 'BP_Character_C_MoveForwardVectorSRV::Param_MoveForwardVector' has a wrong offset!");

// Function BP_Character.BP_Character_C.MoveRight
// 0x0008 (0x0008 - 0x0000)
struct BP_Character_C_MoveRight final
{
public:
	double                                        Axis;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_MoveRight) == 0x000008, "Wrong alignment on BP_Character_C_MoveRight");
static_assert(sizeof(BP_Character_C_MoveRight) == 0x000008, "Wrong size on BP_Character_C_MoveRight");
static_assert(offsetof(BP_Character_C_MoveRight, Axis) == 0x000000, "Member 'BP_Character_C_MoveRight::Axis' has a wrong offset!");

// Function BP_Character.BP_Character_C.MoveRightSRV
// 0x0008 (0x0008 - 0x0000)
struct BP_Character_C_MoveRightSRV final
{
public:
	double                                        MoveRight;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_MoveRightSRV) == 0x000008, "Wrong alignment on BP_Character_C_MoveRightSRV");
static_assert(sizeof(BP_Character_C_MoveRightSRV) == 0x000008, "Wrong size on BP_Character_C_MoveRightSRV");
static_assert(offsetof(BP_Character_C_MoveRightSRV, MoveRight) == 0x000000, "Member 'BP_Character_C_MoveRightSRV::MoveRight' has a wrong offset!");

// Function BP_Character.BP_Character_C.MoveRightVectorAll
// 0x0018 (0x0018 - 0x0000)
struct BP_Character_C_MoveRightVectorAll final
{
public:
	struct FVector                                Param_MoveRightVector;                             // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_MoveRightVectorAll) == 0x000008, "Wrong alignment on BP_Character_C_MoveRightVectorAll");
static_assert(sizeof(BP_Character_C_MoveRightVectorAll) == 0x000018, "Wrong size on BP_Character_C_MoveRightVectorAll");
static_assert(offsetof(BP_Character_C_MoveRightVectorAll, Param_MoveRightVector) == 0x000000, "Member 'BP_Character_C_MoveRightVectorAll::Param_MoveRightVector' has a wrong offset!");

// Function BP_Character.BP_Character_C.MoveRightVectorSRV
// 0x0018 (0x0018 - 0x0000)
struct BP_Character_C_MoveRightVectorSRV final
{
public:
	struct FVector                                Param_MoveRightVector;                             // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_MoveRightVectorSRV) == 0x000008, "Wrong alignment on BP_Character_C_MoveRightVectorSRV");
static_assert(sizeof(BP_Character_C_MoveRightVectorSRV) == 0x000018, "Wrong size on BP_Character_C_MoveRightVectorSRV");
static_assert(offsetof(BP_Character_C_MoveRightVectorSRV, Param_MoveRightVector) == 0x000000, "Member 'BP_Character_C_MoveRightVectorSRV::Param_MoveRightVector' has a wrong offset!");

// Function BP_Character.BP_Character_C.MoveToTyrolienne
// 0x0008 (0x0008 - 0x0000)
struct BP_Character_C_MoveToTyrolienne final
{
public:
	class ABP_Tyrolienne_C*                       Tyro;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_MoveToTyrolienne) == 0x000008, "Wrong alignment on BP_Character_C_MoveToTyrolienne");
static_assert(sizeof(BP_Character_C_MoveToTyrolienne) == 0x000008, "Wrong size on BP_Character_C_MoveToTyrolienne");
static_assert(offsetof(BP_Character_C_MoveToTyrolienne, Tyro) == 0x000000, "Member 'BP_Character_C_MoveToTyrolienne::Tyro' has a wrong offset!");

// Function BP_Character.BP_Character_C.MultiLineTrace
// 0x0530 (0x0530 - 0x0000)
struct BP_Character_C_MultiLineTrace final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                End;                                               // 0x0018(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         X;                                                 // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Y;                                                 // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Spacing;                                           // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               DrawDebugType;                                     // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32AB[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DrawTime;                                          // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             OutHit;                                            // 0x0050(0x00E8)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x0138(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32AC[0x3];                                     // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SelectedIndex;                                     // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinHeight;                                         // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FHitResult>                     Hits;                                              // 0x0148(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	bool                                          Found;                                             // 0x0158(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32AD[0x7];                                     // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        Impacts;                                           // 0x0160(0x0010)(Edit, BlueprintVisible)
	int32                                         NewLocalVar_0;                                     // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue_1;            // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0180(0x0010)(ConstParm, ReferenceParm)
	int32                                         Temp_int_Variable;                                 // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32AE[0x4];                                     // 0x0194(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_IntFloat_ReturnValue_1;          // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32AF[0x3];                                     // 0x01A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32B0[0x4];                                     // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_IntFloat_ReturnValue_2;          // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_IntFloat_ReturnValue_3;          // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x01C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x01E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x01F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0210(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0228(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x0310(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0311(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0312(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0313(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0314(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0318(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32B1[0x4];                                     // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0320(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0338(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0350(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0368(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0380(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0388(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0390(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0398(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x03A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x03A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x03AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x03B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32B2[0x4];                                     // 0x03B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x03B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x03D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x03E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32B3[0x4];                                     // 0x03EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_Array_Get_Item;                           // 0x03F0(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_Array_Get_Item_1;                         // 0x04D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x04F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32B4[0x4];                                     // 0x04F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X;                            // 0x04F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0500(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0508(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0510(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0514(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32B5[0x3];                                     // 0x0515(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0518(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x051C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0520(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32B6[0x3];                                     // 0x0521(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0524(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LineTraceSingle_DrawTime_ImplicitCast;    // 0x0528(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_MultiLineTrace) == 0x000008, "Wrong alignment on BP_Character_C_MultiLineTrace");
static_assert(sizeof(BP_Character_C_MultiLineTrace) == 0x000530, "Wrong size on BP_Character_C_MultiLineTrace");
static_assert(offsetof(BP_Character_C_MultiLineTrace, Start) == 0x000000, "Member 'BP_Character_C_MultiLineTrace::Start' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, End) == 0x000018, "Member 'BP_Character_C_MultiLineTrace::End' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, X) == 0x000030, "Member 'BP_Character_C_MultiLineTrace::X' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, Y) == 0x000034, "Member 'BP_Character_C_MultiLineTrace::Y' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, Spacing) == 0x000038, "Member 'BP_Character_C_MultiLineTrace::Spacing' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, DrawDebugType) == 0x000040, "Member 'BP_Character_C_MultiLineTrace::DrawDebugType' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, DrawTime) == 0x000048, "Member 'BP_Character_C_MultiLineTrace::DrawTime' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, OutHit) == 0x000050, "Member 'BP_Character_C_MultiLineTrace::OutHit' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, ReturnValue) == 0x000138, "Member 'BP_Character_C_MultiLineTrace::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, SelectedIndex) == 0x00013C, "Member 'BP_Character_C_MultiLineTrace::SelectedIndex' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, MinHeight) == 0x000140, "Member 'BP_Character_C_MultiLineTrace::MinHeight' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, Hits) == 0x000148, "Member 'BP_Character_C_MultiLineTrace::Hits' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, Found) == 0x000158, "Member 'BP_Character_C_MultiLineTrace::Found' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, Impacts) == 0x000160, "Member 'BP_Character_C_MultiLineTrace::Impacts' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, NewLocalVar_0) == 0x000170, "Member 'BP_Character_C_MultiLineTrace::NewLocalVar_0' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_Multiply_IntInt_ReturnValue) == 0x000174, "Member 'BP_Character_C_MultiLineTrace::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_Multiply_IntInt_ReturnValue_1) == 0x000178, "Member 'BP_Character_C_MultiLineTrace::CallFunc_Multiply_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, Temp_int_Array_Index_Variable) == 0x00017C, "Member 'BP_Character_C_MultiLineTrace::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, Temp_object_Variable) == 0x000180, "Member 'BP_Character_C_MultiLineTrace::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, Temp_int_Variable) == 0x000190, "Member 'BP_Character_C_MultiLineTrace::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000198, "Member 'BP_Character_C_MultiLineTrace::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_Multiply_IntFloat_ReturnValue_1) == 0x0001A0, "Member 'BP_Character_C_MultiLineTrace::CallFunc_Multiply_IntFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0001A8, "Member 'BP_Character_C_MultiLineTrace::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_Add_IntInt_ReturnValue) == 0x0001AC, "Member 'BP_Character_C_MultiLineTrace::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, Temp_int_Variable_1) == 0x0001B0, "Member 'BP_Character_C_MultiLineTrace::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_Multiply_IntFloat_ReturnValue_2) == 0x0001B8, "Member 'BP_Character_C_MultiLineTrace::CallFunc_Multiply_IntFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_Multiply_IntFloat_ReturnValue_3) == 0x0001C0, "Member 'BP_Character_C_MultiLineTrace::CallFunc_Multiply_IntFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_MakeVector_ReturnValue) == 0x0001C8, "Member 'BP_Character_C_MultiLineTrace::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_MakeVector_ReturnValue_1) == 0x0001E0, "Member 'BP_Character_C_MultiLineTrace::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_Add_VectorVector_ReturnValue) == 0x0001F8, "Member 'BP_Character_C_MultiLineTrace::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000210, "Member 'BP_Character_C_MultiLineTrace::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_LineTraceSingle_OutHit) == 0x000228, "Member 'BP_Character_C_MultiLineTrace::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_LineTraceSingle_ReturnValue) == 0x000310, "Member 'BP_Character_C_MultiLineTrace::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000311, "Member 'BP_Character_C_MultiLineTrace::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_BreakHitResult_bBlockingHit) == 0x000312, "Member 'BP_Character_C_MultiLineTrace::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_BreakHitResult_bInitialOverlap) == 0x000313, "Member 'BP_Character_C_MultiLineTrace::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_BreakHitResult_Time) == 0x000314, "Member 'BP_Character_C_MultiLineTrace::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_BreakHitResult_Distance) == 0x000318, "Member 'BP_Character_C_MultiLineTrace::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_BreakHitResult_Location) == 0x000320, "Member 'BP_Character_C_MultiLineTrace::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_BreakHitResult_ImpactPoint) == 0x000338, "Member 'BP_Character_C_MultiLineTrace::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_BreakHitResult_Normal) == 0x000350, "Member 'BP_Character_C_MultiLineTrace::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_BreakHitResult_ImpactNormal) == 0x000368, "Member 'BP_Character_C_MultiLineTrace::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_BreakHitResult_PhysMat) == 0x000380, "Member 'BP_Character_C_MultiLineTrace::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_BreakHitResult_HitActor) == 0x000388, "Member 'BP_Character_C_MultiLineTrace::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_BreakHitResult_HitComponent) == 0x000390, "Member 'BP_Character_C_MultiLineTrace::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_BreakHitResult_HitBoneName) == 0x000398, "Member 'BP_Character_C_MultiLineTrace::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_BreakHitResult_BoneName) == 0x0003A0, "Member 'BP_Character_C_MultiLineTrace::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_BreakHitResult_HitItem) == 0x0003A8, "Member 'BP_Character_C_MultiLineTrace::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_BreakHitResult_ElementIndex) == 0x0003AC, "Member 'BP_Character_C_MultiLineTrace::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_BreakHitResult_FaceIndex) == 0x0003B0, "Member 'BP_Character_C_MultiLineTrace::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_BreakHitResult_TraceStart) == 0x0003B8, "Member 'BP_Character_C_MultiLineTrace::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_BreakHitResult_TraceEnd) == 0x0003D0, "Member 'BP_Character_C_MultiLineTrace::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_Add_IntInt_ReturnValue_1) == 0x0003E8, "Member 'BP_Character_C_MultiLineTrace::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_Array_Get_Item) == 0x0003F0, "Member 'BP_Character_C_MultiLineTrace::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_Array_Get_Item_1) == 0x0004D8, "Member 'BP_Character_C_MultiLineTrace::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_Array_Add_ReturnValue) == 0x0004F0, "Member 'BP_Character_C_MultiLineTrace::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_BreakVector_X) == 0x0004F8, "Member 'BP_Character_C_MultiLineTrace::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_BreakVector_Y) == 0x000500, "Member 'BP_Character_C_MultiLineTrace::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_BreakVector_Z) == 0x000508, "Member 'BP_Character_C_MultiLineTrace::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_Array_Length_ReturnValue) == 0x000510, "Member 'BP_Character_C_MultiLineTrace::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000514, "Member 'BP_Character_C_MultiLineTrace::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, Temp_int_Loop_Counter_Variable) == 0x000518, "Member 'BP_Character_C_MultiLineTrace::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_Array_Add_ReturnValue_1) == 0x00051C, "Member 'BP_Character_C_MultiLineTrace::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_Less_IntInt_ReturnValue) == 0x000520, "Member 'BP_Character_C_MultiLineTrace::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_Add_IntInt_ReturnValue_2) == 0x000524, "Member 'BP_Character_C_MultiLineTrace::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_MultiLineTrace, CallFunc_LineTraceSingle_DrawTime_ImplicitCast) == 0x000528, "Member 'BP_Character_C_MultiLineTrace::CallFunc_LineTraceSingle_DrawTime_ImplicitCast' has a wrong offset!");

// Function BP_Character.BP_Character_C.OnGaitChanged
// 0x0002 (0x0002 - 0x0000)
struct BP_Character_C_OnGaitChanged final
{
public:
	EALS_Gait                                     NewActualGait;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_Gait                                     PreviousActualGait;                                // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_OnGaitChanged) == 0x000001, "Wrong alignment on BP_Character_C_OnGaitChanged");
static_assert(sizeof(BP_Character_C_OnGaitChanged) == 0x000002, "Wrong size on BP_Character_C_OnGaitChanged");
static_assert(offsetof(BP_Character_C_OnGaitChanged, NewActualGait) == 0x000000, "Member 'BP_Character_C_OnGaitChanged::NewActualGait' has a wrong offset!");
static_assert(offsetof(BP_Character_C_OnGaitChanged, PreviousActualGait) == 0x000001, "Member 'BP_Character_C_OnGaitChanged::PreviousActualGait' has a wrong offset!");

// Function BP_Character.BP_Character_C.OnMovementActionChanged
// 0x0004 (0x0004 - 0x0000)
struct BP_Character_C_OnMovementActionChanged final
{
public:
	EALS_MovementAction                           NewMovementAction;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_MovementAction                           PreviousMovementAction;                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_OnMovementActionChanged) == 0x000001, "Wrong alignment on BP_Character_C_OnMovementActionChanged");
static_assert(sizeof(BP_Character_C_OnMovementActionChanged) == 0x000004, "Wrong size on BP_Character_C_OnMovementActionChanged");
static_assert(offsetof(BP_Character_C_OnMovementActionChanged, NewMovementAction) == 0x000000, "Member 'BP_Character_C_OnMovementActionChanged::NewMovementAction' has a wrong offset!");
static_assert(offsetof(BP_Character_C_OnMovementActionChanged, PreviousMovementAction) == 0x000001, "Member 'BP_Character_C_OnMovementActionChanged::PreviousMovementAction' has a wrong offset!");
static_assert(offsetof(BP_Character_C_OnMovementActionChanged, K2Node_SwitchEnum_CmpSuccess) == 0x000002, "Member 'BP_Character_C_OnMovementActionChanged::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_OnMovementActionChanged, K2Node_SwitchEnum_CmpSuccess_1) == 0x000003, "Member 'BP_Character_C_OnMovementActionChanged::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");

// Function BP_Character.BP_Character_C.OnMovementStateChanged
// 0x0028 (0x0028 - 0x0000)
struct BP_Character_C_OnMovementStateChanged final
{
public:
	EALS_MovementState                            NewMovementState;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_MovementState                            PreviousMovementState;                             // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32B7[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_OnMovementStateChanged) == 0x000008, "Wrong alignment on BP_Character_C_OnMovementStateChanged");
static_assert(sizeof(BP_Character_C_OnMovementStateChanged) == 0x000028, "Wrong size on BP_Character_C_OnMovementStateChanged");
static_assert(offsetof(BP_Character_C_OnMovementStateChanged, NewMovementState) == 0x000000, "Member 'BP_Character_C_OnMovementStateChanged::NewMovementState' has a wrong offset!");
static_assert(offsetof(BP_Character_C_OnMovementStateChanged, PreviousMovementState) == 0x000001, "Member 'BP_Character_C_OnMovementStateChanged::PreviousMovementState' has a wrong offset!");
static_assert(offsetof(BP_Character_C_OnMovementStateChanged, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000008, "Member 'BP_Character_C_OnMovementStateChanged::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_OnMovementStateChanged, K2Node_SwitchEnum_CmpSuccess) == 0x000020, "Member 'BP_Character_C_OnMovementStateChanged::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_OnMovementStateChanged, K2Node_SwitchEnum_CmpSuccess_1) == 0x000021, "Member 'BP_Character_C_OnMovementStateChanged::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");

// Function BP_Character.BP_Character_C.OnOverlayStateChanged
// 0x0002 (0x0002 - 0x0000)
struct BP_Character_C_OnOverlayStateChanged final
{
public:
	EALS_OverlayState                             NewOverlayState;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_OverlayState                             PreviousOverlayState;                              // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_OnOverlayStateChanged) == 0x000001, "Wrong alignment on BP_Character_C_OnOverlayStateChanged");
static_assert(sizeof(BP_Character_C_OnOverlayStateChanged) == 0x000002, "Wrong size on BP_Character_C_OnOverlayStateChanged");
static_assert(offsetof(BP_Character_C_OnOverlayStateChanged, NewOverlayState) == 0x000000, "Member 'BP_Character_C_OnOverlayStateChanged::NewOverlayState' has a wrong offset!");
static_assert(offsetof(BP_Character_C_OnOverlayStateChanged, PreviousOverlayState) == 0x000001, "Member 'BP_Character_C_OnOverlayStateChanged::PreviousOverlayState' has a wrong offset!");

// Function BP_Character.BP_Character_C.OnRep_FlyMode
// 0x0010 (0x0010 - 0x0000)
struct BP_Character_C_OnRep_FlyMode final
{
public:
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32B8[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_FlyMode_C*                           CallFunc_Create_ReturnValue;                       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_OnRep_FlyMode) == 0x000008, "Wrong alignment on BP_Character_C_OnRep_FlyMode");
static_assert(sizeof(BP_Character_C_OnRep_FlyMode) == 0x000010, "Wrong size on BP_Character_C_OnRep_FlyMode");
static_assert(offsetof(BP_Character_C_OnRep_FlyMode, CallFunc_IsLocallyControlled_ReturnValue) == 0x000000, "Member 'BP_Character_C_OnRep_FlyMode::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_OnRep_FlyMode, CallFunc_Create_ReturnValue) == 0x000008, "Member 'BP_Character_C_OnRep_FlyMode::CallFunc_Create_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.OnRep_Pseudo
// 0x0028 (0x0028 - 0x0000)
struct BP_Character_C_OnRep_Pseudo final
{
public:
	class UW_Pseudo_C*                            CallFunc_Create_ReturnValue;                       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32B9[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_OnRep_Pseudo) == 0x000008, "Wrong alignment on BP_Character_C_OnRep_Pseudo");
static_assert(sizeof(BP_Character_C_OnRep_Pseudo) == 0x000028, "Wrong size on BP_Character_C_OnRep_Pseudo");
static_assert(offsetof(BP_Character_C_OnRep_Pseudo, CallFunc_Create_ReturnValue) == 0x000000, "Member 'BP_Character_C_OnRep_Pseudo::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_OnRep_Pseudo, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_Character_C_OnRep_Pseudo::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_OnRep_Pseudo, CallFunc_GetController_ReturnValue) == 0x000010, "Member 'BP_Character_C_OnRep_Pseudo::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_OnRep_Pseudo, CallFunc_GetPlayerController_ReturnValue) == 0x000018, "Member 'BP_Character_C_OnRep_Pseudo::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_OnRep_Pseudo, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000020, "Member 'BP_Character_C_OnRep_Pseudo::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_OnRep_Pseudo, CallFunc_Not_PreBool_ReturnValue) == 0x000021, "Member 'BP_Character_C_OnRep_Pseudo::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.OnRep_PullingCharacter
// 0x0040 (0x0040 - 0x0000)
struct BP_Character_C_OnRep_PullingCharacter final
{
public:
	TScriptInterface<class IBPI_Character_C>      K2Node_DynamicCast_AsBPI_Character;                // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32BA[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IALS_Animation_BPI_C>  K2Node_DynamicCast_AsALS_Animation_BPI;            // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32BB[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCapsuleComponent*                      CallFunc_GetCapsuleComponent_Capsule;              // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_OnRep_PullingCharacter) == 0x000008, "Wrong alignment on BP_Character_C_OnRep_PullingCharacter");
static_assert(sizeof(BP_Character_C_OnRep_PullingCharacter) == 0x000040, "Wrong size on BP_Character_C_OnRep_PullingCharacter");
static_assert(offsetof(BP_Character_C_OnRep_PullingCharacter, K2Node_DynamicCast_AsBPI_Character) == 0x000000, "Member 'BP_Character_C_OnRep_PullingCharacter::K2Node_DynamicCast_AsBPI_Character' has a wrong offset!");
static_assert(offsetof(BP_Character_C_OnRep_PullingCharacter, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_Character_C_OnRep_PullingCharacter::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_OnRep_PullingCharacter, K2Node_DynamicCast_AsALS_Animation_BPI) == 0x000018, "Member 'BP_Character_C_OnRep_PullingCharacter::K2Node_DynamicCast_AsALS_Animation_BPI' has a wrong offset!");
static_assert(offsetof(BP_Character_C_OnRep_PullingCharacter, K2Node_DynamicCast_bSuccess_1) == 0x000028, "Member 'BP_Character_C_OnRep_PullingCharacter::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_OnRep_PullingCharacter, CallFunc_GetCapsuleComponent_Capsule) == 0x000030, "Member 'BP_Character_C_OnRep_PullingCharacter::CallFunc_GetCapsuleComponent_Capsule' has a wrong offset!");
static_assert(offsetof(BP_Character_C_OnRep_PullingCharacter, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'BP_Character_C_OnRep_PullingCharacter::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.OnRotationModeChanged
// 0x0004 (0x0004 - 0x0000)
struct BP_Character_C_OnRotationModeChanged final
{
public:
	EALS_RotationMode                             NewRotationMode;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_RotationMode                             PreviousRotationMode;                              // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_OnRotationModeChanged) == 0x000001, "Wrong alignment on BP_Character_C_OnRotationModeChanged");
static_assert(sizeof(BP_Character_C_OnRotationModeChanged) == 0x000004, "Wrong size on BP_Character_C_OnRotationModeChanged");
static_assert(offsetof(BP_Character_C_OnRotationModeChanged, NewRotationMode) == 0x000000, "Member 'BP_Character_C_OnRotationModeChanged::NewRotationMode' has a wrong offset!");
static_assert(offsetof(BP_Character_C_OnRotationModeChanged, PreviousRotationMode) == 0x000001, "Member 'BP_Character_C_OnRotationModeChanged::PreviousRotationMode' has a wrong offset!");
static_assert(offsetof(BP_Character_C_OnRotationModeChanged, K2Node_SwitchEnum_CmpSuccess) == 0x000002, "Member 'BP_Character_C_OnRotationModeChanged::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_OnRotationModeChanged, K2Node_SwitchEnum_CmpSuccess_1) == 0x000003, "Member 'BP_Character_C_OnRotationModeChanged::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");

// Function BP_Character.BP_Character_C.OnViewModeChanged
// 0x0005 (0x0005 - 0x0000)
struct BP_Character_C_OnViewModeChanged final
{
public:
	EALS_ViewMode                                 NewViewMode;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_ViewMode                                 PreviousViewMode;                                  // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_OnViewModeChanged) == 0x000001, "Wrong alignment on BP_Character_C_OnViewModeChanged");
static_assert(sizeof(BP_Character_C_OnViewModeChanged) == 0x000005, "Wrong size on BP_Character_C_OnViewModeChanged");
static_assert(offsetof(BP_Character_C_OnViewModeChanged, NewViewMode) == 0x000000, "Member 'BP_Character_C_OnViewModeChanged::NewViewMode' has a wrong offset!");
static_assert(offsetof(BP_Character_C_OnViewModeChanged, PreviousViewMode) == 0x000001, "Member 'BP_Character_C_OnViewModeChanged::PreviousViewMode' has a wrong offset!");
static_assert(offsetof(BP_Character_C_OnViewModeChanged, K2Node_SwitchEnum_CmpSuccess) == 0x000002, "Member 'BP_Character_C_OnViewModeChanged::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_OnViewModeChanged, K2Node_SwitchEnum_CmpSuccess_1) == 0x000003, "Member 'BP_Character_C_OnViewModeChanged::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_OnViewModeChanged, K2Node_SwitchEnum_CmpSuccess_2) == 0x000004, "Member 'BP_Character_C_OnViewModeChanged::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");

// Function BP_Character.BP_Character_C.PlayEffortSound
// 0x0028 (0x0028 - 0x0000)
struct BP_Character_C_PlayEffortSound final
{
public:
	float                                         Weight;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RandomBoolWithWeight_ReturnValue;         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32BC[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CallFunc_SpawnSoundAtLocation_ReturnValue;         // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_PlayEffortSound) == 0x000008, "Wrong alignment on BP_Character_C_PlayEffortSound");
static_assert(sizeof(BP_Character_C_PlayEffortSound) == 0x000028, "Wrong size on BP_Character_C_PlayEffortSound");
static_assert(offsetof(BP_Character_C_PlayEffortSound, Weight) == 0x000000, "Member 'BP_Character_C_PlayEffortSound::Weight' has a wrong offset!");
static_assert(offsetof(BP_Character_C_PlayEffortSound, CallFunc_RandomBoolWithWeight_ReturnValue) == 0x000004, "Member 'BP_Character_C_PlayEffortSound::CallFunc_RandomBoolWithWeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_PlayEffortSound, CallFunc_GetSocketLocation_ReturnValue) == 0x000008, "Member 'BP_Character_C_PlayEffortSound::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_PlayEffortSound, CallFunc_SpawnSoundAtLocation_ReturnValue) == 0x000020, "Member 'BP_Character_C_PlayEffortSound::CallFunc_SpawnSoundAtLocation_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.PlayMantleMontage
// 0x0030 (0x0030 - 0x0000)
struct BP_Character_C_PlayMantleMontage final
{
public:
	struct FMantle_Params                         Param_Mantle_Params;                               // 0x0000(0x0030)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_PlayMantleMontage) == 0x000008, "Wrong alignment on BP_Character_C_PlayMantleMontage");
static_assert(sizeof(BP_Character_C_PlayMantleMontage) == 0x000030, "Wrong size on BP_Character_C_PlayMantleMontage");
static_assert(offsetof(BP_Character_C_PlayMantleMontage, Param_Mantle_Params) == 0x000000, "Member 'BP_Character_C_PlayMantleMontage::Param_Mantle_Params' has a wrong offset!");

// Function BP_Character.BP_Character_C.PlayVoiceSRV
// 0x0010 (0x0010 - 0x0000)
struct BP_Character_C_PlayVoiceSRV final
{
public:
	TArray<uint8>                                 Data;                                              // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_Character_C_PlayVoiceSRV) == 0x000008, "Wrong alignment on BP_Character_C_PlayVoiceSRV");
static_assert(sizeof(BP_Character_C_PlayVoiceSRV) == 0x000010, "Wrong size on BP_Character_C_PlayVoiceSRV");
static_assert(offsetof(BP_Character_C_PlayVoiceSRV, Data) == 0x000000, "Member 'BP_Character_C_PlayVoiceSRV::Data' has a wrong offset!");

// Function BP_Character.BP_Character_C.ReactivatePhysics
// 0x0360 (0x0360 - 0x0000)
struct BP_Character_C_ReactivatePhysics final
{
public:
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32BD[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32BE[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32BF[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_ChainPhysics_C>   K2Node_DynamicCast_AsBPI_Chain_Physics;            // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32C0[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x0060(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32C1[0x7];                                     // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0150(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0238(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32C2[0x4];                                     // 0x025C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0260(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult_1;     // 0x0278(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Character_C_ReactivatePhysics) == 0x000008, "Wrong alignment on BP_Character_C_ReactivatePhysics");
static_assert(sizeof(BP_Character_C_ReactivatePhysics) == 0x000360, "Wrong size on BP_Character_C_ReactivatePhysics");
static_assert(offsetof(BP_Character_C_ReactivatePhysics, CallFunc_MakeVector_ReturnValue) == 0x000000, "Member 'BP_Character_C_ReactivatePhysics::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ReactivatePhysics, Temp_int_Array_Index_Variable) == 0x000018, "Member 'BP_Character_C_ReactivatePhysics::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ReactivatePhysics, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'BP_Character_C_ReactivatePhysics::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ReactivatePhysics, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'BP_Character_C_ReactivatePhysics::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ReactivatePhysics, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_Character_C_ReactivatePhysics::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ReactivatePhysics, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'BP_Character_C_ReactivatePhysics::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ReactivatePhysics, CallFunc_GetOwner_ReturnValue) == 0x000038, "Member 'BP_Character_C_ReactivatePhysics::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ReactivatePhysics, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'BP_Character_C_ReactivatePhysics::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ReactivatePhysics, K2Node_DynamicCast_AsBPI_Chain_Physics) == 0x000048, "Member 'BP_Character_C_ReactivatePhysics::K2Node_DynamicCast_AsBPI_Chain_Physics' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ReactivatePhysics, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'BP_Character_C_ReactivatePhysics::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ReactivatePhysics, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x000060, "Member 'BP_Character_C_ReactivatePhysics::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ReactivatePhysics, CallFunc_K2_AttachToComponent_ReturnValue) == 0x000148, "Member 'BP_Character_C_ReactivatePhysics::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ReactivatePhysics, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000150, "Member 'BP_Character_C_ReactivatePhysics::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ReactivatePhysics, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000238, "Member 'BP_Character_C_ReactivatePhysics::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ReactivatePhysics, CallFunc_BreakRotator_Roll) == 0x000250, "Member 'BP_Character_C_ReactivatePhysics::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ReactivatePhysics, CallFunc_BreakRotator_Pitch) == 0x000254, "Member 'BP_Character_C_ReactivatePhysics::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ReactivatePhysics, CallFunc_BreakRotator_Yaw) == 0x000258, "Member 'BP_Character_C_ReactivatePhysics::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ReactivatePhysics, CallFunc_MakeRotator_ReturnValue) == 0x000260, "Member 'BP_Character_C_ReactivatePhysics::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ReactivatePhysics, CallFunc_K2_SetWorldRotation_SweepHitResult_1) == 0x000278, "Member 'BP_Character_C_ReactivatePhysics::CallFunc_K2_SetWorldRotation_SweepHitResult_1' has a wrong offset!");

// Function BP_Character.BP_Character_C.ReceivePossessed
// 0x0008 (0x0008 - 0x0000)
struct BP_Character_C_ReceivePossessed final
{
public:
	class AController*                            NewController;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_ReceivePossessed) == 0x000008, "Wrong alignment on BP_Character_C_ReceivePossessed");
static_assert(sizeof(BP_Character_C_ReceivePossessed) == 0x000008, "Wrong size on BP_Character_C_ReceivePossessed");
static_assert(offsetof(BP_Character_C_ReceivePossessed, NewController) == 0x000000, "Member 'BP_Character_C_ReceivePossessed::NewController' has a wrong offset!");

// Function BP_Character.BP_Character_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_Character_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_Character_C_ReceiveTick");
static_assert(sizeof(BP_Character_C_ReceiveTick) == 0x000004, "Wrong size on BP_Character_C_ReceiveTick");
static_assert(offsetof(BP_Character_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_Character_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_Character.BP_Character_C.RepControlRotSRV
// 0x0018 (0x0018 - 0x0000)
struct BP_Character_C_RepControlRotSRV final
{
public:
	struct FRotator                               DesiredControlRotation;                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Character_C_RepControlRotSRV) == 0x000008, "Wrong alignment on BP_Character_C_RepControlRotSRV");
static_assert(sizeof(BP_Character_C_RepControlRotSRV) == 0x000018, "Wrong size on BP_Character_C_RepControlRotSRV");
static_assert(offsetof(BP_Character_C_RepControlRotSRV, DesiredControlRotation) == 0x000000, "Member 'BP_Character_C_RepControlRotSRV::DesiredControlRotation' has a wrong offset!");

// Function BP_Character.BP_Character_C.Replicate Location
// 0x0538 (0x0538 - 0x0000)
struct BP_Character_C_Replicate_Location final
{
public:
	bool                                          MaxDistance;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32C3[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlaying_ReturnValue;                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32C4[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32C5[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue_1;                      // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_1;            // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue_1;       // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_ReturnValue;                    // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlaying_ReturnValue_1;                  // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32C6[0x7];                                     // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlaying_ReturnValue_2;                  // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32C7[0x7];                                     // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue_1;                // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32C8[0x7];                                     // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_3;        // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CheckMaxDistanceWithOthers_Distance;      // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32C9[0x4];                                     // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue_2;       // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DetectDesync_Desync;                      // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32CA[0x6];                                     // 0x011A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetPhysicsLinearVelocity_ReturnValue;     // 0x0120(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VInterpTo_ReturnValue;                    // 0x0138(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLocalMultiplayer_ReturnValue;          // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32CB[0x7];                                     // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue_3;       // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_1;               // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32CC[0x7];                                     // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_VInterpTo_ReturnValue_1;                  // 0x0168(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue;                 // 0x0180(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0198(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue;      // 0x0281(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue_1;    // 0x0282(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_1;        // 0x0283(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0284(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0285(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_2;               // 0x0286(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32CD[0x1];                                     // 0x0287(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue_2;                // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue_4;       // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VInterpTo_ReturnValue_2;                  // 0x0298(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult_1;     // 0x02B0(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue_1;        // 0x0398(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32CE[0x7];                                     // 0x0399(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x03A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x03B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue_1;    // 0x03D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x03E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0400(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0404(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0408(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32CF[0x4];                                     // 0x040C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x0410(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue;        // 0x04F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_2;        // 0x04F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32D0[0x2];                                     // 0x04FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_VInterpTo_DeltaTime_ImplicitCast;         // 0x04FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VInterpTo_InterpSpeed_ImplicitCast;       // 0x0500(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32D1[0x4];                                     // 0x0504(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x0508(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VInterpTo_DeltaTime_ImplicitCast_1;       // 0x0510(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VInterpTo_DeltaTime_ImplicitCast_2;       // 0x0514(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VInterpTo_InterpSpeed_ImplicitCast_1;     // 0x0518(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RInterpTo_DeltaTime_ImplicitCast;         // 0x051C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x0520(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32D2[0x4];                                     // 0x0524(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_ReplicateCapsuleRotation_RepCapsuleYaw_ImplicitCast; // 0x0528(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NotEqual_DoubleDouble_A_ImplicitCast;     // 0x0530(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_Replicate_Location) == 0x000008, "Wrong alignment on BP_Character_C_Replicate_Location");
static_assert(sizeof(BP_Character_C_Replicate_Location) == 0x000538, "Wrong size on BP_Character_C_Replicate_Location");
static_assert(offsetof(BP_Character_C_Replicate_Location, MaxDistance) == 0x000000, "Member 'BP_Character_C_Replicate_Location::MaxDistance' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000008, "Member 'BP_Character_C_Replicate_Location::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_IsPlaying_ReturnValue) == 0x000010, "Member 'BP_Character_C_Replicate_Location::CallFunc_IsPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'BP_Character_C_Replicate_Location::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_IsLocallyControlled_ReturnValue) == 0x000030, "Member 'BP_Character_C_Replicate_Location::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_VSize_ReturnValue) == 0x000038, "Member 'BP_Character_C_Replicate_Location::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_BreakVector_X) == 0x000040, "Member 'BP_Character_C_Replicate_Location::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_BreakVector_Y) == 0x000048, "Member 'BP_Character_C_Replicate_Location::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_BreakVector_Z) == 0x000050, "Member 'BP_Character_C_Replicate_Location::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_MapRangeClamped_ReturnValue) == 0x000058, "Member 'BP_Character_C_Replicate_Location::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_MakeVector_ReturnValue) == 0x000060, "Member 'BP_Character_C_Replicate_Location::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_VSize_ReturnValue_1) == 0x000078, "Member 'BP_Character_C_Replicate_Location::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_MapRangeClamped_ReturnValue_1) == 0x000080, "Member 'BP_Character_C_Replicate_Location::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_GetWorldDeltaSeconds_ReturnValue_1) == 0x000088, "Member 'BP_Character_C_Replicate_Location::CallFunc_GetWorldDeltaSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_SelectFloat_ReturnValue) == 0x000090, "Member 'BP_Character_C_Replicate_Location::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_FInterpTo_ReturnValue) == 0x000098, "Member 'BP_Character_C_Replicate_Location::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_IsPlaying_ReturnValue_1) == 0x0000A0, "Member 'BP_Character_C_Replicate_Location::CallFunc_IsPlaying_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x0000A8, "Member 'BP_Character_C_Replicate_Location::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_IsPlaying_ReturnValue_2) == 0x0000C0, "Member 'BP_Character_C_Replicate_Location::CallFunc_IsPlaying_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_SelectFloat_ReturnValue_1) == 0x0000C8, "Member 'BP_Character_C_Replicate_Location::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x0000D0, "Member 'BP_Character_C_Replicate_Location::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_HasAuthority_ReturnValue) == 0x0000E8, "Member 'BP_Character_C_Replicate_Location::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_K2_GetActorLocation_ReturnValue_3) == 0x0000F0, "Member 'BP_Character_C_Replicate_Location::CallFunc_K2_GetActorLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_CheckMaxDistanceWithOthers_Distance) == 0x000108, "Member 'BP_Character_C_Replicate_Location::CallFunc_CheckMaxDistanceWithOthers_Distance' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_GetWorldDeltaSeconds_ReturnValue_2) == 0x000110, "Member 'BP_Character_C_Replicate_Location::CallFunc_GetWorldDeltaSeconds_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000118, "Member 'BP_Character_C_Replicate_Location::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_DetectDesync_Desync) == 0x000119, "Member 'BP_Character_C_Replicate_Location::CallFunc_DetectDesync_Desync' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_GetPhysicsLinearVelocity_ReturnValue) == 0x000120, "Member 'BP_Character_C_Replicate_Location::CallFunc_GetPhysicsLinearVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_VInterpTo_ReturnValue) == 0x000138, "Member 'BP_Character_C_Replicate_Location::CallFunc_VInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_GetLocalMultiplayer_ReturnValue) == 0x000150, "Member 'BP_Character_C_Replicate_Location::CallFunc_GetLocalMultiplayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_GetWorldDeltaSeconds_ReturnValue_3) == 0x000158, "Member 'BP_Character_C_Replicate_Location::CallFunc_GetWorldDeltaSeconds_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_HasAuthority_ReturnValue_1) == 0x000160, "Member 'BP_Character_C_Replicate_Location::CallFunc_HasAuthority_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_VInterpTo_ReturnValue_1) == 0x000168, "Member 'BP_Character_C_Replicate_Location::CallFunc_VInterpTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_SelectVector_ReturnValue) == 0x000180, "Member 'BP_Character_C_Replicate_Location::CallFunc_SelectVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000198, "Member 'BP_Character_C_Replicate_Location::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_K2_SetActorLocation_ReturnValue) == 0x000280, "Member 'BP_Character_C_Replicate_Location::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_EqualEqual_VectorVector_ReturnValue) == 0x000281, "Member 'BP_Character_C_Replicate_Location::CallFunc_EqualEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_EqualEqual_VectorVector_ReturnValue_1) == 0x000282, "Member 'BP_Character_C_Replicate_Location::CallFunc_EqualEqual_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_IsLocallyControlled_ReturnValue_1) == 0x000283, "Member 'BP_Character_C_Replicate_Location::CallFunc_IsLocallyControlled_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_IsValid_ReturnValue) == 0x000284, "Member 'BP_Character_C_Replicate_Location::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_IsValid_ReturnValue_1) == 0x000285, "Member 'BP_Character_C_Replicate_Location::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_HasAuthority_ReturnValue_2) == 0x000286, "Member 'BP_Character_C_Replicate_Location::CallFunc_HasAuthority_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_SelectFloat_ReturnValue_2) == 0x000288, "Member 'BP_Character_C_Replicate_Location::CallFunc_SelectFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_GetWorldDeltaSeconds_ReturnValue_4) == 0x000290, "Member 'BP_Character_C_Replicate_Location::CallFunc_GetWorldDeltaSeconds_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_VInterpTo_ReturnValue_2) == 0x000298, "Member 'BP_Character_C_Replicate_Location::CallFunc_VInterpTo_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_K2_SetActorLocation_SweepHitResult_1) == 0x0002B0, "Member 'BP_Character_C_Replicate_Location::CallFunc_K2_SetActorLocation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_K2_SetActorLocation_ReturnValue_1) == 0x000398, "Member 'BP_Character_C_Replicate_Location::CallFunc_K2_SetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_MakeRotator_ReturnValue) == 0x0003A0, "Member 'BP_Character_C_Replicate_Location::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x0003B8, "Member 'BP_Character_C_Replicate_Location::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_K2_GetComponentRotation_ReturnValue_1) == 0x0003D0, "Member 'BP_Character_C_Replicate_Location::CallFunc_K2_GetComponentRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_RInterpTo_ReturnValue) == 0x0003E8, "Member 'BP_Character_C_Replicate_Location::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_BreakRotator_Roll) == 0x000400, "Member 'BP_Character_C_Replicate_Location::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_BreakRotator_Pitch) == 0x000404, "Member 'BP_Character_C_Replicate_Location::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_BreakRotator_Yaw) == 0x000408, "Member 'BP_Character_C_Replicate_Location::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x000410, "Member 'BP_Character_C_Replicate_Location::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_NotEqual_DoubleDouble_ReturnValue) == 0x0004F8, "Member 'BP_Character_C_Replicate_Location::CallFunc_NotEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_IsLocallyControlled_ReturnValue_2) == 0x0004F9, "Member 'BP_Character_C_Replicate_Location::CallFunc_IsLocallyControlled_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_VInterpTo_DeltaTime_ImplicitCast) == 0x0004FC, "Member 'BP_Character_C_Replicate_Location::CallFunc_VInterpTo_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_VInterpTo_InterpSpeed_ImplicitCast) == 0x000500, "Member 'BP_Character_C_Replicate_Location::CallFunc_VInterpTo_InterpSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x000508, "Member 'BP_Character_C_Replicate_Location::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_VInterpTo_DeltaTime_ImplicitCast_1) == 0x000510, "Member 'BP_Character_C_Replicate_Location::CallFunc_VInterpTo_DeltaTime_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_VInterpTo_DeltaTime_ImplicitCast_2) == 0x000514, "Member 'BP_Character_C_Replicate_Location::CallFunc_VInterpTo_DeltaTime_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_VInterpTo_InterpSpeed_ImplicitCast_1) == 0x000518, "Member 'BP_Character_C_Replicate_Location::CallFunc_VInterpTo_InterpSpeed_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_RInterpTo_DeltaTime_ImplicitCast) == 0x00051C, "Member 'BP_Character_C_Replicate_Location::CallFunc_RInterpTo_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x000520, "Member 'BP_Character_C_Replicate_Location::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_ReplicateCapsuleRotation_RepCapsuleYaw_ImplicitCast) == 0x000528, "Member 'BP_Character_C_Replicate_Location::CallFunc_ReplicateCapsuleRotation_RepCapsuleYaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Replicate_Location, CallFunc_NotEqual_DoubleDouble_A_ImplicitCast) == 0x000530, "Member 'BP_Character_C_Replicate_Location::CallFunc_NotEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BP_Character.BP_Character_C.ReplicateCapsuleRotation
// 0x0008 (0x0008 - 0x0000)
struct BP_Character_C_ReplicateCapsuleRotation final
{
public:
	double                                        Param_RepCapsuleYaw;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_ReplicateCapsuleRotation) == 0x000008, "Wrong alignment on BP_Character_C_ReplicateCapsuleRotation");
static_assert(sizeof(BP_Character_C_ReplicateCapsuleRotation) == 0x000008, "Wrong size on BP_Character_C_ReplicateCapsuleRotation");
static_assert(offsetof(BP_Character_C_ReplicateCapsuleRotation, Param_RepCapsuleYaw) == 0x000000, "Member 'BP_Character_C_ReplicateCapsuleRotation::Param_RepCapsuleYaw' has a wrong offset!");

// Function BP_Character.BP_Character_C.ReplicateControlRotation
// 0x0020 (0x0020 - 0x0000)
struct BP_Character_C_ReplicateControlRotation final
{
public:
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue;           // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_RotatorRotator_ReturnValue;      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLocalMultiplayer_ReturnValue;          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_ReplicateControlRotation) == 0x000008, "Wrong alignment on BP_Character_C_ReplicateControlRotation");
static_assert(sizeof(BP_Character_C_ReplicateControlRotation) == 0x000020, "Wrong size on BP_Character_C_ReplicateControlRotation");
static_assert(offsetof(BP_Character_C_ReplicateControlRotation, CallFunc_GetControlRotation_ReturnValue) == 0x000000, "Member 'BP_Character_C_ReplicateControlRotation::CallFunc_GetControlRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ReplicateControlRotation, CallFunc_NotEqual_RotatorRotator_ReturnValue) == 0x000018, "Member 'BP_Character_C_ReplicateControlRotation::CallFunc_NotEqual_RotatorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ReplicateControlRotation, CallFunc_GetLocalMultiplayer_ReturnValue) == 0x000019, "Member 'BP_Character_C_ReplicateControlRotation::CallFunc_GetLocalMultiplayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ReplicateControlRotation, CallFunc_IsLocallyControlled_ReturnValue) == 0x00001A, "Member 'BP_Character_C_ReplicateControlRotation::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.ReplicatePseudo
// 0x0010 (0x0010 - 0x0000)
struct BP_Character_C_ReplicatePseudo final
{
public:
	class FString                                 Param_Pseudo;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_ReplicatePseudo) == 0x000008, "Wrong alignment on BP_Character_C_ReplicatePseudo");
static_assert(sizeof(BP_Character_C_ReplicatePseudo) == 0x000010, "Wrong size on BP_Character_C_ReplicatePseudo");
static_assert(offsetof(BP_Character_C_ReplicatePseudo, Param_Pseudo) == 0x000000, "Member 'BP_Character_C_ReplicatePseudo::Param_Pseudo' has a wrong offset!");

// Function BP_Character.BP_Character_C.ReplicationCollision_GravityUpdater
// 0x0008 (0x0008 - 0x0000)
struct BP_Character_C_ReplicationCollision_GravityUpdater final
{
public:
	double                                        ErrorDistance;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_ReplicationCollision_GravityUpdater) == 0x000008, "Wrong alignment on BP_Character_C_ReplicationCollision_GravityUpdater");
static_assert(sizeof(BP_Character_C_ReplicationCollision_GravityUpdater) == 0x000008, "Wrong size on BP_Character_C_ReplicationCollision_GravityUpdater");
static_assert(offsetof(BP_Character_C_ReplicationCollision_GravityUpdater, ErrorDistance) == 0x000000, "Member 'BP_Character_C_ReplicationCollision_GravityUpdater::ErrorDistance' has a wrong offset!");

// Function BP_Character.BP_Character_C.RescueTeleport
// 0x0030 (0x0030 - 0x0000)
struct BP_Character_C_RescueTeleport final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Character_C_RescueTeleport) == 0x000008, "Wrong alignment on BP_Character_C_RescueTeleport");
static_assert(sizeof(BP_Character_C_RescueTeleport) == 0x000030, "Wrong size on BP_Character_C_RescueTeleport");
static_assert(offsetof(BP_Character_C_RescueTeleport, Location) == 0x000000, "Member 'BP_Character_C_RescueTeleport::Location' has a wrong offset!");
static_assert(offsetof(BP_Character_C_RescueTeleport, Rotation) == 0x000018, "Member 'BP_Character_C_RescueTeleport::Rotation' has a wrong offset!");

// Function BP_Character.BP_Character_C.ResetSkeletalMeshLocation
// 0x0110 (0x0110 - 0x0000)
struct BP_Character_C_ResetSkeletalMeshLocation final
{
public:
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VInterpTo_ReturnValue;                    // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0020(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_VInterpTo_DeltaTime_ImplicitCast;         // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_ResetSkeletalMeshLocation) == 0x000008, "Wrong alignment on BP_Character_C_ResetSkeletalMeshLocation");
static_assert(sizeof(BP_Character_C_ResetSkeletalMeshLocation) == 0x000110, "Wrong size on BP_Character_C_ResetSkeletalMeshLocation");
static_assert(offsetof(BP_Character_C_ResetSkeletalMeshLocation, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000000, "Member 'BP_Character_C_ResetSkeletalMeshLocation::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ResetSkeletalMeshLocation, CallFunc_VInterpTo_ReturnValue) == 0x000008, "Member 'BP_Character_C_ResetSkeletalMeshLocation::CallFunc_VInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ResetSkeletalMeshLocation, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000020, "Member 'BP_Character_C_ResetSkeletalMeshLocation::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ResetSkeletalMeshLocation, CallFunc_VInterpTo_DeltaTime_ImplicitCast) == 0x000108, "Member 'BP_Character_C_ResetSkeletalMeshLocation::CallFunc_VInterpTo_DeltaTime_ImplicitCast' has a wrong offset!");

// Function BP_Character.BP_Character_C.RessortImpulse
// 0x0018 (0x0018 - 0x0000)
struct BP_Character_C_RessortImpulse final
{
public:
	struct FVector                                Impulse;                                           // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_RessortImpulse) == 0x000008, "Wrong alignment on BP_Character_C_RessortImpulse");
static_assert(sizeof(BP_Character_C_RessortImpulse) == 0x000018, "Wrong size on BP_Character_C_RessortImpulse");
static_assert(offsetof(BP_Character_C_RessortImpulse, Impulse) == 0x000000, "Member 'BP_Character_C_RessortImpulse::Impulse' has a wrong offset!");

// Function BP_Character.BP_Character_C.SelectControlRot
// 0x0080 (0x0080 - 0x0000)
struct BP_Character_C_SelectControlRot final
{
public:
	struct FRotator                               DesiredControlRotation;                            // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32D3[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue_1;    // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_SelectRotator_ReturnValue;                // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_SelectRotator_ReturnValue_1;              // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Character_C_SelectControlRot) == 0x000008, "Wrong alignment on BP_Character_C_SelectControlRot");
static_assert(sizeof(BP_Character_C_SelectControlRot) == 0x000080, "Wrong size on BP_Character_C_SelectControlRot");
static_assert(offsetof(BP_Character_C_SelectControlRot, DesiredControlRotation) == 0x000000, "Member 'BP_Character_C_SelectControlRot::DesiredControlRotation' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SelectControlRot, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000018, "Member 'BP_Character_C_SelectControlRot::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SelectControlRot, CallFunc_IsLocallyControlled_ReturnValue) == 0x000030, "Member 'BP_Character_C_SelectControlRot::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SelectControlRot, CallFunc_K2_GetComponentRotation_ReturnValue_1) == 0x000038, "Member 'BP_Character_C_SelectControlRot::CallFunc_K2_GetComponentRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SelectControlRot, CallFunc_SelectRotator_ReturnValue) == 0x000050, "Member 'BP_Character_C_SelectControlRot::CallFunc_SelectRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SelectControlRot, CallFunc_SelectRotator_ReturnValue_1) == 0x000068, "Member 'BP_Character_C_SelectControlRot::CallFunc_SelectRotator_ReturnValue_1' has a wrong offset!");

// Function BP_Character.BP_Character_C.SelectMoveForwardAxis
// 0x0018 (0x0018 - 0x0000)
struct BP_Character_C_SelectMoveForwardAxis final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32D4[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_SelectMoveForwardAxis) == 0x000008, "Wrong alignment on BP_Character_C_SelectMoveForwardAxis");
static_assert(sizeof(BP_Character_C_SelectMoveForwardAxis) == 0x000018, "Wrong size on BP_Character_C_SelectMoveForwardAxis");
static_assert(offsetof(BP_Character_C_SelectMoveForwardAxis, ReturnValue) == 0x000000, "Member 'BP_Character_C_SelectMoveForwardAxis::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SelectMoveForwardAxis, CallFunc_IsLocallyControlled_ReturnValue) == 0x000008, "Member 'BP_Character_C_SelectMoveForwardAxis::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SelectMoveForwardAxis, CallFunc_SelectFloat_ReturnValue) == 0x000010, "Member 'BP_Character_C_SelectMoveForwardAxis::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.SelectMoveRightAxis
// 0x0018 (0x0018 - 0x0000)
struct BP_Character_C_SelectMoveRightAxis final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32D5[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_SelectMoveRightAxis) == 0x000008, "Wrong alignment on BP_Character_C_SelectMoveRightAxis");
static_assert(sizeof(BP_Character_C_SelectMoveRightAxis) == 0x000018, "Wrong size on BP_Character_C_SelectMoveRightAxis");
static_assert(offsetof(BP_Character_C_SelectMoveRightAxis, ReturnValue) == 0x000000, "Member 'BP_Character_C_SelectMoveRightAxis::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SelectMoveRightAxis, CallFunc_IsLocallyControlled_ReturnValue) == 0x000008, "Member 'BP_Character_C_SelectMoveRightAxis::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SelectMoveRightAxis, CallFunc_SelectFloat_ReturnValue) == 0x000010, "Member 'BP_Character_C_SelectMoveRightAxis::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.SelectVelocity
// 0x0080 (0x0080 - 0x0000)
struct BP_Character_C_SelectVelocity final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDesiredMoveDirection_ReturnValue;      // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue;                 // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_SelectVelocity) == 0x000008, "Wrong alignment on BP_Character_C_SelectVelocity");
static_assert(sizeof(BP_Character_C_SelectVelocity) == 0x000080, "Wrong size on BP_Character_C_SelectVelocity");
static_assert(offsetof(BP_Character_C_SelectVelocity, ReturnValue) == 0x000000, "Member 'BP_Character_C_SelectVelocity::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SelectVelocity, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000018, "Member 'BP_Character_C_SelectVelocity::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SelectVelocity, CallFunc_GetDesiredMoveDirection_ReturnValue) == 0x000030, "Member 'BP_Character_C_SelectVelocity::CallFunc_GetDesiredMoveDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SelectVelocity, CallFunc_VSize_ReturnValue) == 0x000048, "Member 'BP_Character_C_SelectVelocity::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SelectVelocity, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000050, "Member 'BP_Character_C_SelectVelocity::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SelectVelocity, CallFunc_SelectVector_ReturnValue) == 0x000068, "Member 'BP_Character_C_SelectVelocity::CallFunc_SelectVector_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.SetActorLocationAndRotation(UpdateTarget)
// 0x0310 (0x0310 - 0x0000)
struct BP_Character_C_SetActorLocationAndRotation_UpdateTarget_ final
{
public:
	struct FVector                                NewLocation;                                       // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               NewRotation;                                       // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bSweep;                                            // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTeleport;                                         // 0x0031(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32D6[0x6];                                     // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepHitResult;                                    // 0x0038(0x00E8)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x0120(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32D7[0x7];                                     // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0128(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult; // 0x0140(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult_1; // 0x0228(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Character_C_SetActorLocationAndRotation_UpdateTarget_) == 0x000008, "Wrong alignment on BP_Character_C_SetActorLocationAndRotation_UpdateTarget_");
static_assert(sizeof(BP_Character_C_SetActorLocationAndRotation_UpdateTarget_) == 0x000310, "Wrong size on BP_Character_C_SetActorLocationAndRotation_UpdateTarget_");
static_assert(offsetof(BP_Character_C_SetActorLocationAndRotation_UpdateTarget_, NewLocation) == 0x000000, "Member 'BP_Character_C_SetActorLocationAndRotation_UpdateTarget_::NewLocation' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetActorLocationAndRotation_UpdateTarget_, NewRotation) == 0x000018, "Member 'BP_Character_C_SetActorLocationAndRotation_UpdateTarget_::NewRotation' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetActorLocationAndRotation_UpdateTarget_, bSweep) == 0x000030, "Member 'BP_Character_C_SetActorLocationAndRotation_UpdateTarget_::bSweep' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetActorLocationAndRotation_UpdateTarget_, bTeleport) == 0x000031, "Member 'BP_Character_C_SetActorLocationAndRotation_UpdateTarget_::bTeleport' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetActorLocationAndRotation_UpdateTarget_, SweepHitResult) == 0x000038, "Member 'BP_Character_C_SetActorLocationAndRotation_UpdateTarget_::SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetActorLocationAndRotation_UpdateTarget_, ReturnValue) == 0x000120, "Member 'BP_Character_C_SetActorLocationAndRotation_UpdateTarget_::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetActorLocationAndRotation_UpdateTarget_, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000128, "Member 'BP_Character_C_SetActorLocationAndRotation_UpdateTarget_::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetActorLocationAndRotation_UpdateTarget_, CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult) == 0x000140, "Member 'BP_Character_C_SetActorLocationAndRotation_UpdateTarget_::CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetActorLocationAndRotation_UpdateTarget_, CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult_1) == 0x000228, "Member 'BP_Character_C_SetActorLocationAndRotation_UpdateTarget_::CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult_1' has a wrong offset!");

// Function BP_Character.BP_Character_C.SetCameraRotation
// 0x0018 (0x0018 - 0x0000)
struct BP_Character_C_SetCameraRotation final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Character_C_SetCameraRotation) == 0x000008, "Wrong alignment on BP_Character_C_SetCameraRotation");
static_assert(sizeof(BP_Character_C_SetCameraRotation) == 0x000018, "Wrong size on BP_Character_C_SetCameraRotation");
static_assert(offsetof(BP_Character_C_SetCameraRotation, Rotation) == 0x000000, "Member 'BP_Character_C_SetCameraRotation::Rotation' has a wrong offset!");

// Function BP_Character.BP_Character_C.SetChainComp
// 0x0008 (0x0008 - 0x0000)
struct BP_Character_C_SetChainComp final
{
public:
	class UStaticMeshComponent*                   Comp;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_SetChainComp) == 0x000008, "Wrong alignment on BP_Character_C_SetChainComp");
static_assert(sizeof(BP_Character_C_SetChainComp) == 0x000008, "Wrong size on BP_Character_C_SetChainComp");
static_assert(offsetof(BP_Character_C_SetChainComp, Comp) == 0x000000, "Member 'BP_Character_C_SetChainComp::Comp' has a wrong offset!");

// Function BP_Character.BP_Character_C.SetCharacterRotation
// 0x0018 (0x0018 - 0x0000)
struct BP_Character_C_SetCharacterRotation final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Character_C_SetCharacterRotation) == 0x000008, "Wrong alignment on BP_Character_C_SetCharacterRotation");
static_assert(sizeof(BP_Character_C_SetCharacterRotation) == 0x000018, "Wrong size on BP_Character_C_SetCharacterRotation");
static_assert(offsetof(BP_Character_C_SetCharacterRotation, Rotation) == 0x000000, "Member 'BP_Character_C_SetCharacterRotation::Rotation' has a wrong offset!");

// Function BP_Character.BP_Character_C.SetCharacterVelocity
// 0x0020 (0x0020 - 0x0000)
struct BP_Character_C_SetCharacterVelocity final
{
public:
	struct FVector                                NewVel;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_Capsule;                                     // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_Sphere;                                      // 0x0019(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_SetCharacterVelocity) == 0x000008, "Wrong alignment on BP_Character_C_SetCharacterVelocity");
static_assert(sizeof(BP_Character_C_SetCharacterVelocity) == 0x000020, "Wrong size on BP_Character_C_SetCharacterVelocity");
static_assert(offsetof(BP_Character_C_SetCharacterVelocity, NewVel) == 0x000000, "Member 'BP_Character_C_SetCharacterVelocity::NewVel' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetCharacterVelocity, Param_Capsule) == 0x000018, "Member 'BP_Character_C_SetCharacterVelocity::Param_Capsule' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetCharacterVelocity, Param_Sphere) == 0x000019, "Member 'BP_Character_C_SetCharacterVelocity::Param_Sphere' has a wrong offset!");

// Function BP_Character.BP_Character_C.SetCollisionResponse
// 0x0002 (0x0002 - 0x0000)
struct BP_Character_C_SetCollisionResponse final
{
public:
	ECollisionChannel                             Collision;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionResponse                            Response;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_SetCollisionResponse) == 0x000001, "Wrong alignment on BP_Character_C_SetCollisionResponse");
static_assert(sizeof(BP_Character_C_SetCollisionResponse) == 0x000002, "Wrong size on BP_Character_C_SetCollisionResponse");
static_assert(offsetof(BP_Character_C_SetCollisionResponse, Collision) == 0x000000, "Member 'BP_Character_C_SetCollisionResponse::Collision' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetCollisionResponse, Response) == 0x000001, "Member 'BP_Character_C_SetCollisionResponse::Response' has a wrong offset!");

// Function BP_Character.BP_Character_C.SetController
// 0x0018 (0x0018 - 0x0000)
struct BP_Character_C_SetController final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_SetController) == 0x000008, "Wrong alignment on BP_Character_C_SetController");
static_assert(sizeof(BP_Character_C_SetController) == 0x000018, "Wrong size on BP_Character_C_SetController");
static_assert(offsetof(BP_Character_C_SetController, Location) == 0x000000, "Member 'BP_Character_C_SetController::Location' has a wrong offset!");

// Function BP_Character.BP_Character_C.SetCosmeticChainFixSocket
// 0x0010 (0x0010 - 0x0000)
struct BP_Character_C_SetCosmeticChainFixSocket final
{
public:
	class UPrimitiveComponent*                    Socket;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   Param_Name;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_SetCosmeticChainFixSocket) == 0x000008, "Wrong alignment on BP_Character_C_SetCosmeticChainFixSocket");
static_assert(sizeof(BP_Character_C_SetCosmeticChainFixSocket) == 0x000010, "Wrong size on BP_Character_C_SetCosmeticChainFixSocket");
static_assert(offsetof(BP_Character_C_SetCosmeticChainFixSocket, Socket) == 0x000000, "Member 'BP_Character_C_SetCosmeticChainFixSocket::Socket' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetCosmeticChainFixSocket, Param_Name) == 0x000008, "Member 'BP_Character_C_SetCosmeticChainFixSocket::Param_Name' has a wrong offset!");

// Function BP_Character.BP_Character_C.SetEssentialValues
// 0x0118 (0x0118 - 0x0000)
struct BP_Character_C_SetEssentialValues final
{
public:
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32D8[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_BreakVector_X;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_SelectControlRot_DesiredControlRotation;  // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32D9[0x4];                                     // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_CalculateAcceleration_ReturnValue;        // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue_1;       // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_SelectMoveRightAxis_ReturnValue;          // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectMoveForwardAxis_ReturnValue;        // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue;        // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue_1;      // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32DA[0x6];                                     // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectMoveRightAxis_ReturnValue_1;        // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32DB[0x7];                                     // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectMoveForwardAxis_ReturnValue_1;      // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue_1;                        // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_A_ImplicitCast;     // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_SetEssentialValues) == 0x000008, "Wrong alignment on BP_Character_C_SetEssentialValues");
static_assert(sizeof(BP_Character_C_SetEssentialValues) == 0x000118, "Wrong size on BP_Character_C_SetEssentialValues");
static_assert(offsetof(BP_Character_C_SetEssentialValues, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000000, "Member 'BP_Character_C_SetEssentialValues::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetEssentialValues, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x000008, "Member 'BP_Character_C_SetEssentialValues::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetEssentialValues, CallFunc_BreakVector_X) == 0x000020, "Member 'BP_Character_C_SetEssentialValues::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetEssentialValues, CallFunc_BreakVector_Y) == 0x000028, "Member 'BP_Character_C_SetEssentialValues::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetEssentialValues, CallFunc_BreakVector_Z) == 0x000030, "Member 'BP_Character_C_SetEssentialValues::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetEssentialValues, CallFunc_MakeVector_ReturnValue) == 0x000038, "Member 'BP_Character_C_SetEssentialValues::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetEssentialValues, CallFunc_SelectControlRot_DesiredControlRotation) == 0x000050, "Member 'BP_Character_C_SetEssentialValues::CallFunc_SelectControlRot_DesiredControlRotation' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetEssentialValues, CallFunc_VSize_ReturnValue) == 0x000068, "Member 'BP_Character_C_SetEssentialValues::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetEssentialValues, CallFunc_BreakRotator_Roll) == 0x000070, "Member 'BP_Character_C_SetEssentialValues::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetEssentialValues, CallFunc_BreakRotator_Pitch) == 0x000074, "Member 'BP_Character_C_SetEssentialValues::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetEssentialValues, CallFunc_BreakRotator_Yaw) == 0x000078, "Member 'BP_Character_C_SetEssentialValues::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetEssentialValues, CallFunc_CalculateAcceleration_ReturnValue) == 0x000080, "Member 'BP_Character_C_SetEssentialValues::CallFunc_CalculateAcceleration_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetEssentialValues, CallFunc_Conv_VectorToRotator_ReturnValue_1) == 0x000098, "Member 'BP_Character_C_SetEssentialValues::CallFunc_Conv_VectorToRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetEssentialValues, CallFunc_SelectMoveRightAxis_ReturnValue) == 0x0000B0, "Member 'BP_Character_C_SetEssentialValues::CallFunc_SelectMoveRightAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetEssentialValues, CallFunc_SelectMoveForwardAxis_ReturnValue) == 0x0000B8, "Member 'BP_Character_C_SetEssentialValues::CallFunc_SelectMoveForwardAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetEssentialValues, CallFunc_NotEqual_DoubleDouble_ReturnValue) == 0x0000C0, "Member 'BP_Character_C_SetEssentialValues::CallFunc_NotEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetEssentialValues, CallFunc_NotEqual_DoubleDouble_ReturnValue_1) == 0x0000C1, "Member 'BP_Character_C_SetEssentialValues::CallFunc_NotEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetEssentialValues, CallFunc_SelectMoveRightAxis_ReturnValue_1) == 0x0000C8, "Member 'BP_Character_C_SetEssentialValues::CallFunc_SelectMoveRightAxis_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetEssentialValues, CallFunc_BooleanOR_ReturnValue) == 0x0000D0, "Member 'BP_Character_C_SetEssentialValues::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetEssentialValues, CallFunc_SelectMoveForwardAxis_ReturnValue_1) == 0x0000D8, "Member 'BP_Character_C_SetEssentialValues::CallFunc_SelectMoveForwardAxis_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetEssentialValues, CallFunc_Add_DoubleDouble_ReturnValue) == 0x0000E0, "Member 'BP_Character_C_SetEssentialValues::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetEssentialValues, CallFunc_Abs_ReturnValue) == 0x0000E8, "Member 'BP_Character_C_SetEssentialValues::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetEssentialValues, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x0000F0, "Member 'BP_Character_C_SetEssentialValues::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetEssentialValues, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x0000F8, "Member 'BP_Character_C_SetEssentialValues::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetEssentialValues, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000100, "Member 'BP_Character_C_SetEssentialValues::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetEssentialValues, CallFunc_Abs_ReturnValue_1) == 0x000108, "Member 'BP_Character_C_SetEssentialValues::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetEssentialValues, CallFunc_Subtract_DoubleDouble_A_ImplicitCast) == 0x000110, "Member 'BP_Character_C_SetEssentialValues::CallFunc_Subtract_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BP_Character.BP_Character_C.SetFlyMode
// 0x0001 (0x0001 - 0x0000)
struct BP_Character_C_SetFlyMode final
{
public:
	bool                                          Param_FlyMode;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_SetFlyMode) == 0x000001, "Wrong alignment on BP_Character_C_SetFlyMode");
static_assert(sizeof(BP_Character_C_SetFlyMode) == 0x000001, "Wrong size on BP_Character_C_SetFlyMode");
static_assert(offsetof(BP_Character_C_SetFlyMode, Param_FlyMode) == 0x000000, "Member 'BP_Character_C_SetFlyMode::Param_FlyMode' has a wrong offset!");

// Function BP_Character.BP_Character_C.SetInAirDamping
// 0x0008 (0x0008 - 0x0000)
struct BP_Character_C_SetInAirDamping final
{
public:
	double                                        Damping;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_SetInAirDamping) == 0x000008, "Wrong alignment on BP_Character_C_SetInAirDamping");
static_assert(sizeof(BP_Character_C_SetInAirDamping) == 0x000008, "Wrong size on BP_Character_C_SetInAirDamping");
static_assert(offsetof(BP_Character_C_SetInAirDamping, Damping) == 0x000000, "Member 'BP_Character_C_SetInAirDamping::Damping' has a wrong offset!");

// Function BP_Character.BP_Character_C.SetIsDetectableByPlacingBlocks
// 0x0001 (0x0001 - 0x0000)
struct BP_Character_C_SetIsDetectableByPlacingBlocks final
{
public:
	bool                                          Detectable;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_SetIsDetectableByPlacingBlocks) == 0x000001, "Wrong alignment on BP_Character_C_SetIsDetectableByPlacingBlocks");
static_assert(sizeof(BP_Character_C_SetIsDetectableByPlacingBlocks) == 0x000001, "Wrong size on BP_Character_C_SetIsDetectableByPlacingBlocks");
static_assert(offsetof(BP_Character_C_SetIsDetectableByPlacingBlocks, Detectable) == 0x000000, "Member 'BP_Character_C_SetIsDetectableByPlacingBlocks::Detectable' has a wrong offset!");

// Function BP_Character.BP_Character_C.SetIsDriving
// 0x0001 (0x0001 - 0x0000)
struct BP_Character_C_SetIsDriving final
{
public:
	bool                                          Driving;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_SetIsDriving) == 0x000001, "Wrong alignment on BP_Character_C_SetIsDriving");
static_assert(sizeof(BP_Character_C_SetIsDriving) == 0x000001, "Wrong size on BP_Character_C_SetIsDriving");
static_assert(offsetof(BP_Character_C_SetIsDriving, Driving) == 0x000000, "Member 'BP_Character_C_SetIsDriving::Driving' has a wrong offset!");

// Function BP_Character.BP_Character_C.SetIsInMovingObject
// 0x0001 (0x0001 - 0x0000)
struct BP_Character_C_SetIsInMovingObject final
{
public:
	bool                                          Param_InMovingObject;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_SetIsInMovingObject) == 0x000001, "Wrong alignment on BP_Character_C_SetIsInMovingObject");
static_assert(sizeof(BP_Character_C_SetIsInMovingObject) == 0x000001, "Wrong size on BP_Character_C_SetIsInMovingObject");
static_assert(offsetof(BP_Character_C_SetIsInMovingObject, Param_InMovingObject) == 0x000000, "Member 'BP_Character_C_SetIsInMovingObject::Param_InMovingObject' has a wrong offset!");

// Function BP_Character.BP_Character_C.SetIsSwimming
// 0x0001 (0x0001 - 0x0000)
struct BP_Character_C_SetIsSwimming final
{
public:
	bool                                          Param_Swim;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_SetIsSwimming) == 0x000001, "Wrong alignment on BP_Character_C_SetIsSwimming");
static_assert(sizeof(BP_Character_C_SetIsSwimming) == 0x000001, "Wrong size on BP_Character_C_SetIsSwimming");
static_assert(offsetof(BP_Character_C_SetIsSwimming, Param_Swim) == 0x000000, "Member 'BP_Character_C_SetIsSwimming::Param_Swim' has a wrong offset!");

// Function BP_Character.BP_Character_C.SetLookAround
// 0x0001 (0x0001 - 0x0000)
struct BP_Character_C_SetLookAround final
{
public:
	bool                                          LookAround;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_SetLookAround) == 0x000001, "Wrong alignment on BP_Character_C_SetLookAround");
static_assert(sizeof(BP_Character_C_SetLookAround) == 0x000001, "Wrong size on BP_Character_C_SetLookAround");
static_assert(offsetof(BP_Character_C_SetLookAround, LookAround) == 0x000000, "Member 'BP_Character_C_SetLookAround::LookAround' has a wrong offset!");

// Function BP_Character.BP_Character_C.SetPawnMovementMode
// 0x0001 (0x0001 - 0x0000)
struct BP_Character_C_SetPawnMovementMode final
{
public:
	EMovementMode                                 Param_Pawn_Movement_Mode;                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_SetPawnMovementMode) == 0x000001, "Wrong alignment on BP_Character_C_SetPawnMovementMode");
static_assert(sizeof(BP_Character_C_SetPawnMovementMode) == 0x000001, "Wrong size on BP_Character_C_SetPawnMovementMode");
static_assert(offsetof(BP_Character_C_SetPawnMovementMode, Param_Pawn_Movement_Mode) == 0x000000, "Member 'BP_Character_C_SetPawnMovementMode::Param_Pawn_Movement_Mode' has a wrong offset!");

// Function BP_Character.BP_Character_C.SetPlayerNameSRV
// 0x0010 (0x0010 - 0x0000)
struct BP_Character_C_SetPlayerNameSRV final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_SetPlayerNameSRV) == 0x000008, "Wrong alignment on BP_Character_C_SetPlayerNameSRV");
static_assert(sizeof(BP_Character_C_SetPlayerNameSRV) == 0x000010, "Wrong size on BP_Character_C_SetPlayerNameSRV");
static_assert(offsetof(BP_Character_C_SetPlayerNameSRV, PlayerName) == 0x000000, "Member 'BP_Character_C_SetPlayerNameSRV::PlayerName' has a wrong offset!");

// Function BP_Character.BP_Character_C.SetRenderCustomDepth
// 0x0038 (0x0038 - 0x0000)
struct BP_Character_C_SetRenderCustomDepth final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32DC[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USkeletalMeshComponent*>         CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32DD[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_SetRenderCustomDepth) == 0x000008, "Wrong alignment on BP_Character_C_SetRenderCustomDepth");
static_assert(sizeof(BP_Character_C_SetRenderCustomDepth) == 0x000038, "Wrong size on BP_Character_C_SetRenderCustomDepth");
static_assert(offsetof(BP_Character_C_SetRenderCustomDepth, bValue) == 0x000000, "Member 'BP_Character_C_SetRenderCustomDepth::bValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetRenderCustomDepth, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_Character_C_SetRenderCustomDepth::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetRenderCustomDepth, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BP_Character_C_SetRenderCustomDepth::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetRenderCustomDepth, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_Character_C_SetRenderCustomDepth::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetRenderCustomDepth, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000010, "Member 'BP_Character_C_SetRenderCustomDepth::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetRenderCustomDepth, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_Character_C_SetRenderCustomDepth::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetRenderCustomDepth, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_Character_C_SetRenderCustomDepth::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SetRenderCustomDepth, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'BP_Character_C_SetRenderCustomDepth::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.SetRotation
// 0x0018 (0x0018 - 0x0000)
struct BP_Character_C_SetRotation final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Character_C_SetRotation) == 0x000008, "Wrong alignment on BP_Character_C_SetRotation");
static_assert(sizeof(BP_Character_C_SetRotation) == 0x000018, "Wrong size on BP_Character_C_SetRotation");
static_assert(offsetof(BP_Character_C_SetRotation, Rotation) == 0x000000, "Member 'BP_Character_C_SetRotation::Rotation' has a wrong offset!");

// Function BP_Character.BP_Character_C.SetZLocation
// 0x0008 (0x0008 - 0x0000)
struct BP_Character_C_SetZLocation final
{
public:
	double                                        Z;                                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_SetZLocation) == 0x000008, "Wrong alignment on BP_Character_C_SetZLocation");
static_assert(sizeof(BP_Character_C_SetZLocation) == 0x000008, "Wrong size on BP_Character_C_SetZLocation");
static_assert(offsetof(BP_Character_C_SetZLocation, Z) == 0x000000, "Member 'BP_Character_C_SetZLocation::Z' has a wrong offset!");

// Function BP_Character.BP_Character_C.ShowHidePullWidget
// 0x0001 (0x0001 - 0x0000)
struct BP_Character_C_ShowHidePullWidget final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_ShowHidePullWidget) == 0x000001, "Wrong alignment on BP_Character_C_ShowHidePullWidget");
static_assert(sizeof(BP_Character_C_ShowHidePullWidget) == 0x000001, "Wrong size on BP_Character_C_ShowHidePullWidget");
static_assert(offsetof(BP_Character_C_ShowHidePullWidget, Show) == 0x000000, "Member 'BP_Character_C_ShowHidePullWidget::Show' has a wrong offset!");

// Function BP_Character.BP_Character_C.ShuffleHardSnap
// 0x0008 (0x0008 - 0x0000)
struct BP_Character_C_ShuffleHardSnap final
{
public:
	double                                        Delay;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_ShuffleHardSnap) == 0x000008, "Wrong alignment on BP_Character_C_ShuffleHardSnap");
static_assert(sizeof(BP_Character_C_ShuffleHardSnap) == 0x000008, "Wrong size on BP_Character_C_ShuffleHardSnap");
static_assert(offsetof(BP_Character_C_ShuffleHardSnap, Delay) == 0x000000, "Member 'BP_Character_C_ShuffleHardSnap::Delay' has a wrong offset!");

// Function BP_Character.BP_Character_C.ShuffleHardSnapping
// 0x0008 (0x0008 - 0x0000)
struct BP_Character_C_ShuffleHardSnapping final
{
public:
	double                                        Delay;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_ShuffleHardSnapping) == 0x000008, "Wrong alignment on BP_Character_C_ShuffleHardSnapping");
static_assert(sizeof(BP_Character_C_ShuffleHardSnapping) == 0x000008, "Wrong size on BP_Character_C_ShuffleHardSnapping");
static_assert(offsetof(BP_Character_C_ShuffleHardSnapping, Delay) == 0x000000, "Member 'BP_Character_C_ShuffleHardSnapping::Delay' has a wrong offset!");

// Function BP_Character.BP_Character_C.ShuffleMantleCheck
// 0x0004 (0x0004 - 0x0000)
struct BP_Character_C_ShuffleMantleCheck final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_ShuffleMantleCheck) == 0x000004, "Wrong alignment on BP_Character_C_ShuffleMantleCheck");
static_assert(sizeof(BP_Character_C_ShuffleMantleCheck) == 0x000004, "Wrong size on BP_Character_C_ShuffleMantleCheck");
static_assert(offsetof(BP_Character_C_ShuffleMantleCheck, Duration) == 0x000000, "Member 'BP_Character_C_ShuffleMantleCheck::Duration' has a wrong offset!");

// Function BP_Character.BP_Character_C.ShufflePushedByObstacle
// 0x0004 (0x0004 - 0x0000)
struct BP_Character_C_ShufflePushedByObstacle final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_ShufflePushedByObstacle) == 0x000004, "Wrong alignment on BP_Character_C_ShufflePushedByObstacle");
static_assert(sizeof(BP_Character_C_ShufflePushedByObstacle) == 0x000004, "Wrong size on BP_Character_C_ShufflePushedByObstacle");
static_assert(offsetof(BP_Character_C_ShufflePushedByObstacle, Duration) == 0x000000, "Member 'BP_Character_C_ShufflePushedByObstacle::Duration' has a wrong offset!");

// Function BP_Character.BP_Character_C.ShuffleReplicationScale
// 0x0010 (0x0010 - 0x0000)
struct BP_Character_C_ShuffleReplicationScale final
{
public:
	double                                        NullDuration;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TimelineDuration;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_ShuffleReplicationScale) == 0x000008, "Wrong alignment on BP_Character_C_ShuffleReplicationScale");
static_assert(sizeof(BP_Character_C_ShuffleReplicationScale) == 0x000010, "Wrong size on BP_Character_C_ShuffleReplicationScale");
static_assert(offsetof(BP_Character_C_ShuffleReplicationScale, NullDuration) == 0x000000, "Member 'BP_Character_C_ShuffleReplicationScale::NullDuration' has a wrong offset!");
static_assert(offsetof(BP_Character_C_ShuffleReplicationScale, TimelineDuration) == 0x000008, "Member 'BP_Character_C_ShuffleReplicationScale::TimelineDuration' has a wrong offset!");

// Function BP_Character.BP_Character_C.SimulateGravity
// 0x0030 (0x0030 - 0x0000)
struct BP_Character_C_SimulateGravity final
{
public:
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32DE[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_SimulateGravity) == 0x000008, "Wrong alignment on BP_Character_C_SimulateGravity");
static_assert(sizeof(BP_Character_C_SimulateGravity) == 0x000030, "Wrong size on BP_Character_C_SimulateGravity");
static_assert(offsetof(BP_Character_C_SimulateGravity, K2Node_SwitchEnum_CmpSuccess) == 0x000000, "Member 'BP_Character_C_SimulateGravity::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SimulateGravity, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000008, "Member 'BP_Character_C_SimulateGravity::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SimulateGravity, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000010, "Member 'BP_Character_C_SimulateGravity::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SimulateGravity, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000018, "Member 'BP_Character_C_SimulateGravity::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.SimulateLegsPhysics
// 0x0010 (0x0010 - 0x0000)
struct BP_Character_C_SimulateLegsPhysics final
{
public:
	bool                                          bNewSimulate;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32DF[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PhysicsBlendWeight;                                // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_SimulateLegsPhysics) == 0x000008, "Wrong alignment on BP_Character_C_SimulateLegsPhysics");
static_assert(sizeof(BP_Character_C_SimulateLegsPhysics) == 0x000010, "Wrong size on BP_Character_C_SimulateLegsPhysics");
static_assert(offsetof(BP_Character_C_SimulateLegsPhysics, bNewSimulate) == 0x000000, "Member 'BP_Character_C_SimulateLegsPhysics::bNewSimulate' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SimulateLegsPhysics, PhysicsBlendWeight) == 0x000008, "Member 'BP_Character_C_SimulateLegsPhysics::PhysicsBlendWeight' has a wrong offset!");

// Function BP_Character.BP_Character_C.SmoothCharacterRotation
// 0x0178 (0x0178 - 0x0000)
struct BP_Character_C_SmoothCharacterRotation final
{
public:
	struct FRotator                               Target;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        TargetInterpSpeed_Const_;                          // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ActorInterpSpeed_Smooth_;                          // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue_1;       // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RInterpTo_Constant_ReturnValue;           // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x0080(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_RInterpTo_InterpSpeed_ImplicitCast;       // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RInterpTo_Constant_InterpSpeed_ImplicitCast; // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RInterpTo_DeltaTime_ImplicitCast;         // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RInterpTo_Constant_DeltaTime_ImplicitCast; // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_SmoothCharacterRotation) == 0x000008, "Wrong alignment on BP_Character_C_SmoothCharacterRotation");
static_assert(sizeof(BP_Character_C_SmoothCharacterRotation) == 0x000178, "Wrong size on BP_Character_C_SmoothCharacterRotation");
static_assert(offsetof(BP_Character_C_SmoothCharacterRotation, Target) == 0x000000, "Member 'BP_Character_C_SmoothCharacterRotation::Target' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SmoothCharacterRotation, TargetInterpSpeed_Const_) == 0x000018, "Member 'BP_Character_C_SmoothCharacterRotation::TargetInterpSpeed_Const_' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SmoothCharacterRotation, ActorInterpSpeed_Smooth_) == 0x000020, "Member 'BP_Character_C_SmoothCharacterRotation::ActorInterpSpeed_Smooth_' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SmoothCharacterRotation, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000028, "Member 'BP_Character_C_SmoothCharacterRotation::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SmoothCharacterRotation, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000040, "Member 'BP_Character_C_SmoothCharacterRotation::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SmoothCharacterRotation, CallFunc_GetWorldDeltaSeconds_ReturnValue_1) == 0x000048, "Member 'BP_Character_C_SmoothCharacterRotation::CallFunc_GetWorldDeltaSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SmoothCharacterRotation, CallFunc_RInterpTo_Constant_ReturnValue) == 0x000050, "Member 'BP_Character_C_SmoothCharacterRotation::CallFunc_RInterpTo_Constant_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SmoothCharacterRotation, CallFunc_RInterpTo_ReturnValue) == 0x000068, "Member 'BP_Character_C_SmoothCharacterRotation::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SmoothCharacterRotation, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x000080, "Member 'BP_Character_C_SmoothCharacterRotation::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SmoothCharacterRotation, CallFunc_RInterpTo_InterpSpeed_ImplicitCast) == 0x000168, "Member 'BP_Character_C_SmoothCharacterRotation::CallFunc_RInterpTo_InterpSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SmoothCharacterRotation, CallFunc_RInterpTo_Constant_InterpSpeed_ImplicitCast) == 0x00016C, "Member 'BP_Character_C_SmoothCharacterRotation::CallFunc_RInterpTo_Constant_InterpSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SmoothCharacterRotation, CallFunc_RInterpTo_DeltaTime_ImplicitCast) == 0x000170, "Member 'BP_Character_C_SmoothCharacterRotation::CallFunc_RInterpTo_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SmoothCharacterRotation, CallFunc_RInterpTo_Constant_DeltaTime_ImplicitCast) == 0x000174, "Member 'BP_Character_C_SmoothCharacterRotation::CallFunc_RInterpTo_Constant_DeltaTime_ImplicitCast' has a wrong offset!");

// Function BP_Character.BP_Character_C.SnapCharacterToVehicle
// 0x0008 (0x0008 - 0x0000)
struct BP_Character_C_SnapCharacterToVehicle final
{
public:
	class USphereComponent*                       DriverSocket;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_SnapCharacterToVehicle) == 0x000008, "Wrong alignment on BP_Character_C_SnapCharacterToVehicle");
static_assert(sizeof(BP_Character_C_SnapCharacterToVehicle) == 0x000008, "Wrong size on BP_Character_C_SnapCharacterToVehicle");
static_assert(offsetof(BP_Character_C_SnapCharacterToVehicle, DriverSocket) == 0x000000, "Member 'BP_Character_C_SnapCharacterToVehicle::DriverSocket' has a wrong offset!");

// Function BP_Character.BP_Character_C.SpawnStabilisationSocket
// 0x02C0 (0x02C0 - 0x0000)
struct BP_Character_C_SpawnStabilisationSocket final
{
public:
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Gamestate_C>      K2Node_DynamicCast_AsBPI_Gamestate;                // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32E0[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APawn*>                          CallFunc_GetPawnArray_Array;                       // 0x0020(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_SphereTraceSingle_OutHit;                 // 0x0060(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingle_ReturnValue;            // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x014A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32E1[0x1];                                     // 0x014B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32E2[0x4];                                     // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0158(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0170(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0188(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x01A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x01B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01C8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32E3[0x4];                                     // 0x01EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0208(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0220(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32E4[0x7];                                     // 0x0281(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0288(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_StabilisationSocket_C*              CallFunc_FinishSpawningActor_ReturnValue;          // 0x0290(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetPhysicsLinearVelocity_ReturnValue;     // 0x0298(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_SpawnStabilisationSocket) == 0x000010, "Wrong alignment on BP_Character_C_SpawnStabilisationSocket");
static_assert(sizeof(BP_Character_C_SpawnStabilisationSocket) == 0x0002C0, "Wrong size on BP_Character_C_SpawnStabilisationSocket");
static_assert(offsetof(BP_Character_C_SpawnStabilisationSocket, CallFunc_GetGameState_ReturnValue) == 0x000000, "Member 'BP_Character_C_SpawnStabilisationSocket::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SpawnStabilisationSocket, K2Node_DynamicCast_AsBPI_Gamestate) == 0x000008, "Member 'BP_Character_C_SpawnStabilisationSocket::K2Node_DynamicCast_AsBPI_Gamestate' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SpawnStabilisationSocket, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_Character_C_SpawnStabilisationSocket::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SpawnStabilisationSocket, CallFunc_GetPawnArray_Array) == 0x000020, "Member 'BP_Character_C_SpawnStabilisationSocket::CallFunc_GetPawnArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SpawnStabilisationSocket, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000030, "Member 'BP_Character_C_SpawnStabilisationSocket::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SpawnStabilisationSocket, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000048, "Member 'BP_Character_C_SpawnStabilisationSocket::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SpawnStabilisationSocket, CallFunc_SphereTraceSingle_OutHit) == 0x000060, "Member 'BP_Character_C_SpawnStabilisationSocket::CallFunc_SphereTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SpawnStabilisationSocket, CallFunc_SphereTraceSingle_ReturnValue) == 0x000148, "Member 'BP_Character_C_SpawnStabilisationSocket::CallFunc_SphereTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SpawnStabilisationSocket, CallFunc_BreakHitResult_bBlockingHit) == 0x000149, "Member 'BP_Character_C_SpawnStabilisationSocket::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SpawnStabilisationSocket, CallFunc_BreakHitResult_bInitialOverlap) == 0x00014A, "Member 'BP_Character_C_SpawnStabilisationSocket::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SpawnStabilisationSocket, CallFunc_BreakHitResult_Time) == 0x00014C, "Member 'BP_Character_C_SpawnStabilisationSocket::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SpawnStabilisationSocket, CallFunc_BreakHitResult_Distance) == 0x000150, "Member 'BP_Character_C_SpawnStabilisationSocket::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SpawnStabilisationSocket, CallFunc_BreakHitResult_Location) == 0x000158, "Member 'BP_Character_C_SpawnStabilisationSocket::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SpawnStabilisationSocket, CallFunc_BreakHitResult_ImpactPoint) == 0x000170, "Member 'BP_Character_C_SpawnStabilisationSocket::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SpawnStabilisationSocket, CallFunc_BreakHitResult_Normal) == 0x000188, "Member 'BP_Character_C_SpawnStabilisationSocket::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SpawnStabilisationSocket, CallFunc_BreakHitResult_ImpactNormal) == 0x0001A0, "Member 'BP_Character_C_SpawnStabilisationSocket::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SpawnStabilisationSocket, CallFunc_BreakHitResult_PhysMat) == 0x0001B8, "Member 'BP_Character_C_SpawnStabilisationSocket::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SpawnStabilisationSocket, CallFunc_BreakHitResult_HitActor) == 0x0001C0, "Member 'BP_Character_C_SpawnStabilisationSocket::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SpawnStabilisationSocket, CallFunc_BreakHitResult_HitComponent) == 0x0001C8, "Member 'BP_Character_C_SpawnStabilisationSocket::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SpawnStabilisationSocket, CallFunc_BreakHitResult_HitBoneName) == 0x0001D0, "Member 'BP_Character_C_SpawnStabilisationSocket::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SpawnStabilisationSocket, CallFunc_BreakHitResult_BoneName) == 0x0001D8, "Member 'BP_Character_C_SpawnStabilisationSocket::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SpawnStabilisationSocket, CallFunc_BreakHitResult_HitItem) == 0x0001E0, "Member 'BP_Character_C_SpawnStabilisationSocket::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SpawnStabilisationSocket, CallFunc_BreakHitResult_ElementIndex) == 0x0001E4, "Member 'BP_Character_C_SpawnStabilisationSocket::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SpawnStabilisationSocket, CallFunc_BreakHitResult_FaceIndex) == 0x0001E8, "Member 'BP_Character_C_SpawnStabilisationSocket::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SpawnStabilisationSocket, CallFunc_BreakHitResult_TraceStart) == 0x0001F0, "Member 'BP_Character_C_SpawnStabilisationSocket::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SpawnStabilisationSocket, CallFunc_BreakHitResult_TraceEnd) == 0x000208, "Member 'BP_Character_C_SpawnStabilisationSocket::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SpawnStabilisationSocket, CallFunc_MakeTransform_ReturnValue) == 0x000220, "Member 'BP_Character_C_SpawnStabilisationSocket::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SpawnStabilisationSocket, CallFunc_IsValid_ReturnValue) == 0x000280, "Member 'BP_Character_C_SpawnStabilisationSocket::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SpawnStabilisationSocket, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000288, "Member 'BP_Character_C_SpawnStabilisationSocket::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SpawnStabilisationSocket, CallFunc_FinishSpawningActor_ReturnValue) == 0x000290, "Member 'BP_Character_C_SpawnStabilisationSocket::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SpawnStabilisationSocket, CallFunc_GetPhysicsLinearVelocity_ReturnValue) == 0x000298, "Member 'BP_Character_C_SpawnStabilisationSocket::CallFunc_GetPhysicsLinearVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SpawnStabilisationSocket, CallFunc_K2_AttachToComponent_ReturnValue) == 0x0002B0, "Member 'BP_Character_C_SpawnStabilisationSocket::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.Sprint
// 0x0001 (0x0001 - 0x0000)
struct BP_Character_C_Sprint final
{
public:
	bool                                          Param_Sprint;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_Sprint) == 0x000001, "Wrong alignment on BP_Character_C_Sprint");
static_assert(sizeof(BP_Character_C_Sprint) == 0x000001, "Wrong size on BP_Character_C_Sprint");
static_assert(offsetof(BP_Character_C_Sprint, Param_Sprint) == 0x000000, "Member 'BP_Character_C_Sprint::Param_Sprint' has a wrong offset!");

// Function BP_Character.BP_Character_C.SprintAll
// 0x0001 (0x0001 - 0x0000)
struct BP_Character_C_SprintAll final
{
public:
	bool                                          Param_Sprint;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_SprintAll) == 0x000001, "Wrong alignment on BP_Character_C_SprintAll");
static_assert(sizeof(BP_Character_C_SprintAll) == 0x000001, "Wrong size on BP_Character_C_SprintAll");
static_assert(offsetof(BP_Character_C_SprintAll, Param_Sprint) == 0x000000, "Member 'BP_Character_C_SprintAll::Param_Sprint' has a wrong offset!");

// Function BP_Character.BP_Character_C.SprintSRV
// 0x0001 (0x0001 - 0x0000)
struct BP_Character_C_SprintSRV final
{
public:
	bool                                          Param_Sprint;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_SprintSRV) == 0x000001, "Wrong alignment on BP_Character_C_SprintSRV");
static_assert(sizeof(BP_Character_C_SprintSRV) == 0x000001, "Wrong size on BP_Character_C_SprintSRV");
static_assert(offsetof(BP_Character_C_SprintSRV, Param_Sprint) == 0x000000, "Member 'BP_Character_C_SprintSRV::Param_Sprint' has a wrong offset!");

// Function BP_Character.BP_Character_C.StabilizeGroundedMovement
// 0x0160 (0x0160 - 0x0000)
struct BP_Character_C_StabilizeGroundedMovement final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32E5[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetDesiredMoveDirection_ReturnValue;      // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32E6[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32E7[0x6];                                     // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetPhysicsAngularVelocityInDegrees_ReturnValue; // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetPhysicsLinearVelocity_ReturnValue;     // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue_1;                      // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32E8[0x7];                                     // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue_2;                      // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32E9[0x6];                                     // 0x00B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetDesiredMoveDirection_ReturnValue_1;    // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetPhysicsLinearVelocity_ReturnValue_1;   // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0100(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize2D_ReturnValue;                      // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0118(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_2;                          // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_2;                          // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_2;                          // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0148(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_StabilizeGroundedMovement) == 0x000008, "Wrong alignment on BP_Character_C_StabilizeGroundedMovement");
static_assert(sizeof(BP_Character_C_StabilizeGroundedMovement) == 0x000160, "Wrong size on BP_Character_C_StabilizeGroundedMovement");
static_assert(offsetof(BP_Character_C_StabilizeGroundedMovement, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_Character_C_StabilizeGroundedMovement::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StabilizeGroundedMovement, CallFunc_IsValid_ReturnValue_1) == 0x000001, "Member 'BP_Character_C_StabilizeGroundedMovement::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StabilizeGroundedMovement, CallFunc_IsValid_ReturnValue_2) == 0x000002, "Member 'BP_Character_C_StabilizeGroundedMovement::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StabilizeGroundedMovement, CallFunc_GetDesiredMoveDirection_ReturnValue) == 0x000008, "Member 'BP_Character_C_StabilizeGroundedMovement::CallFunc_GetDesiredMoveDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StabilizeGroundedMovement, CallFunc_IsValid_ReturnValue_3) == 0x000020, "Member 'BP_Character_C_StabilizeGroundedMovement::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StabilizeGroundedMovement, CallFunc_VSize_ReturnValue) == 0x000028, "Member 'BP_Character_C_StabilizeGroundedMovement::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StabilizeGroundedMovement, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000030, "Member 'BP_Character_C_StabilizeGroundedMovement::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StabilizeGroundedMovement, CallFunc_IsValid_ReturnValue_4) == 0x000031, "Member 'BP_Character_C_StabilizeGroundedMovement::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StabilizeGroundedMovement, CallFunc_GetPhysicsAngularVelocityInDegrees_ReturnValue) == 0x000038, "Member 'BP_Character_C_StabilizeGroundedMovement::CallFunc_GetPhysicsAngularVelocityInDegrees_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StabilizeGroundedMovement, CallFunc_GetPhysicsLinearVelocity_ReturnValue) == 0x000050, "Member 'BP_Character_C_StabilizeGroundedMovement::CallFunc_GetPhysicsLinearVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StabilizeGroundedMovement, CallFunc_VSize_ReturnValue_1) == 0x000068, "Member 'BP_Character_C_StabilizeGroundedMovement::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StabilizeGroundedMovement, CallFunc_BreakVector_X) == 0x000070, "Member 'BP_Character_C_StabilizeGroundedMovement::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StabilizeGroundedMovement, CallFunc_BreakVector_Y) == 0x000078, "Member 'BP_Character_C_StabilizeGroundedMovement::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StabilizeGroundedMovement, CallFunc_BreakVector_Z) == 0x000080, "Member 'BP_Character_C_StabilizeGroundedMovement::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StabilizeGroundedMovement, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000088, "Member 'BP_Character_C_StabilizeGroundedMovement::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StabilizeGroundedMovement, CallFunc_MakeVector_ReturnValue) == 0x000090, "Member 'BP_Character_C_StabilizeGroundedMovement::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StabilizeGroundedMovement, CallFunc_VSize_ReturnValue_2) == 0x0000A8, "Member 'BP_Character_C_StabilizeGroundedMovement::CallFunc_VSize_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StabilizeGroundedMovement, CallFunc_IsValid_ReturnValue_5) == 0x0000B0, "Member 'BP_Character_C_StabilizeGroundedMovement::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StabilizeGroundedMovement, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x0000B1, "Member 'BP_Character_C_StabilizeGroundedMovement::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StabilizeGroundedMovement, CallFunc_GetDesiredMoveDirection_ReturnValue_1) == 0x0000B8, "Member 'BP_Character_C_StabilizeGroundedMovement::CallFunc_GetDesiredMoveDirection_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StabilizeGroundedMovement, CallFunc_GetPhysicsLinearVelocity_ReturnValue_1) == 0x0000D0, "Member 'BP_Character_C_StabilizeGroundedMovement::CallFunc_GetPhysicsLinearVelocity_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StabilizeGroundedMovement, CallFunc_BreakVector_X_1) == 0x0000E8, "Member 'BP_Character_C_StabilizeGroundedMovement::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StabilizeGroundedMovement, CallFunc_BreakVector_Y_1) == 0x0000F0, "Member 'BP_Character_C_StabilizeGroundedMovement::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StabilizeGroundedMovement, CallFunc_BreakVector_Z_1) == 0x0000F8, "Member 'BP_Character_C_StabilizeGroundedMovement::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StabilizeGroundedMovement, CallFunc_MakeVector2D_ReturnValue) == 0x000100, "Member 'BP_Character_C_StabilizeGroundedMovement::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StabilizeGroundedMovement, CallFunc_VSize2D_ReturnValue) == 0x000110, "Member 'BP_Character_C_StabilizeGroundedMovement::CallFunc_VSize2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StabilizeGroundedMovement, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000118, "Member 'BP_Character_C_StabilizeGroundedMovement::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StabilizeGroundedMovement, CallFunc_BreakVector_X_2) == 0x000130, "Member 'BP_Character_C_StabilizeGroundedMovement::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StabilizeGroundedMovement, CallFunc_BreakVector_Y_2) == 0x000138, "Member 'BP_Character_C_StabilizeGroundedMovement::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StabilizeGroundedMovement, CallFunc_BreakVector_Z_2) == 0x000140, "Member 'BP_Character_C_StabilizeGroundedMovement::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StabilizeGroundedMovement, CallFunc_MakeVector_ReturnValue_1) == 0x000148, "Member 'BP_Character_C_StabilizeGroundedMovement::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");

// Function BP_Character.BP_Character_C.StepMovement
// 0x0798 (0x0798 - 0x0000)
struct BP_Character_C_StepMovement final
{
public:
	double                                        VelocityScaleLocal;                                // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DesiredMoveDirectionLocal;                         // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PreviousVel;                                       // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Traces;                                            // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32EA[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0040(0x0010)(ConstParm, ReferenceParm)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32EB[0x2];                                     // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32EC[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32ED[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromX_ReturnValue;                 // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetPhysicsLinearVelocity_ReturnValue;     // 0x0120(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0138(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0158(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_1;            // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Gamestate_C>      K2Node_DynamicCast_AsBPI_Gamestate;                // 0x0168(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32EE[0x7];                                     // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APawn*>                          CallFunc_GetPawnArray_Array;                       // 0x0180(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_GetDesiredMoveDirection_ReturnValue;      // 0x0190(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x01A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlaying_ReturnValue;                    // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32EF[0x3];                                     // 0x01C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_2;            // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32F0[0x7];                                     // 0x01D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x01E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x01F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32F1[0x4];                                     // 0x0214(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0218(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x0230(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue_1;        // 0x0248(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x0260(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_2;    // 0x0278(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_3;           // 0x0290(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x02B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_4;           // 0x02C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_5;           // 0x02D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_6;           // 0x02F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0308(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x03F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x03F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x03F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32F2[0x1];                                     // 0x03F3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x03F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x03F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32F3[0x4];                                     // 0x03FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0400(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0418(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0430(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0448(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0460(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0468(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0470(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0478(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x0480(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0488(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x048C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0490(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32F4[0x4];                                     // 0x0494(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0498(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x04B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ComponentHasTag_ReturnValue;              // 0x04C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x04C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ActorHasTag_ReturnValue;                  // 0x04CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32F5[0x5];                                     // 0x04CB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X_2;                          // 0x04D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_2;                          // 0x04D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_2;                          // 0x04E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x04E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_7;           // 0x04F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue;           // 0x0508(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32F6[0x7];                                     // 0x0509(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0510(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_SphereTraceSingle_OutHit;                 // 0x0528(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingle_ReturnValue;            // 0x0610(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32F7[0x7];                                     // 0x0611(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X_3;                          // 0x0618(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_3;                          // 0x0620(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_3;                          // 0x0628(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x0630(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x0631(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32F8[0x2];                                     // 0x0632(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x0634(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x0638(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32F9[0x4];                                     // 0x063C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x0640(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x0658(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x0670(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x0688(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x06A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x06A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x06B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x06B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName_1;                // 0x06C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x06C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_1;            // 0x06CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x06D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32FA[0x4];                                     // 0x06D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x06D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x06F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_4;                          // 0x0708(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_4;                          // 0x0710(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_4;                          // 0x0718(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_5;                          // 0x0720(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_5;                          // 0x0728(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_5;                          // 0x0730(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0738(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32FB[0x7];                                     // 0x0739(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0740(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0748(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32FC[0x7];                                     // 0x0749(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0750(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0758(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0760(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0761(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32FD[0x6];                                     // 0x0762(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetDesiredMoveDirection_ReturnValue_1;    // 0x0768(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlaying_ReturnValue_1;                  // 0x0780(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32FE[0x7];                                     // 0x0781(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_VSize_ReturnValue_1;                      // 0x0788(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_2;       // 0x0790(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_StepMovement) == 0x000008, "Wrong alignment on BP_Character_C_StepMovement");
static_assert(sizeof(BP_Character_C_StepMovement) == 0x000798, "Wrong size on BP_Character_C_StepMovement");
static_assert(offsetof(BP_Character_C_StepMovement, VelocityScaleLocal) == 0x000000, "Member 'BP_Character_C_StepMovement::VelocityScaleLocal' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, DesiredMoveDirectionLocal) == 0x000008, "Member 'BP_Character_C_StepMovement::DesiredMoveDirectionLocal' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, PreviousVel) == 0x000020, "Member 'BP_Character_C_StepMovement::PreviousVel' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, Traces) == 0x000038, "Member 'BP_Character_C_StepMovement::Traces' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, Temp_object_Variable) == 0x000040, "Member 'BP_Character_C_StepMovement::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, Temp_bool_IsClosed_Variable) == 0x000050, "Member 'BP_Character_C_StepMovement::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, Temp_bool_Has_Been_Initd_Variable) == 0x000051, "Member 'BP_Character_C_StepMovement::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, Temp_int_Variable) == 0x000054, "Member 'BP_Character_C_StepMovement::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000058, "Member 'BP_Character_C_StepMovement::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_MapRangeClamped_ReturnValue) == 0x000060, "Member 'BP_Character_C_StepMovement::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000068, "Member 'BP_Character_C_StepMovement::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000070, "Member 'BP_Character_C_StepMovement::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_Add_IntInt_ReturnValue) == 0x000088, "Member 'BP_Character_C_StepMovement::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000090, "Member 'BP_Character_C_StepMovement::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakVector_X) == 0x0000A8, "Member 'BP_Character_C_StepMovement::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakVector_Y) == 0x0000B0, "Member 'BP_Character_C_StepMovement::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakVector_Z) == 0x0000B8, "Member 'BP_Character_C_StepMovement::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x0000C0, "Member 'BP_Character_C_StepMovement::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_Add_VectorVector_ReturnValue) == 0x0000D8, "Member 'BP_Character_C_StepMovement::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_MakeRotFromX_ReturnValue) == 0x0000F0, "Member 'BP_Character_C_StepMovement::CallFunc_MakeRotFromX_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_GetRightVector_ReturnValue) == 0x000108, "Member 'BP_Character_C_StepMovement::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_GetPhysicsLinearVelocity_ReturnValue) == 0x000120, "Member 'BP_Character_C_StepMovement::CallFunc_GetPhysicsLinearVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000138, "Member 'BP_Character_C_StepMovement::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_VSize_ReturnValue) == 0x000150, "Member 'BP_Character_C_StepMovement::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_GetGameState_ReturnValue) == 0x000158, "Member 'BP_Character_C_StepMovement::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_MapRangeClamped_ReturnValue_1) == 0x000160, "Member 'BP_Character_C_StepMovement::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, K2Node_DynamicCast_AsBPI_Gamestate) == 0x000168, "Member 'BP_Character_C_StepMovement::K2Node_DynamicCast_AsBPI_Gamestate' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, K2Node_DynamicCast_bSuccess) == 0x000178, "Member 'BP_Character_C_StepMovement::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_GetPawnArray_Array) == 0x000180, "Member 'BP_Character_C_StepMovement::CallFunc_GetPawnArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_GetDesiredMoveDirection_ReturnValue) == 0x000190, "Member 'BP_Character_C_StepMovement::CallFunc_GetDesiredMoveDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_MakeVector_ReturnValue) == 0x0001A8, "Member 'BP_Character_C_StepMovement::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_IsPlaying_ReturnValue) == 0x0001C0, "Member 'BP_Character_C_StepMovement::CallFunc_IsPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, Temp_int_Variable_1) == 0x0001C4, "Member 'BP_Character_C_StepMovement::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x0001C8, "Member 'BP_Character_C_StepMovement::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_MapRangeClamped_ReturnValue_2) == 0x0001D0, "Member 'BP_Character_C_StepMovement::CallFunc_MapRangeClamped_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x0001D8, "Member 'BP_Character_C_StepMovement::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_MakeVector_ReturnValue_1) == 0x0001E0, "Member 'BP_Character_C_StepMovement::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_MakeVector_ReturnValue_2) == 0x0001F8, "Member 'BP_Character_C_StepMovement::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_Add_IntInt_ReturnValue_1) == 0x000210, "Member 'BP_Character_C_StepMovement::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000218, "Member 'BP_Character_C_StepMovement::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_Add_VectorVector_ReturnValue_2) == 0x000230, "Member 'BP_Character_C_StepMovement::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_Conv_DoubleToVector_ReturnValue_1) == 0x000248, "Member 'BP_Character_C_StepMovement::CallFunc_Conv_DoubleToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x000260, "Member 'BP_Character_C_StepMovement::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_K2_GetComponentLocation_ReturnValue_2) == 0x000278, "Member 'BP_Character_C_StepMovement::CallFunc_K2_GetComponentLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_Add_VectorVector_ReturnValue_3) == 0x000290, "Member 'BP_Character_C_StepMovement::CallFunc_Add_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakVector_X_1) == 0x0002A8, "Member 'BP_Character_C_StepMovement::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakVector_Y_1) == 0x0002B0, "Member 'BP_Character_C_StepMovement::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakVector_Z_1) == 0x0002B8, "Member 'BP_Character_C_StepMovement::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_Add_VectorVector_ReturnValue_4) == 0x0002C0, "Member 'BP_Character_C_StepMovement::CallFunc_Add_VectorVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_Add_VectorVector_ReturnValue_5) == 0x0002D8, "Member 'BP_Character_C_StepMovement::CallFunc_Add_VectorVector_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_Add_VectorVector_ReturnValue_6) == 0x0002F0, "Member 'BP_Character_C_StepMovement::CallFunc_Add_VectorVector_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_LineTraceSingle_OutHit) == 0x000308, "Member 'BP_Character_C_StepMovement::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_LineTraceSingle_ReturnValue) == 0x0003F0, "Member 'BP_Character_C_StepMovement::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakHitResult_bBlockingHit) == 0x0003F1, "Member 'BP_Character_C_StepMovement::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakHitResult_bInitialOverlap) == 0x0003F2, "Member 'BP_Character_C_StepMovement::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakHitResult_Time) == 0x0003F4, "Member 'BP_Character_C_StepMovement::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakHitResult_Distance) == 0x0003F8, "Member 'BP_Character_C_StepMovement::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakHitResult_Location) == 0x000400, "Member 'BP_Character_C_StepMovement::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakHitResult_ImpactPoint) == 0x000418, "Member 'BP_Character_C_StepMovement::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakHitResult_Normal) == 0x000430, "Member 'BP_Character_C_StepMovement::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakHitResult_ImpactNormal) == 0x000448, "Member 'BP_Character_C_StepMovement::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakHitResult_PhysMat) == 0x000460, "Member 'BP_Character_C_StepMovement::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakHitResult_HitActor) == 0x000468, "Member 'BP_Character_C_StepMovement::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakHitResult_HitComponent) == 0x000470, "Member 'BP_Character_C_StepMovement::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakHitResult_HitBoneName) == 0x000478, "Member 'BP_Character_C_StepMovement::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakHitResult_BoneName) == 0x000480, "Member 'BP_Character_C_StepMovement::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakHitResult_HitItem) == 0x000488, "Member 'BP_Character_C_StepMovement::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakHitResult_ElementIndex) == 0x00048C, "Member 'BP_Character_C_StepMovement::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakHitResult_FaceIndex) == 0x000490, "Member 'BP_Character_C_StepMovement::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakHitResult_TraceStart) == 0x000498, "Member 'BP_Character_C_StepMovement::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakHitResult_TraceEnd) == 0x0004B0, "Member 'BP_Character_C_StepMovement::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_ComponentHasTag_ReturnValue) == 0x0004C8, "Member 'BP_Character_C_StepMovement::CallFunc_ComponentHasTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, K2Node_SwitchEnum_CmpSuccess) == 0x0004C9, "Member 'BP_Character_C_StepMovement::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_ActorHasTag_ReturnValue) == 0x0004CA, "Member 'BP_Character_C_StepMovement::CallFunc_ActorHasTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakVector_X_2) == 0x0004D0, "Member 'BP_Character_C_StepMovement::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakVector_Y_2) == 0x0004D8, "Member 'BP_Character_C_StepMovement::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakVector_Z_2) == 0x0004E0, "Member 'BP_Character_C_StepMovement::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_Abs_ReturnValue) == 0x0004E8, "Member 'BP_Character_C_StepMovement::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_Add_VectorVector_ReturnValue_7) == 0x0004F0, "Member 'BP_Character_C_StepMovement::CallFunc_Add_VectorVector_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_InRange_FloatFloat_ReturnValue) == 0x000508, "Member 'BP_Character_C_StepMovement::CallFunc_InRange_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000510, "Member 'BP_Character_C_StepMovement::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_SphereTraceSingle_OutHit) == 0x000528, "Member 'BP_Character_C_StepMovement::CallFunc_SphereTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_SphereTraceSingle_ReturnValue) == 0x000610, "Member 'BP_Character_C_StepMovement::CallFunc_SphereTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakVector_X_3) == 0x000618, "Member 'BP_Character_C_StepMovement::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakVector_Y_3) == 0x000620, "Member 'BP_Character_C_StepMovement::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakVector_Z_3) == 0x000628, "Member 'BP_Character_C_StepMovement::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakHitResult_bBlockingHit_1) == 0x000630, "Member 'BP_Character_C_StepMovement::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x000631, "Member 'BP_Character_C_StepMovement::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakHitResult_Time_1) == 0x000634, "Member 'BP_Character_C_StepMovement::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakHitResult_Distance_1) == 0x000638, "Member 'BP_Character_C_StepMovement::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakHitResult_Location_1) == 0x000640, "Member 'BP_Character_C_StepMovement::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakHitResult_ImpactPoint_1) == 0x000658, "Member 'BP_Character_C_StepMovement::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakHitResult_Normal_1) == 0x000670, "Member 'BP_Character_C_StepMovement::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakHitResult_ImpactNormal_1) == 0x000688, "Member 'BP_Character_C_StepMovement::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakHitResult_PhysMat_1) == 0x0006A0, "Member 'BP_Character_C_StepMovement::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakHitResult_HitActor_1) == 0x0006A8, "Member 'BP_Character_C_StepMovement::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakHitResult_HitComponent_1) == 0x0006B0, "Member 'BP_Character_C_StepMovement::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakHitResult_HitBoneName_1) == 0x0006B8, "Member 'BP_Character_C_StepMovement::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakHitResult_BoneName_1) == 0x0006C0, "Member 'BP_Character_C_StepMovement::CallFunc_BreakHitResult_BoneName_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakHitResult_HitItem_1) == 0x0006C8, "Member 'BP_Character_C_StepMovement::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakHitResult_ElementIndex_1) == 0x0006CC, "Member 'BP_Character_C_StepMovement::CallFunc_BreakHitResult_ElementIndex_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakHitResult_FaceIndex_1) == 0x0006D0, "Member 'BP_Character_C_StepMovement::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakHitResult_TraceStart_1) == 0x0006D8, "Member 'BP_Character_C_StepMovement::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakHitResult_TraceEnd_1) == 0x0006F0, "Member 'BP_Character_C_StepMovement::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakVector_X_4) == 0x000708, "Member 'BP_Character_C_StepMovement::CallFunc_BreakVector_X_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakVector_Y_4) == 0x000710, "Member 'BP_Character_C_StepMovement::CallFunc_BreakVector_Y_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakVector_Z_4) == 0x000718, "Member 'BP_Character_C_StepMovement::CallFunc_BreakVector_Z_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakVector_X_5) == 0x000720, "Member 'BP_Character_C_StepMovement::CallFunc_BreakVector_X_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakVector_Y_5) == 0x000728, "Member 'BP_Character_C_StepMovement::CallFunc_BreakVector_Y_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_BreakVector_Z_5) == 0x000730, "Member 'BP_Character_C_StepMovement::CallFunc_BreakVector_Z_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000738, "Member 'BP_Character_C_StepMovement::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000740, "Member 'BP_Character_C_StepMovement::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000748, "Member 'BP_Character_C_StepMovement::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000750, "Member 'BP_Character_C_StepMovement::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000758, "Member 'BP_Character_C_StepMovement::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000760, "Member 'BP_Character_C_StepMovement::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, K2Node_SwitchEnum_CmpSuccess_1) == 0x000761, "Member 'BP_Character_C_StepMovement::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_GetDesiredMoveDirection_ReturnValue_1) == 0x000768, "Member 'BP_Character_C_StepMovement::CallFunc_GetDesiredMoveDirection_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_IsPlaying_ReturnValue_1) == 0x000780, "Member 'BP_Character_C_StepMovement::CallFunc_IsPlaying_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_VSize_ReturnValue_1) == 0x000788, "Member 'BP_Character_C_StepMovement::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StepMovement, CallFunc_Greater_DoubleDouble_ReturnValue_2) == 0x000790, "Member 'BP_Character_C_StepMovement::CallFunc_Greater_DoubleDouble_ReturnValue_2' has a wrong offset!");

// Function BP_Character.BP_Character_C.StopGridConstraint
// 0x0001 (0x0001 - 0x0000)
struct BP_Character_C_StopGridConstraint final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_StopGridConstraint) == 0x000001, "Wrong alignment on BP_Character_C_StopGridConstraint");
static_assert(sizeof(BP_Character_C_StopGridConstraint) == 0x000001, "Wrong size on BP_Character_C_StopGridConstraint");
static_assert(offsetof(BP_Character_C_StopGridConstraint, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_Character_C_StopGridConstraint::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.StuckTrace
// 0x0240 (0x0240 - 0x0000)
struct BP_Character_C_StuckTrace final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32FF[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             OutHit;                                            // 0x0008(0x00E8)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Gamestate_C>      K2Node_DynamicCast_AsBPI_Gamestate;                // 0x00F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3300[0x7];                                     // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0110(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class APawn*>                          CallFunc_GetPawnArray_Array;                       // 0x0128(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x0138(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0150(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_StuckTrace) == 0x000008, "Wrong alignment on BP_Character_C_StuckTrace");
static_assert(sizeof(BP_Character_C_StuckTrace) == 0x000240, "Wrong size on BP_Character_C_StuckTrace");
static_assert(offsetof(BP_Character_C_StuckTrace, ReturnValue) == 0x000000, "Member 'BP_Character_C_StuckTrace::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StuckTrace, OutHit) == 0x000008, "Member 'BP_Character_C_StuckTrace::OutHit' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StuckTrace, CallFunc_GetGameState_ReturnValue) == 0x0000F0, "Member 'BP_Character_C_StuckTrace::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StuckTrace, K2Node_DynamicCast_AsBPI_Gamestate) == 0x0000F8, "Member 'BP_Character_C_StuckTrace::K2Node_DynamicCast_AsBPI_Gamestate' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StuckTrace, K2Node_DynamicCast_bSuccess) == 0x000108, "Member 'BP_Character_C_StuckTrace::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StuckTrace, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000110, "Member 'BP_Character_C_StuckTrace::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StuckTrace, CallFunc_GetPawnArray_Array) == 0x000128, "Member 'BP_Character_C_StuckTrace::CallFunc_GetPawnArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StuckTrace, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x000138, "Member 'BP_Character_C_StuckTrace::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StuckTrace, CallFunc_LineTraceSingle_OutHit) == 0x000150, "Member 'BP_Character_C_StuckTrace::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_Character_C_StuckTrace, CallFunc_LineTraceSingle_ReturnValue) == 0x000238, "Member 'BP_Character_C_StuckTrace::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.SunAttraction
// 0x0068 (0x0068 - 0x0000)
struct BP_Character_C_SunAttraction final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3301[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_SunAttraction) == 0x000008, "Wrong alignment on BP_Character_C_SunAttraction");
static_assert(sizeof(BP_Character_C_SunAttraction) == 0x000068, "Wrong size on BP_Character_C_SunAttraction");
static_assert(offsetof(BP_Character_C_SunAttraction, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_Character_C_SunAttraction::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SunAttraction, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000008, "Member 'BP_Character_C_SunAttraction::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SunAttraction, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000020, "Member 'BP_Character_C_SunAttraction::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SunAttraction, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000038, "Member 'BP_Character_C_SunAttraction::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SunAttraction, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000050, "Member 'BP_Character_C_SunAttraction::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.SwitchClimbMode
// 0x0050 (0x0050 - 0x0000)
struct BP_Character_C_SwitchClimbMode final
{
public:
	struct FRotator                               Rot;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USceneComponent*                        Comp;                                              // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Normal;                                            // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_SwitchClimbMode) == 0x000008, "Wrong alignment on BP_Character_C_SwitchClimbMode");
static_assert(sizeof(BP_Character_C_SwitchClimbMode) == 0x000050, "Wrong size on BP_Character_C_SwitchClimbMode");
static_assert(offsetof(BP_Character_C_SwitchClimbMode, Rot) == 0x000000, "Member 'BP_Character_C_SwitchClimbMode::Rot' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SwitchClimbMode, Comp) == 0x000018, "Member 'BP_Character_C_SwitchClimbMode::Comp' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SwitchClimbMode, HitLocation) == 0x000020, "Member 'BP_Character_C_SwitchClimbMode::HitLocation' has a wrong offset!");
static_assert(offsetof(BP_Character_C_SwitchClimbMode, Normal) == 0x000038, "Member 'BP_Character_C_SwitchClimbMode::Normal' has a wrong offset!");

// Function BP_Character.BP_Character_C.SwitchToTyroAll
// 0x0008 (0x0008 - 0x0000)
struct BP_Character_C_SwitchToTyroAll final
{
public:
	class ABP_Tyrolienne_C*                       Tyrolienne;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_SwitchToTyroAll) == 0x000008, "Wrong alignment on BP_Character_C_SwitchToTyroAll");
static_assert(sizeof(BP_Character_C_SwitchToTyroAll) == 0x000008, "Wrong size on BP_Character_C_SwitchToTyroAll");
static_assert(offsetof(BP_Character_C_SwitchToTyroAll, Tyrolienne) == 0x000000, "Member 'BP_Character_C_SwitchToTyroAll::Tyrolienne' has a wrong offset!");

// Function BP_Character.BP_Character_C.SwitchToTyrolienne
// 0x0008 (0x0008 - 0x0000)
struct BP_Character_C_SwitchToTyrolienne final
{
public:
	class ABP_Tyrolienne_C*                       Tyrolienne;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_SwitchToTyrolienne) == 0x000008, "Wrong alignment on BP_Character_C_SwitchToTyrolienne");
static_assert(sizeof(BP_Character_C_SwitchToTyrolienne) == 0x000008, "Wrong size on BP_Character_C_SwitchToTyrolienne");
static_assert(offsetof(BP_Character_C_SwitchToTyrolienne, Tyrolienne) == 0x000000, "Member 'BP_Character_C_SwitchToTyrolienne::Tyrolienne' has a wrong offset!");

// Function BP_Character.BP_Character_C.SwitchToTyroSRV
// 0x0008 (0x0008 - 0x0000)
struct BP_Character_C_SwitchToTyroSRV final
{
public:
	class ABP_Tyrolienne_C*                       Tyrolienne;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_SwitchToTyroSRV) == 0x000008, "Wrong alignment on BP_Character_C_SwitchToTyroSRV");
static_assert(sizeof(BP_Character_C_SwitchToTyroSRV) == 0x000008, "Wrong size on BP_Character_C_SwitchToTyroSRV");
static_assert(offsetof(BP_Character_C_SwitchToTyroSRV, Tyrolienne) == 0x000000, "Member 'BP_Character_C_SwitchToTyroSRV::Tyrolienne' has a wrong offset!");

// Function BP_Character.BP_Character_C.TrampolineBounce
// 0x0010 (0x0010 - 0x0000)
struct BP_Character_C_TrampolineBounce final
{
public:
	double                                        Force;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_Instigator;                                  // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseControlRot;                                     // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_TrampolineBounce) == 0x000008, "Wrong alignment on BP_Character_C_TrampolineBounce");
static_assert(sizeof(BP_Character_C_TrampolineBounce) == 0x000010, "Wrong size on BP_Character_C_TrampolineBounce");
static_assert(offsetof(BP_Character_C_TrampolineBounce, Force) == 0x000000, "Member 'BP_Character_C_TrampolineBounce::Force' has a wrong offset!");
static_assert(offsetof(BP_Character_C_TrampolineBounce, Param_Instigator) == 0x000008, "Member 'BP_Character_C_TrampolineBounce::Param_Instigator' has a wrong offset!");
static_assert(offsetof(BP_Character_C_TrampolineBounce, UseControlRot) == 0x000009, "Member 'BP_Character_C_TrampolineBounce::UseControlRot' has a wrong offset!");

// Function BP_Character.BP_Character_C.Update Balancier Arrow Rotation
// 0x0280 (0x0280 - 0x0000)
struct BP_Character_C_Update_Balancier_Arrow_Rotation final
{
public:
	struct FVector                                CallFunc_GetDesiredMoveDirection_ReturnValue;      // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Balancier_C>      K2Node_DynamicCast_AsBPI_Balancier;                // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3302[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    CallFunc_GetRoot_Root;                             // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x0098(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FRotator                               CallFunc_MakeRotFromZX_ReturnValue;                // 0x0180(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult_1;     // 0x0198(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Character_C_Update_Balancier_Arrow_Rotation) == 0x000008, "Wrong alignment on BP_Character_C_Update_Balancier_Arrow_Rotation");
static_assert(sizeof(BP_Character_C_Update_Balancier_Arrow_Rotation) == 0x000280, "Wrong size on BP_Character_C_Update_Balancier_Arrow_Rotation");
static_assert(offsetof(BP_Character_C_Update_Balancier_Arrow_Rotation, CallFunc_GetDesiredMoveDirection_ReturnValue) == 0x000000, "Member 'BP_Character_C_Update_Balancier_Arrow_Rotation::CallFunc_GetDesiredMoveDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Update_Balancier_Arrow_Rotation, K2Node_DynamicCast_AsBPI_Balancier) == 0x000018, "Member 'BP_Character_C_Update_Balancier_Arrow_Rotation::K2Node_DynamicCast_AsBPI_Balancier' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Update_Balancier_Arrow_Rotation, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_Character_C_Update_Balancier_Arrow_Rotation::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Update_Balancier_Arrow_Rotation, CallFunc_GetRoot_Root) == 0x000030, "Member 'BP_Character_C_Update_Balancier_Arrow_Rotation::CallFunc_GetRoot_Root' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Update_Balancier_Arrow_Rotation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000038, "Member 'BP_Character_C_Update_Balancier_Arrow_Rotation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Update_Balancier_Arrow_Rotation, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000050, "Member 'BP_Character_C_Update_Balancier_Arrow_Rotation::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Update_Balancier_Arrow_Rotation, CallFunc_FindLookAtRotation_ReturnValue) == 0x000068, "Member 'BP_Character_C_Update_Balancier_Arrow_Rotation::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Update_Balancier_Arrow_Rotation, CallFunc_GetForwardVector_ReturnValue) == 0x000080, "Member 'BP_Character_C_Update_Balancier_Arrow_Rotation::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Update_Balancier_Arrow_Rotation, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x000098, "Member 'BP_Character_C_Update_Balancier_Arrow_Rotation::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Update_Balancier_Arrow_Rotation, CallFunc_MakeRotFromZX_ReturnValue) == 0x000180, "Member 'BP_Character_C_Update_Balancier_Arrow_Rotation::CallFunc_MakeRotFromZX_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_Update_Balancier_Arrow_Rotation, CallFunc_K2_SetWorldRotation_SweepHitResult_1) == 0x000198, "Member 'BP_Character_C_Update_Balancier_Arrow_Rotation::CallFunc_K2_SetWorldRotation_SweepHitResult_1' has a wrong offset!");

// Function BP_Character.BP_Character_C.UpdateChainSound
// 0x0028 (0x0028 - 0x0000)
struct BP_Character_C_UpdateChainSound final
{
public:
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumPlayers_ReturnValue;                // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3303[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetVolumeMultiplier_NewVolumeMultiplier_ImplicitCast; // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_UpdateChainSound) == 0x000008, "Wrong alignment on BP_Character_C_UpdateChainSound");
static_assert(sizeof(BP_Character_C_UpdateChainSound) == 0x000028, "Wrong size on BP_Character_C_UpdateChainSound");
static_assert(offsetof(BP_Character_C_UpdateChainSound, CallFunc_VSize_ReturnValue) == 0x000000, "Member 'BP_Character_C_UpdateChainSound::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateChainSound, CallFunc_MapRangeClamped_ReturnValue) == 0x000008, "Member 'BP_Character_C_UpdateChainSound::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateChainSound, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000010, "Member 'BP_Character_C_UpdateChainSound::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateChainSound, CallFunc_GetNumPlayers_ReturnValue) == 0x000018, "Member 'BP_Character_C_UpdateChainSound::CallFunc_GetNumPlayers_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateChainSound, CallFunc_Greater_IntInt_ReturnValue) == 0x00001C, "Member 'BP_Character_C_UpdateChainSound::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateChainSound, CallFunc_SetVolumeMultiplier_NewVolumeMultiplier_ImplicitCast) == 0x000020, "Member 'BP_Character_C_UpdateChainSound::CallFunc_SetVolumeMultiplier_NewVolumeMultiplier_ImplicitCast' has a wrong offset!");

// Function BP_Character.BP_Character_C.UpdateCharacterMovement
// 0x0009 (0x0009 - 0x0000)
struct BP_Character_C_UpdateCharacterMovement final
{
public:
	EALS_Gait                                     ActualGait;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_Gait                                     AllowedGait;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_Gait                                     Temp_byte_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_Gait                                     Temp_byte_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_Gait                                     K2Node_Select_Default;                             // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_UpdateCharacterMovement) == 0x000001, "Wrong alignment on BP_Character_C_UpdateCharacterMovement");
static_assert(sizeof(BP_Character_C_UpdateCharacterMovement) == 0x000009, "Wrong size on BP_Character_C_UpdateCharacterMovement");
static_assert(offsetof(BP_Character_C_UpdateCharacterMovement, ActualGait) == 0x000000, "Member 'BP_Character_C_UpdateCharacterMovement::ActualGait' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateCharacterMovement, AllowedGait) == 0x000001, "Member 'BP_Character_C_UpdateCharacterMovement::AllowedGait' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateCharacterMovement, Temp_bool_Variable) == 0x000002, "Member 'BP_Character_C_UpdateCharacterMovement::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateCharacterMovement, Temp_byte_Variable) == 0x000003, "Member 'BP_Character_C_UpdateCharacterMovement::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateCharacterMovement, Temp_byte_Variable_1) == 0x000004, "Member 'BP_Character_C_UpdateCharacterMovement::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateCharacterMovement, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000005, "Member 'BP_Character_C_UpdateCharacterMovement::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateCharacterMovement, CallFunc_BooleanAND_ReturnValue) == 0x000006, "Member 'BP_Character_C_UpdateCharacterMovement::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateCharacterMovement, K2Node_Select_Default) == 0x000007, "Member 'BP_Character_C_UpdateCharacterMovement::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateCharacterMovement, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000008, "Member 'BP_Character_C_UpdateCharacterMovement::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.UpdateDecceleration
// 0x0110 (0x0110 - 0x0000)
struct BP_Character_C_UpdateDecceleration final
{
public:
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDesiredMoveDirection_ReturnValue;      // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetPhysicsLinearVelocity_ReturnValue;     // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VInterpTo_ReturnValue;                    // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue_1;       // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetPhysicsLinearVelocity_ReturnValue_1;   // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VInterpTo_ReturnValue_1;                  // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue_2;       // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetPhysicsLinearVelocity_ReturnValue_2;   // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VInterpTo_ReturnValue_2;                  // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VInterpTo_DeltaTime_ImplicitCast;         // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VInterpTo_InterpSpeed_ImplicitCast;       // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VInterpTo_DeltaTime_ImplicitCast_1;       // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VInterpTo_DeltaTime_ImplicitCast_2;       // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_UpdateDecceleration) == 0x000008, "Wrong alignment on BP_Character_C_UpdateDecceleration");
static_assert(sizeof(BP_Character_C_UpdateDecceleration) == 0x000110, "Wrong size on BP_Character_C_UpdateDecceleration");
static_assert(offsetof(BP_Character_C_UpdateDecceleration, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000000, "Member 'BP_Character_C_UpdateDecceleration::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateDecceleration, CallFunc_GetDesiredMoveDirection_ReturnValue) == 0x000008, "Member 'BP_Character_C_UpdateDecceleration::CallFunc_GetDesiredMoveDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateDecceleration, CallFunc_GetPhysicsLinearVelocity_ReturnValue) == 0x000020, "Member 'BP_Character_C_UpdateDecceleration::CallFunc_GetPhysicsLinearVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateDecceleration, CallFunc_VSize_ReturnValue) == 0x000038, "Member 'BP_Character_C_UpdateDecceleration::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateDecceleration, CallFunc_BreakVector_X) == 0x000040, "Member 'BP_Character_C_UpdateDecceleration::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateDecceleration, CallFunc_BreakVector_Y) == 0x000048, "Member 'BP_Character_C_UpdateDecceleration::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateDecceleration, CallFunc_BreakVector_Z) == 0x000050, "Member 'BP_Character_C_UpdateDecceleration::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateDecceleration, CallFunc_MapRangeClamped_ReturnValue) == 0x000058, "Member 'BP_Character_C_UpdateDecceleration::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateDecceleration, CallFunc_MakeVector_ReturnValue) == 0x000060, "Member 'BP_Character_C_UpdateDecceleration::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateDecceleration, CallFunc_VInterpTo_ReturnValue) == 0x000078, "Member 'BP_Character_C_UpdateDecceleration::CallFunc_VInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateDecceleration, CallFunc_GetWorldDeltaSeconds_ReturnValue_1) == 0x000090, "Member 'BP_Character_C_UpdateDecceleration::CallFunc_GetWorldDeltaSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateDecceleration, CallFunc_GetPhysicsLinearVelocity_ReturnValue_1) == 0x000098, "Member 'BP_Character_C_UpdateDecceleration::CallFunc_GetPhysicsLinearVelocity_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateDecceleration, CallFunc_VInterpTo_ReturnValue_1) == 0x0000B0, "Member 'BP_Character_C_UpdateDecceleration::CallFunc_VInterpTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateDecceleration, CallFunc_GetWorldDeltaSeconds_ReturnValue_2) == 0x0000C8, "Member 'BP_Character_C_UpdateDecceleration::CallFunc_GetWorldDeltaSeconds_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateDecceleration, CallFunc_GetPhysicsLinearVelocity_ReturnValue_2) == 0x0000D0, "Member 'BP_Character_C_UpdateDecceleration::CallFunc_GetPhysicsLinearVelocity_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateDecceleration, CallFunc_VInterpTo_ReturnValue_2) == 0x0000E8, "Member 'BP_Character_C_UpdateDecceleration::CallFunc_VInterpTo_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateDecceleration, CallFunc_VInterpTo_DeltaTime_ImplicitCast) == 0x000100, "Member 'BP_Character_C_UpdateDecceleration::CallFunc_VInterpTo_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateDecceleration, CallFunc_VInterpTo_InterpSpeed_ImplicitCast) == 0x000104, "Member 'BP_Character_C_UpdateDecceleration::CallFunc_VInterpTo_InterpSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateDecceleration, CallFunc_VInterpTo_DeltaTime_ImplicitCast_1) == 0x000108, "Member 'BP_Character_C_UpdateDecceleration::CallFunc_VInterpTo_DeltaTime_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateDecceleration, CallFunc_VInterpTo_DeltaTime_ImplicitCast_2) == 0x00010C, "Member 'BP_Character_C_UpdateDecceleration::CallFunc_VInterpTo_DeltaTime_ImplicitCast_2' has a wrong offset!");

// Function BP_Character.BP_Character_C.UpdateDriveHands
// 0x0030 (0x0030 - 0x0000)
struct BP_Character_C_UpdateDriveHands final
{
public:
	struct FVector                                Left;                                              // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Right;                                             // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_UpdateDriveHands) == 0x000008, "Wrong alignment on BP_Character_C_UpdateDriveHands");
static_assert(sizeof(BP_Character_C_UpdateDriveHands) == 0x000030, "Wrong size on BP_Character_C_UpdateDriveHands");
static_assert(offsetof(BP_Character_C_UpdateDriveHands, Left) == 0x000000, "Member 'BP_Character_C_UpdateDriveHands::Left' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateDriveHands, Right) == 0x000018, "Member 'BP_Character_C_UpdateDriveHands::Right' has a wrong offset!");

// Function BP_Character.BP_Character_C.UpdateGroudedRotation
// 0x0310 (0x0310 - 0x0000)
struct BP_Character_C_UpdateGroudedRotation final
{
public:
	struct FVector                                CallFunc_GetDesiredMoveDirection_ReturnValue;      // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDesiredMoveDirection_ReturnValue_1;    // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromX_ReturnValue;                 // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3304[0x3];                                     // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_SelectControlRot_DesiredControlRotation;  // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanUpdateMovingRotation_ReturnValue;      // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3305[0x3];                                     // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_SelectControlRot_DesiredControlRotation_1; // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_2;                      // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_2;                     // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_2;                       // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3306[0x4];                                     // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3307[0x7];                                     // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_VSize_ReturnValue_1;                      // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3308[0x7];                                     // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_CalculateGroundedRotationRate_ReturnValue; // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3309[0x7];                                     // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetAnimCurveValue_ReturnValue;            // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetAnimCurveValue_ReturnValue_1;          // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue_1;                        // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_2;       // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_330A[0x7];                                     // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_2;                // 0x0158(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_330B[0x7];                                     // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_CalculateGroundedRotationRate_ReturnValue_1; // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_3;                      // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_3;                     // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_3;                       // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_330C[0x4];                                     // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_3;                // 0x0190(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_4;                      // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_4;                     // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_4;                       // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_330D[0x4];                                     // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_4;                // 0x01B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_CalculateGroundedRotationRate_ReturnValue_2; // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_330E[0x7];                                     // 0x01E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_5;                // 0x01F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_AddWorldRotation_SweepHitResult;       // 0x0210(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          K2Node_SwitchEnum_CmpSuccess_3;                    // 0x02F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_330F[0x7];                                     // 0x02F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x0300(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x0308(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast_1;           // 0x030C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_UpdateGroudedRotation) == 0x000008, "Wrong alignment on BP_Character_C_UpdateGroudedRotation");
static_assert(sizeof(BP_Character_C_UpdateGroudedRotation) == 0x000310, "Wrong size on BP_Character_C_UpdateGroudedRotation");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_GetDesiredMoveDirection_ReturnValue) == 0x000000, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_GetDesiredMoveDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_GetDesiredMoveDirection_ReturnValue_1) == 0x000018, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_GetDesiredMoveDirection_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_VSize_ReturnValue) == 0x000030, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_MakeRotFromX_ReturnValue) == 0x000038, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_MakeRotFromX_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_Abs_ReturnValue) == 0x000050, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_BreakRotator_Roll) == 0x000058, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_BreakRotator_Pitch) == 0x00005C, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_BreakRotator_Yaw) == 0x000060, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000064, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_MakeRotator_ReturnValue) == 0x000068, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_SelectControlRot_DesiredControlRotation) == 0x000080, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_SelectControlRot_DesiredControlRotation' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000098, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_BreakRotator_Roll_1) == 0x0000B0, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_BreakRotator_Pitch_1) == 0x0000B4, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_BreakRotator_Yaw_1) == 0x0000B8, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_CanUpdateMovingRotation_ReturnValue) == 0x0000BC, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_CanUpdateMovingRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_SelectControlRot_DesiredControlRotation_1) == 0x0000C0, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_SelectControlRot_DesiredControlRotation_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_BreakRotator_Roll_2) == 0x0000D8, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_BreakRotator_Roll_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_BreakRotator_Pitch_2) == 0x0000DC, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_BreakRotator_Pitch_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_BreakRotator_Yaw_2) == 0x0000E0, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_BreakRotator_Yaw_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x0000E8, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_MakeRotator_ReturnValue_1) == 0x0000F0, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, K2Node_SwitchEnum_CmpSuccess) == 0x000108, "Member 'BP_Character_C_UpdateGroudedRotation::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_VSize_ReturnValue_1) == 0x000110, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000118, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_CalculateGroundedRotationRate_ReturnValue) == 0x000120, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_CalculateGroundedRotationRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_BooleanAND_ReturnValue) == 0x000128, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_GetAnimCurveValue_ReturnValue) == 0x000130, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_GetAnimCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_GetAnimCurveValue_ReturnValue_1) == 0x000138, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_GetAnimCurveValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_Abs_ReturnValue_1) == 0x000140, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000148, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_Greater_DoubleDouble_ReturnValue_2) == 0x000150, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_Greater_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_MakeRotator_ReturnValue_2) == 0x000158, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_MakeRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, K2Node_SwitchEnum_CmpSuccess_1) == 0x000170, "Member 'BP_Character_C_UpdateGroudedRotation::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_CalculateGroundedRotationRate_ReturnValue_1) == 0x000178, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_CalculateGroundedRotationRate_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_BreakRotator_Roll_3) == 0x000180, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_BreakRotator_Roll_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_BreakRotator_Pitch_3) == 0x000184, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_BreakRotator_Pitch_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_BreakRotator_Yaw_3) == 0x000188, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_BreakRotator_Yaw_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_MakeRotator_ReturnValue_3) == 0x000190, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_MakeRotator_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_BreakRotator_Roll_4) == 0x0001A8, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_BreakRotator_Roll_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_BreakRotator_Pitch_4) == 0x0001AC, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_BreakRotator_Pitch_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_BreakRotator_Yaw_4) == 0x0001B0, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_BreakRotator_Yaw_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_MakeRotator_ReturnValue_4) == 0x0001B8, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_MakeRotator_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_CalculateGroundedRotationRate_ReturnValue_2) == 0x0001D0, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_CalculateGroundedRotationRate_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x0001D8, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x0001E0, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, K2Node_SwitchEnum_CmpSuccess_2) == 0x0001E8, "Member 'BP_Character_C_UpdateGroudedRotation::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0001F0, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_MakeRotator_ReturnValue_5) == 0x0001F8, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_MakeRotator_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_K2_AddWorldRotation_SweepHitResult) == 0x000210, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_K2_AddWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, K2Node_SwitchEnum_CmpSuccess_3) == 0x0002F8, "Member 'BP_Character_C_UpdateGroudedRotation::K2Node_SwitchEnum_CmpSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x000300, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x000308, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateGroudedRotation, CallFunc_MakeRotator_Yaw_ImplicitCast_1) == 0x00030C, "Member 'BP_Character_C_UpdateGroudedRotation::CallFunc_MakeRotator_Yaw_ImplicitCast_1' has a wrong offset!");

// Function BP_Character.BP_Character_C.UpdateMovementState
// 0x0002 (0x0002 - 0x0000)
struct BP_Character_C_UpdateMovementState final
{
public:
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_UpdateMovementState) == 0x000001, "Wrong alignment on BP_Character_C_UpdateMovementState");
static_assert(sizeof(BP_Character_C_UpdateMovementState) == 0x000002, "Wrong size on BP_Character_C_UpdateMovementState");
static_assert(offsetof(BP_Character_C_UpdateMovementState, K2Node_SwitchEnum_CmpSuccess) == 0x000000, "Member 'BP_Character_C_UpdateMovementState::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateMovementState, K2Node_SwitchEnum_CmpSuccess_1) == 0x000001, "Member 'BP_Character_C_UpdateMovementState::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");

// Function BP_Character.BP_Character_C.UpdateMoveVectors
// 0x0070 (0x0070 - 0x0000)
struct BP_Character_C_UpdateMoveVectors final
{
public:
	struct FRotator                               CallFunc_SelectControlRot_DesiredControlRotation;  // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3310[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_UpdateMoveVectors) == 0x000008, "Wrong alignment on BP_Character_C_UpdateMoveVectors");
static_assert(sizeof(BP_Character_C_UpdateMoveVectors) == 0x000070, "Wrong size on BP_Character_C_UpdateMoveVectors");
static_assert(offsetof(BP_Character_C_UpdateMoveVectors, CallFunc_SelectControlRot_DesiredControlRotation) == 0x000000, "Member 'BP_Character_C_UpdateMoveVectors::CallFunc_SelectControlRot_DesiredControlRotation' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateMoveVectors, CallFunc_BreakRotator_Roll) == 0x000018, "Member 'BP_Character_C_UpdateMoveVectors::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateMoveVectors, CallFunc_BreakRotator_Pitch) == 0x00001C, "Member 'BP_Character_C_UpdateMoveVectors::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateMoveVectors, CallFunc_BreakRotator_Yaw) == 0x000020, "Member 'BP_Character_C_UpdateMoveVectors::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateMoveVectors, CallFunc_MakeRotator_ReturnValue) == 0x000028, "Member 'BP_Character_C_UpdateMoveVectors::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateMoveVectors, CallFunc_GetForwardVector_ReturnValue) == 0x000040, "Member 'BP_Character_C_UpdateMoveVectors::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateMoveVectors, CallFunc_GetRightVector_ReturnValue) == 0x000058, "Member 'BP_Character_C_UpdateMoveVectors::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.UpdateServerReconciliationSpeed
// 0x0010 (0x0010 - 0x0000)
struct BP_Character_C_UpdateServerReconciliationSpeed final
{
public:
	double                                        MinReconciliationSpeed;                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NewReconciliationSpeed;                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_UpdateServerReconciliationSpeed) == 0x000008, "Wrong alignment on BP_Character_C_UpdateServerReconciliationSpeed");
static_assert(sizeof(BP_Character_C_UpdateServerReconciliationSpeed) == 0x000010, "Wrong size on BP_Character_C_UpdateServerReconciliationSpeed");
static_assert(offsetof(BP_Character_C_UpdateServerReconciliationSpeed, MinReconciliationSpeed) == 0x000000, "Member 'BP_Character_C_UpdateServerReconciliationSpeed::MinReconciliationSpeed' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateServerReconciliationSpeed, NewReconciliationSpeed) == 0x000008, "Member 'BP_Character_C_UpdateServerReconciliationSpeed::NewReconciliationSpeed' has a wrong offset!");

// Function BP_Character.BP_Character_C.UpdateSpringArmSpeed
// 0x0020 (0x0020 - 0x0000)
struct BP_Character_C_UpdateSpringArmSpeed final
{
public:
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_ReturnValue;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_Current_ImplicitCast;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_CameraLagSpeed_ImplicitCast;    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_UpdateSpringArmSpeed) == 0x000008, "Wrong alignment on BP_Character_C_UpdateSpringArmSpeed");
static_assert(sizeof(BP_Character_C_UpdateSpringArmSpeed) == 0x000020, "Wrong size on BP_Character_C_UpdateSpringArmSpeed");
static_assert(offsetof(BP_Character_C_UpdateSpringArmSpeed, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000000, "Member 'BP_Character_C_UpdateSpringArmSpeed::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateSpringArmSpeed, CallFunc_FInterpTo_ReturnValue) == 0x000008, "Member 'BP_Character_C_UpdateSpringArmSpeed::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateSpringArmSpeed, CallFunc_FInterpTo_Current_ImplicitCast) == 0x000010, "Member 'BP_Character_C_UpdateSpringArmSpeed::CallFunc_FInterpTo_Current_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateSpringArmSpeed, K2Node_VariableSet_CameraLagSpeed_ImplicitCast) == 0x000018, "Member 'BP_Character_C_UpdateSpringArmSpeed::K2Node_VariableSet_CameraLagSpeed_ImplicitCast' has a wrong offset!");

// Function BP_Character.BP_Character_C.UpdateSwimRotation
// 0x0188 (0x0188 - 0x0000)
struct BP_Character_C_UpdateSwimRotation final
{
public:
	struct FVector                                CallFunc_GetDesiredMoveDirection_ReturnValue;      // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromX_ReturnValue;                 // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3311[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x0098(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_RInterpTo_DeltaTime_ImplicitCast;         // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_UpdateSwimRotation) == 0x000008, "Wrong alignment on BP_Character_C_UpdateSwimRotation");
static_assert(sizeof(BP_Character_C_UpdateSwimRotation) == 0x000188, "Wrong size on BP_Character_C_UpdateSwimRotation");
static_assert(offsetof(BP_Character_C_UpdateSwimRotation, CallFunc_GetDesiredMoveDirection_ReturnValue) == 0x000000, "Member 'BP_Character_C_UpdateSwimRotation::CallFunc_GetDesiredMoveDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateSwimRotation, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000018, "Member 'BP_Character_C_UpdateSwimRotation::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateSwimRotation, CallFunc_VSize_ReturnValue) == 0x000020, "Member 'BP_Character_C_UpdateSwimRotation::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateSwimRotation, CallFunc_MakeRotFromX_ReturnValue) == 0x000028, "Member 'BP_Character_C_UpdateSwimRotation::CallFunc_MakeRotFromX_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateSwimRotation, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000040, "Member 'BP_Character_C_UpdateSwimRotation::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateSwimRotation, CallFunc_BreakRotator_Roll) == 0x000044, "Member 'BP_Character_C_UpdateSwimRotation::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateSwimRotation, CallFunc_BreakRotator_Pitch) == 0x000048, "Member 'BP_Character_C_UpdateSwimRotation::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateSwimRotation, CallFunc_BreakRotator_Yaw) == 0x00004C, "Member 'BP_Character_C_UpdateSwimRotation::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateSwimRotation, CallFunc_MakeRotator_ReturnValue) == 0x000050, "Member 'BP_Character_C_UpdateSwimRotation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateSwimRotation, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000068, "Member 'BP_Character_C_UpdateSwimRotation::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateSwimRotation, CallFunc_RInterpTo_ReturnValue) == 0x000080, "Member 'BP_Character_C_UpdateSwimRotation::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateSwimRotation, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x000098, "Member 'BP_Character_C_UpdateSwimRotation::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateSwimRotation, CallFunc_RInterpTo_DeltaTime_ImplicitCast) == 0x000180, "Member 'BP_Character_C_UpdateSwimRotation::CallFunc_RInterpTo_DeltaTime_ImplicitCast' has a wrong offset!");

// Function BP_Character.BP_Character_C.UpdateTyrolienneHands
// 0x0020 (0x0020 - 0x0000)
struct BP_Character_C_UpdateTyrolienneHands final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3312[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_UpdateTyrolienneHands) == 0x000008, "Wrong alignment on BP_Character_C_UpdateTyrolienneHands");
static_assert(sizeof(BP_Character_C_UpdateTyrolienneHands) == 0x000020, "Wrong size on BP_Character_C_UpdateTyrolienneHands");
static_assert(offsetof(BP_Character_C_UpdateTyrolienneHands, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_Character_C_UpdateTyrolienneHands::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateTyrolienneHands, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'BP_Character_C_UpdateTyrolienneHands::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UpdateTyrolienneHands, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000008, "Member 'BP_Character_C_UpdateTyrolienneHands::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");

// Function BP_Character.BP_Character_C.UserConstructionScript
// 0x00F0 (0x00F0 - 0x0000)
struct BP_Character_C_UserConstructionScript final
{
public:
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USkeletalMeshComponent*>         CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0030(0x0010)(ReferenceParm, ContainsInstancedReference)
	class USkeletalMeshComponent*                 CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3313[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             CallFunc_GetMaterials_ReturnValue;                 // 0x0050(0x0010)(ReferenceParm)
	class UMaterialInterface*                     CallFunc_Array_Get_Item_1;                         // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3314[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3315[0x3];                                     // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USkeletalMeshComponent*>         CallFunc_K2_GetComponentsByClass_ReturnValue_1;    // 0x0080(0x0010)(ReferenceParm, ContainsInstancedReference)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 CallFunc_Array_Get_Item_2;                         // 0x00A8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInterface*>             CallFunc_GetMaterials_ReturnValue_1;               // 0x00B0(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3316[0x4];                                     // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     CallFunc_Array_Get_Item_3;                         // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3317[0x7];                                     // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue_1; // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_UserConstructionScript) == 0x000008, "Wrong alignment on BP_Character_C_UserConstructionScript");
static_assert(sizeof(BP_Character_C_UserConstructionScript) == 0x0000F0, "Wrong size on BP_Character_C_UserConstructionScript");
static_assert(offsetof(BP_Character_C_UserConstructionScript, Temp_int_Loop_Counter_Variable) == 0x000000, "Member 'BP_Character_C_UserConstructionScript::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UserConstructionScript, Temp_int_Loop_Counter_Variable_1) == 0x000004, "Member 'BP_Character_C_UserConstructionScript::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UserConstructionScript, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_Character_C_UserConstructionScript::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UserConstructionScript, CallFunc_Add_IntInt_ReturnValue_1) == 0x00000C, "Member 'BP_Character_C_UserConstructionScript::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UserConstructionScript, Temp_int_Loop_Counter_Variable_2) == 0x000010, "Member 'BP_Character_C_UserConstructionScript::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UserConstructionScript, CallFunc_Add_IntInt_ReturnValue_2) == 0x000014, "Member 'BP_Character_C_UserConstructionScript::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UserConstructionScript, Temp_int_Array_Index_Variable) == 0x000018, "Member 'BP_Character_C_UserConstructionScript::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UserConstructionScript, Temp_int_Array_Index_Variable_1) == 0x00001C, "Member 'BP_Character_C_UserConstructionScript::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UserConstructionScript, Temp_int_Array_Index_Variable_2) == 0x000020, "Member 'BP_Character_C_UserConstructionScript::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UserConstructionScript, Temp_int_Loop_Counter_Variable_3) == 0x000024, "Member 'BP_Character_C_UserConstructionScript::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UserConstructionScript, CallFunc_Add_IntInt_ReturnValue_3) == 0x000028, "Member 'BP_Character_C_UserConstructionScript::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UserConstructionScript, Temp_int_Array_Index_Variable_3) == 0x00002C, "Member 'BP_Character_C_UserConstructionScript::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UserConstructionScript, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000030, "Member 'BP_Character_C_UserConstructionScript::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UserConstructionScript, CallFunc_Array_Get_Item) == 0x000040, "Member 'BP_Character_C_UserConstructionScript::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UserConstructionScript, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'BP_Character_C_UserConstructionScript::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UserConstructionScript, CallFunc_Less_IntInt_ReturnValue) == 0x00004C, "Member 'BP_Character_C_UserConstructionScript::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UserConstructionScript, CallFunc_GetMaterials_ReturnValue) == 0x000050, "Member 'BP_Character_C_UserConstructionScript::CallFunc_GetMaterials_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UserConstructionScript, CallFunc_Array_Get_Item_1) == 0x000060, "Member 'BP_Character_C_UserConstructionScript::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UserConstructionScript, CallFunc_Array_Length_ReturnValue_1) == 0x000068, "Member 'BP_Character_C_UserConstructionScript::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UserConstructionScript, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000070, "Member 'BP_Character_C_UserConstructionScript::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UserConstructionScript, CallFunc_Less_IntInt_ReturnValue_1) == 0x000078, "Member 'BP_Character_C_UserConstructionScript::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UserConstructionScript, CallFunc_Array_Add_ReturnValue) == 0x00007C, "Member 'BP_Character_C_UserConstructionScript::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UserConstructionScript, CallFunc_K2_GetComponentsByClass_ReturnValue_1) == 0x000080, "Member 'BP_Character_C_UserConstructionScript::CallFunc_K2_GetComponentsByClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UserConstructionScript, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000090, "Member 'BP_Character_C_UserConstructionScript::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UserConstructionScript, CallFunc_Array_Get_Item_2) == 0x0000A8, "Member 'BP_Character_C_UserConstructionScript::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UserConstructionScript, CallFunc_GetMaterials_ReturnValue_1) == 0x0000B0, "Member 'BP_Character_C_UserConstructionScript::CallFunc_GetMaterials_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UserConstructionScript, CallFunc_Array_Length_ReturnValue_2) == 0x0000C0, "Member 'BP_Character_C_UserConstructionScript::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UserConstructionScript, CallFunc_Array_Get_Item_3) == 0x0000C8, "Member 'BP_Character_C_UserConstructionScript::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UserConstructionScript, CallFunc_Less_IntInt_ReturnValue_2) == 0x0000D0, "Member 'BP_Character_C_UserConstructionScript::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UserConstructionScript, CallFunc_CreateDynamicMaterialInstance_ReturnValue_1) == 0x0000D8, "Member 'BP_Character_C_UserConstructionScript::CallFunc_CreateDynamicMaterialInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UserConstructionScript, CallFunc_Array_Add_ReturnValue_1) == 0x0000E0, "Member 'BP_Character_C_UserConstructionScript::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UserConstructionScript, CallFunc_Array_Length_ReturnValue_3) == 0x0000E4, "Member 'BP_Character_C_UserConstructionScript::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Character_C_UserConstructionScript, CallFunc_Less_IntInt_ReturnValue_3) == 0x0000E8, "Member 'BP_Character_C_UserConstructionScript::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");

// Function BP_Character.BP_Character_C.VerifyChainTendue
// 0x0060 (0x0060 - 0x0000)
struct BP_Character_C_VerifyChainTendue final
{
public:
	TArray<class AActor*>                         Array;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	double                                        Tension;                                           // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3318[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3319[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_ChainPhysics_C>   K2Node_DynamicCast_AsBPI_Chain_Physics;            // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_331A[0x6];                                     // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetTension_Float;                         // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Character_C_VerifyChainTendue) == 0x000008, "Wrong alignment on BP_Character_C_VerifyChainTendue");
static_assert(sizeof(BP_Character_C_VerifyChainTendue) == 0x000060, "Wrong size on BP_Character_C_VerifyChainTendue");
static_assert(offsetof(BP_Character_C_VerifyChainTendue, Array) == 0x000000, "Member 'BP_Character_C_VerifyChainTendue::Array' has a wrong offset!");
static_assert(offsetof(BP_Character_C_VerifyChainTendue, Tension) == 0x000010, "Member 'BP_Character_C_VerifyChainTendue::Tension' has a wrong offset!");
static_assert(offsetof(BP_Character_C_VerifyChainTendue, ReturnValue) == 0x000018, "Member 'BP_Character_C_VerifyChainTendue::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_VerifyChainTendue, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'BP_Character_C_VerifyChainTendue::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_VerifyChainTendue, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_Character_C_VerifyChainTendue::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_VerifyChainTendue, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'BP_Character_C_VerifyChainTendue::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_VerifyChainTendue, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'BP_Character_C_VerifyChainTendue::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_VerifyChainTendue, Temp_int_Array_Index_Variable) == 0x00002C, "Member 'BP_Character_C_VerifyChainTendue::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Character_C_VerifyChainTendue, CallFunc_Array_Get_Item) == 0x000030, "Member 'BP_Character_C_VerifyChainTendue::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Character_C_VerifyChainTendue, K2Node_DynamicCast_AsBPI_Chain_Physics) == 0x000038, "Member 'BP_Character_C_VerifyChainTendue::K2Node_DynamicCast_AsBPI_Chain_Physics' has a wrong offset!");
static_assert(offsetof(BP_Character_C_VerifyChainTendue, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'BP_Character_C_VerifyChainTendue::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Character_C_VerifyChainTendue, CallFunc_IsValid_ReturnValue) == 0x000049, "Member 'BP_Character_C_VerifyChainTendue::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Character_C_VerifyChainTendue, CallFunc_GetTension_Float) == 0x000050, "Member 'BP_Character_C_VerifyChainTendue::CallFunc_GetTension_Float' has a wrong offset!");
static_assert(offsetof(BP_Character_C_VerifyChainTendue, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000058, "Member 'BP_Character_C_VerifyChainTendue::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");

}


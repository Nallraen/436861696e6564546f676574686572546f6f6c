#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GS_Game

#include "Basic.hpp"

#include "S_TchatElement_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "S_PhysxChainLocation_structs.hpp"
#include "E_ChoosenChar_structs.hpp"
#include "S_SteamIDAndSkin_structs.hpp"
#include "E_Gamemodes_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GS_Game.GS_Game_C
// 0x0150 (0x0440 - 0x02F0)
class AGS_Game_C final : public AGameStateBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class APawn*>                          Characters;                                        // 0x0300(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<struct FS_TchatElement>                Tchat;                                             // 0x0310(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Timer;                                             // 0x0320(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GameBegun;                                         // 0x0324(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33E6[0x3];                                     // 0x0325(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SpawnedCharacterIndex;                             // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EveryoneFall;                                      // 0x032C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33E7[0x3];                                     // 0x032D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_PhysxChainLocation>          ChainLocations;                                    // 0x0330(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<class AActor*>                         LobbyChars;                                        // 0x0340(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         PreviousPlayerNum;                                 // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CharactersAreAttached;                             // 0x0354(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33E8[0x3];                                     // 0x0355(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayersNumerAtEnd;                                 // 0x0358(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33E9[0x4];                                     // 0x035C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_RescuePoint_C*>              PassedRescuePoints;                                // 0x0360(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         PlayerStartPosition;                               // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33EA[0x4];                                     // 0x0374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APlayerController*>              PlayerControllers;                                 // 0x0378(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<E_ChoosenChar>                         LocalMpChosenChars;                                // 0x0388(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class ABP_RescuePoint_C*                      Rescue_Point;                                      // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          CountSpawnedCharacter;                             // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33EB[0x7];                                     // 0x03A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         HellHorizonActors;                                 // 0x03A8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class AActor*>                         CityHorizonActors;                                 // 0x03B8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class AActor*>                         HeavenHorizonActors;                               // 0x03C8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          First_Player_on_Keyboard;                          // 0x03D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHasPassedEndCinematic;                            // 0x03D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LavaMode;                                          // 0x03DA(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          LavaDead;                                          // 0x03DB(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33EC[0x4];                                     // 0x03DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APawn*>                          PawnsArray;                                        // 0x03E0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FMargin                                Padding;                                           // 0x03F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          EndCinematicAlreadyLaunched;                       // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Gamemodes                                   Selected_Game_Mode;                                // 0x0401(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33ED[0x6];                                     // 0x0402(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPrimitiveComponent*>            AllDepenatredComps;                                // 0x0408(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<struct FS_SteamIDAndSkin>              IdAndSkins;                                        // 0x0418(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	bool                                          FlyModeActivated;                                  // 0x0428(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33EE[0x7];                                     // 0x0429(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAntiSaveBox_C*                         AntiSaveBox;                                       // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          SaveHasBeenUsed;                                   // 0x0438(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanSaveBiome;                                      // 0x0439(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanCheckLavaDeath;                                 // 0x043A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ActorToHideInLobby(bool bNewHidden);
	void AddChatElemAll(const struct FS_TchatElement& NewElem);
	void AddFirstSafeLocation();
	void AddLocalMP_Players();
	void AddRescuePoint(class ABP_RescuePoint_C* RescuePoint);
	void AssignGamepad(int32 PlayerIndex, const int32 GamepadIndex);
	void AttachPlayersAfterRescue();
	void AttachPlayersAndBeginGame();
	void AttachToFirstCharacter(class APawn* Character);
	void AttachToLastCharacter(class APawn* Character);
	void AttachToNextCharacter(class APawn* Character, int32 Param_Index);
	void AttachToPreviousCharacter(class APawn* Character, int32 Param_Index);
	void AutoAttachment();
	void BackupProgress();
	bool CheckIfEveryoneHasLoadedLevels();
	void CheckSpawnPlayersAfterLoading();
	void CountCustomPS(int32* Count);
	int32 CountSpawnedCharacters();
	void CustomEvent_0();
	bool EndCinematicPassed();
	void EveryoneFall_(bool* Fall);
	void EveryoneIsFalling(bool* Falling);
	void ExecuteUbergraph_GS_Game(int32 EntryPoint);
	bool FindPlayerStart(struct FTransform* Transform);
	void FlushCheckLavaDeath();
	void FlushSaveBiome();
	bool Get_Nearest_Rescue_Point_Server_(bool Lava, class ABP_RescuePoint_C** Out);
	void GetBiomeByName(const class FString& InString, bool* Found, class ABiomeText_BP_C** Biome);
	void GetChainMiddleLocation(const class FString& Attached01, const class FString& Attached02, struct FVector* RepLocation);
	void GetGameBegun(bool* HasBegun);
	void GetHighestRescuePoint(class ABP_RescuePoint_C** Return, bool* Found);
	void GetLavaDead(bool* Dead);
	void GetLaveMode(bool* Lava);
	void GetNearestRescueByLocation(const struct FVector& Location, class ABP_RescuePoint_C** Rescue, bool* Found);
	void GetPawnArray(TArray<class APawn*>* Array);
	void GetPlayersMiddle(struct FVector* Location);
	void GetSkinByID(const struct FSteamID& SteamID, bool* Return, E_ChoosenChar* Character);
	void GetTchat(TArray<struct FS_TchatElement>* Param_Tchat);
	void GetTimer(int32* Param_Timer);
	void HandleGamepad();
	bool HasEveryPC_AValidPawn();
	void IncrementSpawnedCharacter(int32* Result);
	void LaunchTimerServer();
	void LavaDeath_SRV_();
	void LavaDeathAll();
	void Login_Message_All();
	void LogoutAll();
	void MakeLobbyCharsVariable();
	void MakePawnArray(TArray<class AActor*>& Actors, TArray<class APawn*>* PawnsOut);
	void MakePawnsArray(TArray<class APawn*>* Array);
	void MakeSessionJoinable(const class FString& Value);
	void NearestRescuePoint(bool Lava, bool* Found, class ABP_RescuePoint_C** RescuePoint);
	void On_Chat_Message_Received();
	void OnCallback_9746CD0941D7A9D80F1D45B1A1F79FA4();
	void OnRep_CharactersAreAttached();
	void OnRep_GameBegun();
	void OnRep_LavaMode();
	void OnRep_Selected_Game_Mode();
	void PlayRescueEffect();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void RefreshLobbyChars();
	void Rescue(class ABP_RescuePoint_C* RescueActor, bool ExitingCar);
	void RescueEvent(class ABP_RescuePoint_C* RescuePoint, bool ExitingCar);
	void ResetChainFixAll();
	void ResetLavaDeath();
	void SaveLocation();
	void SendToChatSRV(const class FString& Param_Name, const class FString& Message, const struct FLinearColor& Color);
	void ServerTravel(const class FString& Command);
	void ServerTravelAll(const class FString& Command);
	void SetTimer(int32 Param_Timer);
	void Show_Instructions();
	void SpawnPlayersAfterLoading();
	void SpawnWithoutLobby_Srv_();
	void StartSavePlayerLocation();
	void SwitchToGameAll();
	void SwitchToLobby();
	void Update_Game_Mode();
	void UpdateAntisaveBox();
	void UpdateChainLocations();
	void UpdateSelectedSkins();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GS_Game_C">();
	}
	static class AGS_Game_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGS_Game_C>();
	}
};
static_assert(alignof(AGS_Game_C) == 0x000008, "Wrong alignment on AGS_Game_C");
static_assert(sizeof(AGS_Game_C) == 0x000440, "Wrong size on AGS_Game_C");
static_assert(offsetof(AGS_Game_C, UberGraphFrame) == 0x0002F0, "Member 'AGS_Game_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AGS_Game_C, DefaultSceneRoot) == 0x0002F8, "Member 'AGS_Game_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AGS_Game_C, Characters) == 0x000300, "Member 'AGS_Game_C::Characters' has a wrong offset!");
static_assert(offsetof(AGS_Game_C, Tchat) == 0x000310, "Member 'AGS_Game_C::Tchat' has a wrong offset!");
static_assert(offsetof(AGS_Game_C, Timer) == 0x000320, "Member 'AGS_Game_C::Timer' has a wrong offset!");
static_assert(offsetof(AGS_Game_C, GameBegun) == 0x000324, "Member 'AGS_Game_C::GameBegun' has a wrong offset!");
static_assert(offsetof(AGS_Game_C, SpawnedCharacterIndex) == 0x000328, "Member 'AGS_Game_C::SpawnedCharacterIndex' has a wrong offset!");
static_assert(offsetof(AGS_Game_C, EveryoneFall) == 0x00032C, "Member 'AGS_Game_C::EveryoneFall' has a wrong offset!");
static_assert(offsetof(AGS_Game_C, ChainLocations) == 0x000330, "Member 'AGS_Game_C::ChainLocations' has a wrong offset!");
static_assert(offsetof(AGS_Game_C, LobbyChars) == 0x000340, "Member 'AGS_Game_C::LobbyChars' has a wrong offset!");
static_assert(offsetof(AGS_Game_C, PreviousPlayerNum) == 0x000350, "Member 'AGS_Game_C::PreviousPlayerNum' has a wrong offset!");
static_assert(offsetof(AGS_Game_C, CharactersAreAttached) == 0x000354, "Member 'AGS_Game_C::CharactersAreAttached' has a wrong offset!");
static_assert(offsetof(AGS_Game_C, PlayersNumerAtEnd) == 0x000358, "Member 'AGS_Game_C::PlayersNumerAtEnd' has a wrong offset!");
static_assert(offsetof(AGS_Game_C, PassedRescuePoints) == 0x000360, "Member 'AGS_Game_C::PassedRescuePoints' has a wrong offset!");
static_assert(offsetof(AGS_Game_C, PlayerStartPosition) == 0x000370, "Member 'AGS_Game_C::PlayerStartPosition' has a wrong offset!");
static_assert(offsetof(AGS_Game_C, PlayerControllers) == 0x000378, "Member 'AGS_Game_C::PlayerControllers' has a wrong offset!");
static_assert(offsetof(AGS_Game_C, LocalMpChosenChars) == 0x000388, "Member 'AGS_Game_C::LocalMpChosenChars' has a wrong offset!");
static_assert(offsetof(AGS_Game_C, Rescue_Point) == 0x000398, "Member 'AGS_Game_C::Rescue_Point' has a wrong offset!");
static_assert(offsetof(AGS_Game_C, CountSpawnedCharacter) == 0x0003A0, "Member 'AGS_Game_C::CountSpawnedCharacter' has a wrong offset!");
static_assert(offsetof(AGS_Game_C, HellHorizonActors) == 0x0003A8, "Member 'AGS_Game_C::HellHorizonActors' has a wrong offset!");
static_assert(offsetof(AGS_Game_C, CityHorizonActors) == 0x0003B8, "Member 'AGS_Game_C::CityHorizonActors' has a wrong offset!");
static_assert(offsetof(AGS_Game_C, HeavenHorizonActors) == 0x0003C8, "Member 'AGS_Game_C::HeavenHorizonActors' has a wrong offset!");
static_assert(offsetof(AGS_Game_C, First_Player_on_Keyboard) == 0x0003D8, "Member 'AGS_Game_C::First_Player_on_Keyboard' has a wrong offset!");
static_assert(offsetof(AGS_Game_C, bHasPassedEndCinematic) == 0x0003D9, "Member 'AGS_Game_C::bHasPassedEndCinematic' has a wrong offset!");
static_assert(offsetof(AGS_Game_C, LavaMode) == 0x0003DA, "Member 'AGS_Game_C::LavaMode' has a wrong offset!");
static_assert(offsetof(AGS_Game_C, LavaDead) == 0x0003DB, "Member 'AGS_Game_C::LavaDead' has a wrong offset!");
static_assert(offsetof(AGS_Game_C, PawnsArray) == 0x0003E0, "Member 'AGS_Game_C::PawnsArray' has a wrong offset!");
static_assert(offsetof(AGS_Game_C, Padding) == 0x0003F0, "Member 'AGS_Game_C::Padding' has a wrong offset!");
static_assert(offsetof(AGS_Game_C, EndCinematicAlreadyLaunched) == 0x000400, "Member 'AGS_Game_C::EndCinematicAlreadyLaunched' has a wrong offset!");
static_assert(offsetof(AGS_Game_C, Selected_Game_Mode) == 0x000401, "Member 'AGS_Game_C::Selected_Game_Mode' has a wrong offset!");
static_assert(offsetof(AGS_Game_C, AllDepenatredComps) == 0x000408, "Member 'AGS_Game_C::AllDepenatredComps' has a wrong offset!");
static_assert(offsetof(AGS_Game_C, IdAndSkins) == 0x000418, "Member 'AGS_Game_C::IdAndSkins' has a wrong offset!");
static_assert(offsetof(AGS_Game_C, FlyModeActivated) == 0x000428, "Member 'AGS_Game_C::FlyModeActivated' has a wrong offset!");
static_assert(offsetof(AGS_Game_C, AntiSaveBox) == 0x000430, "Member 'AGS_Game_C::AntiSaveBox' has a wrong offset!");
static_assert(offsetof(AGS_Game_C, SaveHasBeenUsed) == 0x000438, "Member 'AGS_Game_C::SaveHasBeenUsed' has a wrong offset!");
static_assert(offsetof(AGS_Game_C, CanSaveBiome) == 0x000439, "Member 'AGS_Game_C::CanSaveBiome' has a wrong offset!");
static_assert(offsetof(AGS_Game_C, CanCheckLavaDeath) == 0x00043A, "Member 'AGS_Game_C::CanCheckLavaDeath' has a wrong offset!");

}


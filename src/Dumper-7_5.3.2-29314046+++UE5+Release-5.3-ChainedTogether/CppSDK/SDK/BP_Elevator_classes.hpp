#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Elevator

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Elevator.BP_Elevator_C
// 0x00B8 (0x0350 - 0x0298)
class ABP_Elevator_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          Box;                                               // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UC_VinceSync_C*                         C_VinceSyncPivot;                                  // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UC_VinceSync_C*                         C_VinceSyncBase;                                   // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxRight3;                                         // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxRight2;                                         // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxRight1;                                         // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxRight;                                          // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxLeft3;                                          // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxLeft2;                                          // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxLeft1;                                          // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxLeft;                                           // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        WoodSound;                                         // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UC_TickOptimizer_C*                     C_TickOptimizer;                                   // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BaseMaxHeight;                                     // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Pivot;                                             // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   base;                                              // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        MaxHeight;                                         // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UAudioComponent*                        Sound;                                             // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        Turn_Rate_Target;                                  // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TurnRate;                                          // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RollBackSpeed;                                     // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Elevator(int32 EntryPoint);
	bool IsSomeoneInside(TArray<class UBoxComponent*>& Boxes);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void UpdateTurn(double* Param_TurnRate);
	void UpdateVolume();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Elevator_C">();
	}
	static class ABP_Elevator_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Elevator_C>();
	}
};
static_assert(alignof(ABP_Elevator_C) == 0x000008, "Wrong alignment on ABP_Elevator_C");
static_assert(sizeof(ABP_Elevator_C) == 0x000350, "Wrong size on ABP_Elevator_C");
static_assert(offsetof(ABP_Elevator_C, UberGraphFrame) == 0x000298, "Member 'ABP_Elevator_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Elevator_C, Box) == 0x0002A0, "Member 'ABP_Elevator_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_Elevator_C, C_VinceSyncPivot) == 0x0002A8, "Member 'ABP_Elevator_C::C_VinceSyncPivot' has a wrong offset!");
static_assert(offsetof(ABP_Elevator_C, C_VinceSyncBase) == 0x0002B0, "Member 'ABP_Elevator_C::C_VinceSyncBase' has a wrong offset!");
static_assert(offsetof(ABP_Elevator_C, BoxRight3) == 0x0002B8, "Member 'ABP_Elevator_C::BoxRight3' has a wrong offset!");
static_assert(offsetof(ABP_Elevator_C, BoxRight2) == 0x0002C0, "Member 'ABP_Elevator_C::BoxRight2' has a wrong offset!");
static_assert(offsetof(ABP_Elevator_C, BoxRight1) == 0x0002C8, "Member 'ABP_Elevator_C::BoxRight1' has a wrong offset!");
static_assert(offsetof(ABP_Elevator_C, BoxRight) == 0x0002D0, "Member 'ABP_Elevator_C::BoxRight' has a wrong offset!");
static_assert(offsetof(ABP_Elevator_C, BoxLeft3) == 0x0002D8, "Member 'ABP_Elevator_C::BoxLeft3' has a wrong offset!");
static_assert(offsetof(ABP_Elevator_C, BoxLeft2) == 0x0002E0, "Member 'ABP_Elevator_C::BoxLeft2' has a wrong offset!");
static_assert(offsetof(ABP_Elevator_C, BoxLeft1) == 0x0002E8, "Member 'ABP_Elevator_C::BoxLeft1' has a wrong offset!");
static_assert(offsetof(ABP_Elevator_C, BoxLeft) == 0x0002F0, "Member 'ABP_Elevator_C::BoxLeft' has a wrong offset!");
static_assert(offsetof(ABP_Elevator_C, WoodSound) == 0x0002F8, "Member 'ABP_Elevator_C::WoodSound' has a wrong offset!");
static_assert(offsetof(ABP_Elevator_C, C_TickOptimizer) == 0x000300, "Member 'ABP_Elevator_C::C_TickOptimizer' has a wrong offset!");
static_assert(offsetof(ABP_Elevator_C, BaseMaxHeight) == 0x000308, "Member 'ABP_Elevator_C::BaseMaxHeight' has a wrong offset!");
static_assert(offsetof(ABP_Elevator_C, Pivot) == 0x000310, "Member 'ABP_Elevator_C::Pivot' has a wrong offset!");
static_assert(offsetof(ABP_Elevator_C, base) == 0x000318, "Member 'ABP_Elevator_C::base' has a wrong offset!");
static_assert(offsetof(ABP_Elevator_C, DefaultSceneRoot) == 0x000320, "Member 'ABP_Elevator_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Elevator_C, MaxHeight) == 0x000328, "Member 'ABP_Elevator_C::MaxHeight' has a wrong offset!");
static_assert(offsetof(ABP_Elevator_C, Sound) == 0x000330, "Member 'ABP_Elevator_C::Sound' has a wrong offset!");
static_assert(offsetof(ABP_Elevator_C, Turn_Rate_Target) == 0x000338, "Member 'ABP_Elevator_C::Turn_Rate_Target' has a wrong offset!");
static_assert(offsetof(ABP_Elevator_C, TurnRate) == 0x000340, "Member 'ABP_Elevator_C::TurnRate' has a wrong offset!");
static_assert(offsetof(ABP_Elevator_C, RollBackSpeed) == 0x000348, "Member 'ABP_Elevator_C::RollBackSpeed' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Bridge_Spline_BP

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Bridge_Spline_BP.Bridge_Spline_BP_C
// 0x0098 (0x0330 - 0x0298)
class ABridge_Spline_BP_C final : public AActor
{
public:
	class USplineComponent*                       Spline;                                            // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         Number;                                            // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_37CD[0x4];                                     // 0x02AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            New_Mesh;                                          // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	ESplineMeshAxis                               ForwardAxis;                                       // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_37CE[0x7];                                     // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SectionLength;                                     // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FRotator                               Delta_Rotation;                                    // 0x02C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          Climbable;                                         // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          BlockVisibility;                                   // 0x02E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          VariableMeshes;                                    // 0x02E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_37CF[0x5];                                     // 0x02E3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMesh*>                    Meshes;                                            // 0x02E8(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn)
	bool                                          BlockCamera;                                       // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_37D0[0x7];                                     // 0x02F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TangentSize;                                       // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          SpawnCarSupports;                                  // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_37D1[0x3];                                     // 0x0309(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRandomStream                          Stream;                                            // 0x030C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn)
	ECollisionResponse                            ChainCollision;                                    // 0x0314(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_37D2[0x3];                                     // 0x0315(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BaseMeshWeight;                                    // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          UseFlipFlop;                                       // 0x031C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Generate_Overlap_Events;                           // 0x031D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          BreakableGlass;                                    // 0x031E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_37D3[0x1];                                     // 0x031F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExtremityLength;                                   // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          UseCustomMat;                                      // 0x0324(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_37D4[0x3];                                     // 0x0325(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     CustomMaterial;                                    // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void AdaptSplineMesh(class USplineMeshComponent* SplineMeshComponent, int32 Param_Index);
	class UStaticMesh* RandomMesh();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Bridge_Spline_BP_C">();
	}
	static class ABridge_Spline_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABridge_Spline_BP_C>();
	}
};
static_assert(alignof(ABridge_Spline_BP_C) == 0x000008, "Wrong alignment on ABridge_Spline_BP_C");
static_assert(sizeof(ABridge_Spline_BP_C) == 0x000330, "Wrong size on ABridge_Spline_BP_C");
static_assert(offsetof(ABridge_Spline_BP_C, Spline) == 0x000298, "Member 'ABridge_Spline_BP_C::Spline' has a wrong offset!");
static_assert(offsetof(ABridge_Spline_BP_C, DefaultSceneRoot) == 0x0002A0, "Member 'ABridge_Spline_BP_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABridge_Spline_BP_C, Number) == 0x0002A8, "Member 'ABridge_Spline_BP_C::Number' has a wrong offset!");
static_assert(offsetof(ABridge_Spline_BP_C, New_Mesh) == 0x0002B0, "Member 'ABridge_Spline_BP_C::New_Mesh' has a wrong offset!");
static_assert(offsetof(ABridge_Spline_BP_C, ForwardAxis) == 0x0002B8, "Member 'ABridge_Spline_BP_C::ForwardAxis' has a wrong offset!");
static_assert(offsetof(ABridge_Spline_BP_C, SectionLength) == 0x0002C0, "Member 'ABridge_Spline_BP_C::SectionLength' has a wrong offset!");
static_assert(offsetof(ABridge_Spline_BP_C, Delta_Rotation) == 0x0002C8, "Member 'ABridge_Spline_BP_C::Delta_Rotation' has a wrong offset!");
static_assert(offsetof(ABridge_Spline_BP_C, Climbable) == 0x0002E0, "Member 'ABridge_Spline_BP_C::Climbable' has a wrong offset!");
static_assert(offsetof(ABridge_Spline_BP_C, BlockVisibility) == 0x0002E1, "Member 'ABridge_Spline_BP_C::BlockVisibility' has a wrong offset!");
static_assert(offsetof(ABridge_Spline_BP_C, VariableMeshes) == 0x0002E2, "Member 'ABridge_Spline_BP_C::VariableMeshes' has a wrong offset!");
static_assert(offsetof(ABridge_Spline_BP_C, Meshes) == 0x0002E8, "Member 'ABridge_Spline_BP_C::Meshes' has a wrong offset!");
static_assert(offsetof(ABridge_Spline_BP_C, BlockCamera) == 0x0002F8, "Member 'ABridge_Spline_BP_C::BlockCamera' has a wrong offset!");
static_assert(offsetof(ABridge_Spline_BP_C, TangentSize) == 0x000300, "Member 'ABridge_Spline_BP_C::TangentSize' has a wrong offset!");
static_assert(offsetof(ABridge_Spline_BP_C, SpawnCarSupports) == 0x000308, "Member 'ABridge_Spline_BP_C::SpawnCarSupports' has a wrong offset!");
static_assert(offsetof(ABridge_Spline_BP_C, Stream) == 0x00030C, "Member 'ABridge_Spline_BP_C::Stream' has a wrong offset!");
static_assert(offsetof(ABridge_Spline_BP_C, ChainCollision) == 0x000314, "Member 'ABridge_Spline_BP_C::ChainCollision' has a wrong offset!");
static_assert(offsetof(ABridge_Spline_BP_C, BaseMeshWeight) == 0x000318, "Member 'ABridge_Spline_BP_C::BaseMeshWeight' has a wrong offset!");
static_assert(offsetof(ABridge_Spline_BP_C, UseFlipFlop) == 0x00031C, "Member 'ABridge_Spline_BP_C::UseFlipFlop' has a wrong offset!");
static_assert(offsetof(ABridge_Spline_BP_C, Generate_Overlap_Events) == 0x00031D, "Member 'ABridge_Spline_BP_C::Generate_Overlap_Events' has a wrong offset!");
static_assert(offsetof(ABridge_Spline_BP_C, BreakableGlass) == 0x00031E, "Member 'ABridge_Spline_BP_C::BreakableGlass' has a wrong offset!");
static_assert(offsetof(ABridge_Spline_BP_C, ExtremityLength) == 0x000320, "Member 'ABridge_Spline_BP_C::ExtremityLength' has a wrong offset!");
static_assert(offsetof(ABridge_Spline_BP_C, UseCustomMat) == 0x000324, "Member 'ABridge_Spline_BP_C::UseCustomMat' has a wrong offset!");
static_assert(offsetof(ABridge_Spline_BP_C, CustomMaterial) == 0x000328, "Member 'ABridge_Spline_BP_C::CustomMaterial' has a wrong offset!");

}


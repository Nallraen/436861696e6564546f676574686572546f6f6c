#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Spire_BP

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Spire_BP.Spire_BP_C
// 0x0078 (0x0310 - 0x0298)
class ASpire_BP_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UDecalComponent*                        Decal1;                                            // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        Decal3;                                            // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        Decal2;                                            // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   S_Spire_Placer;                                    // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   S_Spire_03;                                        // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_NewTrack_0_9922CC714F8423901BCD4BBEE5D611E9; // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline__Direction_9922CC714F8423901BCD4BBEE5D611E9; // 0x02D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3CB2[0x3];                                     // 0x02D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline;                                          // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Target;                                            // 0x02E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Init;                                              // 0x02F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Spire_BP(int32 EntryPoint);
	void GoUp();
	void ReceiveBeginPlay();
	void Timeline__FinishedFunc();
	void Timeline__UpdateFunc();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Spire_BP_C">();
	}
	static class ASpire_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASpire_BP_C>();
	}
};
static_assert(alignof(ASpire_BP_C) == 0x000008, "Wrong alignment on ASpire_BP_C");
static_assert(sizeof(ASpire_BP_C) == 0x000310, "Wrong size on ASpire_BP_C");
static_assert(offsetof(ASpire_BP_C, UberGraphFrame) == 0x000298, "Member 'ASpire_BP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ASpire_BP_C, Decal1) == 0x0002A0, "Member 'ASpire_BP_C::Decal1' has a wrong offset!");
static_assert(offsetof(ASpire_BP_C, Decal3) == 0x0002A8, "Member 'ASpire_BP_C::Decal3' has a wrong offset!");
static_assert(offsetof(ASpire_BP_C, Decal2) == 0x0002B0, "Member 'ASpire_BP_C::Decal2' has a wrong offset!");
static_assert(offsetof(ASpire_BP_C, S_Spire_Placer) == 0x0002B8, "Member 'ASpire_BP_C::S_Spire_Placer' has a wrong offset!");
static_assert(offsetof(ASpire_BP_C, S_Spire_03) == 0x0002C0, "Member 'ASpire_BP_C::S_Spire_03' has a wrong offset!");
static_assert(offsetof(ASpire_BP_C, DefaultSceneRoot) == 0x0002C8, "Member 'ASpire_BP_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ASpire_BP_C, Timeline_NewTrack_0_9922CC714F8423901BCD4BBEE5D611E9) == 0x0002D0, "Member 'ASpire_BP_C::Timeline_NewTrack_0_9922CC714F8423901BCD4BBEE5D611E9' has a wrong offset!");
static_assert(offsetof(ASpire_BP_C, Timeline__Direction_9922CC714F8423901BCD4BBEE5D611E9) == 0x0002D4, "Member 'ASpire_BP_C::Timeline__Direction_9922CC714F8423901BCD4BBEE5D611E9' has a wrong offset!");
static_assert(offsetof(ASpire_BP_C, Timeline) == 0x0002D8, "Member 'ASpire_BP_C::Timeline' has a wrong offset!");
static_assert(offsetof(ASpire_BP_C, Target) == 0x0002E0, "Member 'ASpire_BP_C::Target' has a wrong offset!");
static_assert(offsetof(ASpire_BP_C, Init) == 0x0002F8, "Member 'ASpire_BP_C::Init' has a wrong offset!");

}


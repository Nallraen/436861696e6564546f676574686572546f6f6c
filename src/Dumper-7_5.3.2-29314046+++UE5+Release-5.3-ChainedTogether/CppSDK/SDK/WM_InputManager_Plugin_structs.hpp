#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WM_InputManager_Plugin

#include "Basic.hpp"

#include "InputCore_structs.hpp"


namespace SDK
{

// Enum WM_InputManager_Plugin.EWM_InputManagerMode
// NumValues: 0x0004
enum class EWM_InputManagerMode : uint8
{
	Off                                      = 0,
	Config                                   = 1,
	Assign                                   = 2,
	EWM_InputManagerMode_MAX                 = 3,
};

// Enum WM_InputManager_Plugin.EWM_GamepadKeyType
// NumValues: 0x0005
enum class EWM_GamepadKeyType : uint8
{
	NoGamepadKey                             = 0,
	Axis                                     = 1,
	Button                                   = 2,
	DPAD                                     = 3,
	EWM_GamepadKeyType_MAX                   = 4,
};

// Enum WM_InputManager_Plugin.EWM_KeyTriggerState
// NumValues: 0x0004
enum class EWM_KeyTriggerState : uint8
{
	NoTrigger                                = 0,
	WasJustPressed                           = 1,
	WasJustReleased                          = 2,
	EWM_KeyTriggerState_MAX                  = 3,
};

// Enum WM_InputManager_Plugin.EWM_DeviceType
// NumValues: 0x0005
enum class EWM_DeviceType : uint8
{
	No_Device                                = 0,
	JoystickOrGamepad                        = 1,
	Keyboard                                 = 2,
	Mouse                                    = 3,
	EWM_DeviceType_MAX                       = 4,
};

// Enum WM_InputManager_Plugin.EWM_InputManagerStatus
// NumValues: 0x0004
enum class EWM_InputManagerStatus : uint8
{
	WM_NoStatus                              = 0,
	WaitingForButtonPress                    = 1,
	WaitingForAxisResponse                   = 2,
	EWM_MAX                                  = 3,
};

// Enum WM_InputManager_Plugin.EWM_AxisCodeTable
// NumValues: 0x0014
enum class EWM_AxisCodeTable : uint8
{
	NoFlags                                  = 0,
	X_Axis                                   = 48,
	Y_Axis                                   = 49,
	Z_Axis                                   = 50,
	X_Rot                                    = 51,
	Y_Rot                                    = 52,
	Z_Rot                                    = 53,
	Slider                                   = 54,
	Dial                                     = 55,
	Wheel                                    = 56,
	Hat                                      = 57,
	Vx                                       = 64,
	Vy                                       = 65,
	Vz                                       = 66,
	Vrx                                      = 68,
	Vry                                      = 69,
	Vrz                                      = 70,
	Rudder                                   = 186,
	Throttle                                 = 187,
	EWM_MAX                                  = 188,
};

// Enum WM_InputManager_Plugin.ERawControllerType
// NumValues: 0x0005
enum class ERawControllerType : uint8
{
	JoystickORGamepad                        = 0,
	Keyboard                                 = 1,
	Mouse                                    = 2,
	Other                                    = 3,
	ERawControllerType_MAX                   = 4,
};

// ScriptStruct WM_InputManager_Plugin.WM_HID_DeviceInfo
// 0x00A0 (0x00A0 - 0x0000)
struct FWM_HID_DeviceInfo final
{
public:
	class FString                                 ProductString;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ManufacturerString;                                // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SerialNumberString;                                // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VID;                                               // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PID;                                               // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Version;                                           // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C63[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 VID_HEX;                                           // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PID_HEX;                                           // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Version_HEX;                                       // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VPID_HEX;                                          // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VID_PID_;                                          // 0x0080(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParserVersion;                                     // 0x0090(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C64[0xC];                                     // 0x0094(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWM_HID_DeviceInfo) == 0x000008, "Wrong alignment on FWM_HID_DeviceInfo");
static_assert(sizeof(FWM_HID_DeviceInfo) == 0x0000A0, "Wrong size on FWM_HID_DeviceInfo");
static_assert(offsetof(FWM_HID_DeviceInfo, ProductString) == 0x000000, "Member 'FWM_HID_DeviceInfo::ProductString' has a wrong offset!");
static_assert(offsetof(FWM_HID_DeviceInfo, ManufacturerString) == 0x000010, "Member 'FWM_HID_DeviceInfo::ManufacturerString' has a wrong offset!");
static_assert(offsetof(FWM_HID_DeviceInfo, SerialNumberString) == 0x000020, "Member 'FWM_HID_DeviceInfo::SerialNumberString' has a wrong offset!");
static_assert(offsetof(FWM_HID_DeviceInfo, VID) == 0x000030, "Member 'FWM_HID_DeviceInfo::VID' has a wrong offset!");
static_assert(offsetof(FWM_HID_DeviceInfo, PID) == 0x000034, "Member 'FWM_HID_DeviceInfo::PID' has a wrong offset!");
static_assert(offsetof(FWM_HID_DeviceInfo, Version) == 0x000038, "Member 'FWM_HID_DeviceInfo::Version' has a wrong offset!");
static_assert(offsetof(FWM_HID_DeviceInfo, VID_HEX) == 0x000040, "Member 'FWM_HID_DeviceInfo::VID_HEX' has a wrong offset!");
static_assert(offsetof(FWM_HID_DeviceInfo, PID_HEX) == 0x000050, "Member 'FWM_HID_DeviceInfo::PID_HEX' has a wrong offset!");
static_assert(offsetof(FWM_HID_DeviceInfo, Version_HEX) == 0x000060, "Member 'FWM_HID_DeviceInfo::Version_HEX' has a wrong offset!");
static_assert(offsetof(FWM_HID_DeviceInfo, VPID_HEX) == 0x000070, "Member 'FWM_HID_DeviceInfo::VPID_HEX' has a wrong offset!");
static_assert(offsetof(FWM_HID_DeviceInfo, VID_PID_) == 0x000080, "Member 'FWM_HID_DeviceInfo::VID_PID_' has a wrong offset!");
static_assert(offsetof(FWM_HID_DeviceInfo, ParserVersion) == 0x000090, "Member 'FWM_HID_DeviceInfo::ParserVersion' has a wrong offset!");

// ScriptStruct WM_InputManager_Plugin.DPADCollection
// 0x0070 (0x0070 - 0x0000)
struct FDPADCollection final
{
public:
	struct FKey                                   Up;                                                // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Down;                                              // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Left;                                              // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Right;                                             // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Binding;                                           // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDPADCollection) == 0x000008, "Wrong alignment on FDPADCollection");
static_assert(sizeof(FDPADCollection) == 0x000070, "Wrong size on FDPADCollection");
static_assert(offsetof(FDPADCollection, Up) == 0x000000, "Member 'FDPADCollection::Up' has a wrong offset!");
static_assert(offsetof(FDPADCollection, Down) == 0x000018, "Member 'FDPADCollection::Down' has a wrong offset!");
static_assert(offsetof(FDPADCollection, Left) == 0x000030, "Member 'FDPADCollection::Left' has a wrong offset!");
static_assert(offsetof(FDPADCollection, Right) == 0x000048, "Member 'FDPADCollection::Right' has a wrong offset!");
static_assert(offsetof(FDPADCollection, Binding) == 0x000060, "Member 'FDPADCollection::Binding' has a wrong offset!");

// ScriptStruct WM_InputManager_Plugin.WM_BasicDeviceInfo
// 0x0068 (0x0068 - 0x0000)
struct FWM_BasicDeviceInfo final
{
public:
	class FString                                 DeviceName;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DN_A;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DN_B;                                              // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DN_C;                                              // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DN_D;                                              // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeviceTypeString;                                  // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C65[0x8];                                     // 0x0060(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWM_BasicDeviceInfo) == 0x000008, "Wrong alignment on FWM_BasicDeviceInfo");
static_assert(sizeof(FWM_BasicDeviceInfo) == 0x000068, "Wrong size on FWM_BasicDeviceInfo");
static_assert(offsetof(FWM_BasicDeviceInfo, DeviceName) == 0x000000, "Member 'FWM_BasicDeviceInfo::DeviceName' has a wrong offset!");
static_assert(offsetof(FWM_BasicDeviceInfo, DN_A) == 0x000010, "Member 'FWM_BasicDeviceInfo::DN_A' has a wrong offset!");
static_assert(offsetof(FWM_BasicDeviceInfo, DN_B) == 0x000020, "Member 'FWM_BasicDeviceInfo::DN_B' has a wrong offset!");
static_assert(offsetof(FWM_BasicDeviceInfo, DN_C) == 0x000030, "Member 'FWM_BasicDeviceInfo::DN_C' has a wrong offset!");
static_assert(offsetof(FWM_BasicDeviceInfo, DN_D) == 0x000040, "Member 'FWM_BasicDeviceInfo::DN_D' has a wrong offset!");
static_assert(offsetof(FWM_BasicDeviceInfo, DeviceTypeString) == 0x000050, "Member 'FWM_BasicDeviceInfo::DeviceTypeString' has a wrong offset!");

// ScriptStruct WM_InputManager_Plugin.WM_HID_XInputWrap
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FWM_HID_XInputWrap final
{
public:
	uint8                                         Pad_1C66[0x50];                                    // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWM_HID_XInputWrap) == 0x000008, "Wrong alignment on FWM_HID_XInputWrap");
static_assert(sizeof(FWM_HID_XInputWrap) == 0x000050, "Wrong size on FWM_HID_XInputWrap");

// ScriptStruct WM_InputManager_Plugin.WM_HID_ButtonData
// 0x0028 (0x0028 - 0x0000)
struct FWM_HID_ButtonData final
{
public:
	uint8                                         Pad_1C67[0x1];                                     // 0x0000(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsPressed;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C68[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ButtonNumber;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWM_KeyTriggerState                           KeyTriggerState;                                   // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C69[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ButtonBindingCode;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C6A[0x8];                                     // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWM_HID_ButtonData) == 0x000008, "Wrong alignment on FWM_HID_ButtonData");
static_assert(sizeof(FWM_HID_ButtonData) == 0x000028, "Wrong size on FWM_HID_ButtonData");
static_assert(offsetof(FWM_HID_ButtonData, bIsPressed) == 0x000001, "Member 'FWM_HID_ButtonData::bIsPressed' has a wrong offset!");
static_assert(offsetof(FWM_HID_ButtonData, ButtonNumber) == 0x000004, "Member 'FWM_HID_ButtonData::ButtonNumber' has a wrong offset!");
static_assert(offsetof(FWM_HID_ButtonData, KeyTriggerState) == 0x000008, "Member 'FWM_HID_ButtonData::KeyTriggerState' has a wrong offset!");
static_assert(offsetof(FWM_HID_ButtonData, ButtonBindingCode) == 0x000010, "Member 'FWM_HID_ButtonData::ButtonBindingCode' has a wrong offset!");

// ScriptStruct WM_InputManager_Plugin.WM_HID_AxisData
// 0x00A8 (0x00A8 - 0x0000)
struct FWM_HID_AxisData final
{
public:
	uint8                                         Pad_1C6B[0x24];                                    // 0x0000(0x0024)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LogicalMin;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LogicalMax;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LogicalCenter;                                     // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LogicalRange;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RawValue;                                          // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RawValueBitMasked;                                 // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalizedRawValue;                                // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CenteredValue;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AxisValue;                                         // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C6C[0xE];                                     // 0x0048(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	EWM_AxisCodeTable                             AxisEnum;                                          // 0x0056(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C6D[0x19];                                    // 0x0057(0x0019)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AxisBindingCode;                                   // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C6E[0x10];                                    // 0x0080(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Instance;                                          // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C6F[0x14];                                    // 0x0094(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWM_HID_AxisData) == 0x000008, "Wrong alignment on FWM_HID_AxisData");
static_assert(sizeof(FWM_HID_AxisData) == 0x0000A8, "Wrong size on FWM_HID_AxisData");
static_assert(offsetof(FWM_HID_AxisData, LogicalMin) == 0x000024, "Member 'FWM_HID_AxisData::LogicalMin' has a wrong offset!");
static_assert(offsetof(FWM_HID_AxisData, LogicalMax) == 0x000028, "Member 'FWM_HID_AxisData::LogicalMax' has a wrong offset!");
static_assert(offsetof(FWM_HID_AxisData, LogicalCenter) == 0x00002C, "Member 'FWM_HID_AxisData::LogicalCenter' has a wrong offset!");
static_assert(offsetof(FWM_HID_AxisData, LogicalRange) == 0x000030, "Member 'FWM_HID_AxisData::LogicalRange' has a wrong offset!");
static_assert(offsetof(FWM_HID_AxisData, RawValue) == 0x000034, "Member 'FWM_HID_AxisData::RawValue' has a wrong offset!");
static_assert(offsetof(FWM_HID_AxisData, RawValueBitMasked) == 0x000038, "Member 'FWM_HID_AxisData::RawValueBitMasked' has a wrong offset!");
static_assert(offsetof(FWM_HID_AxisData, NormalizedRawValue) == 0x00003C, "Member 'FWM_HID_AxisData::NormalizedRawValue' has a wrong offset!");
static_assert(offsetof(FWM_HID_AxisData, CenteredValue) == 0x000040, "Member 'FWM_HID_AxisData::CenteredValue' has a wrong offset!");
static_assert(offsetof(FWM_HID_AxisData, AxisValue) == 0x000044, "Member 'FWM_HID_AxisData::AxisValue' has a wrong offset!");
static_assert(offsetof(FWM_HID_AxisData, AxisEnum) == 0x000056, "Member 'FWM_HID_AxisData::AxisEnum' has a wrong offset!");
static_assert(offsetof(FWM_HID_AxisData, AxisBindingCode) == 0x000070, "Member 'FWM_HID_AxisData::AxisBindingCode' has a wrong offset!");
static_assert(offsetof(FWM_HID_AxisData, Instance) == 0x000090, "Member 'FWM_HID_AxisData::Instance' has a wrong offset!");

// ScriptStruct WM_InputManager_Plugin.WM_HID_DPADData
// 0x0158 (0x0158 - 0x0000)
struct alignas(0x08) FWM_HID_DPADData final
{
public:
	uint8                                         Pad_1C70[0x158];                                   // 0x0000(0x0158)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWM_HID_DPADData) == 0x000008, "Wrong alignment on FWM_HID_DPADData");
static_assert(sizeof(FWM_HID_DPADData) == 0x000158, "Wrong size on FWM_HID_DPADData");

// ScriptStruct WM_InputManager_Plugin.WM_Keyboard_DeviceInfo
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x04) FWM_Keyboard_DeviceInfo final
{
public:
	uint8                                         Pad_1C71[0x18];                                    // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWM_Keyboard_DeviceInfo) == 0x000004, "Wrong alignment on FWM_Keyboard_DeviceInfo");
static_assert(sizeof(FWM_Keyboard_DeviceInfo) == 0x000018, "Wrong size on FWM_Keyboard_DeviceInfo");

// ScriptStruct WM_InputManager_Plugin.WM_HID_AxisConfiguration
// 0x0010 (0x0010 - 0x0000)
struct FWM_HID_AxisConfiguration final
{
public:
	uint8                                         Pad_1C72[0x4];                                     // 0x0000(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bInverted;                                         // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPedal;                                          // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C73[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Sensitivity;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeadZone;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWM_HID_AxisConfiguration) == 0x000004, "Wrong alignment on FWM_HID_AxisConfiguration");
static_assert(sizeof(FWM_HID_AxisConfiguration) == 0x000010, "Wrong size on FWM_HID_AxisConfiguration");
static_assert(offsetof(FWM_HID_AxisConfiguration, bInverted) == 0x000004, "Member 'FWM_HID_AxisConfiguration::bInverted' has a wrong offset!");
static_assert(offsetof(FWM_HID_AxisConfiguration, bIsPedal) == 0x000005, "Member 'FWM_HID_AxisConfiguration::bIsPedal' has a wrong offset!");
static_assert(offsetof(FWM_HID_AxisConfiguration, Sensitivity) == 0x000008, "Member 'FWM_HID_AxisConfiguration::Sensitivity' has a wrong offset!");
static_assert(offsetof(FWM_HID_AxisConfiguration, DeadZone) == 0x00000C, "Member 'FWM_HID_AxisConfiguration::DeadZone' has a wrong offset!");

// ScriptStruct WM_InputManager_Plugin.HID_Joystick_CONFIG
// 0x01B8 (0x01B8 - 0x0000)
struct FHID_Joystick_CONFIG final
{
public:
	uint8                                         Pad_1C74[0x10];                                    // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FKey, EWM_GamepadKeyType>         KEY_TYPES;                                         // 0x0010(0x0050)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C75[0x50];                                    // 0x0060(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FKey, class FString>              AXIS_BINDINGS;                                     // 0x00B0(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<struct FKey, class FString>              BUTTONS_BINDINGS;                                  // 0x0100(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            DPADS_BINDINGS;                                    // 0x0150(0x0050)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FWM_HID_AxisConfiguration>      AxisConfigurations;                                // 0x01A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          RAWDataRecieved;                                   // 0x01B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C76[0x7];                                     // 0x01B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHID_Joystick_CONFIG) == 0x000008, "Wrong alignment on FHID_Joystick_CONFIG");
static_assert(sizeof(FHID_Joystick_CONFIG) == 0x0001B8, "Wrong size on FHID_Joystick_CONFIG");
static_assert(offsetof(FHID_Joystick_CONFIG, KEY_TYPES) == 0x000010, "Member 'FHID_Joystick_CONFIG::KEY_TYPES' has a wrong offset!");
static_assert(offsetof(FHID_Joystick_CONFIG, AXIS_BINDINGS) == 0x0000B0, "Member 'FHID_Joystick_CONFIG::AXIS_BINDINGS' has a wrong offset!");
static_assert(offsetof(FHID_Joystick_CONFIG, BUTTONS_BINDINGS) == 0x000100, "Member 'FHID_Joystick_CONFIG::BUTTONS_BINDINGS' has a wrong offset!");
static_assert(offsetof(FHID_Joystick_CONFIG, DPADS_BINDINGS) == 0x000150, "Member 'FHID_Joystick_CONFIG::DPADS_BINDINGS' has a wrong offset!");
static_assert(offsetof(FHID_Joystick_CONFIG, AxisConfigurations) == 0x0001A0, "Member 'FHID_Joystick_CONFIG::AxisConfigurations' has a wrong offset!");
static_assert(offsetof(FHID_Joystick_CONFIG, RAWDataRecieved) == 0x0001B0, "Member 'FHID_Joystick_CONFIG::RAWDataRecieved' has a wrong offset!");

// ScriptStruct WM_InputManager_Plugin.HidKeysByClass
// 0x01E0 (0x01E0 - 0x0000)
struct FHidKeysByClass final
{
public:
	TMap<struct FKey, EWM_GamepadKeyType>         KeysByType;                                        // 0x0000(0x0050)(NativeAccessSpecifierPublic)
	TMap<struct FKey, class FString>              Axes;                                              // 0x0050(0x0050)(NativeAccessSpecifierPublic)
	TMap<struct FKey, class FString>              Buttons;                                           // 0x00A0(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FString, struct FDPADCollection>   DPADs;                                             // 0x00F0(0x0050)(NativeAccessSpecifierPublic)
	uint8                                         Pad_1C77[0xA0];                                    // 0x0140(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHidKeysByClass) == 0x000008, "Wrong alignment on FHidKeysByClass");
static_assert(sizeof(FHidKeysByClass) == 0x0001E0, "Wrong size on FHidKeysByClass");
static_assert(offsetof(FHidKeysByClass, KeysByType) == 0x000000, "Member 'FHidKeysByClass::KeysByType' has a wrong offset!");
static_assert(offsetof(FHidKeysByClass, Axes) == 0x000050, "Member 'FHidKeysByClass::Axes' has a wrong offset!");
static_assert(offsetof(FHidKeysByClass, Buttons) == 0x0000A0, "Member 'FHidKeysByClass::Buttons' has a wrong offset!");
static_assert(offsetof(FHidKeysByClass, DPADs) == 0x0000F0, "Member 'FHidKeysByClass::DPADs' has a wrong offset!");

// ScriptStruct WM_InputManager_Plugin._PCS_Device
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) F_PCS_Device final
{
public:
	uint8                                         Pad_1C78[0x10];                                    // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(F_PCS_Device) == 0x000008, "Wrong alignment on F_PCS_Device");
static_assert(sizeof(F_PCS_Device) == 0x000010, "Wrong size on F_PCS_Device");

// ScriptStruct WM_InputManager_Plugin.EnhancedInputMapping_WM
// 0x0058 (0x0058 - 0x0000)
struct FEnhancedInputMapping_WM final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerMappable;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C79[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ActionName;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActionFName;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPlayerMappable;                                  // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C7A[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DisplayName;                                       // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEnhancedInputMapping_WM) == 0x000008, "Wrong alignment on FEnhancedInputMapping_WM");
static_assert(sizeof(FEnhancedInputMapping_WM) == 0x000058, "Wrong size on FEnhancedInputMapping_WM");
static_assert(offsetof(FEnhancedInputMapping_WM, Key) == 0x000000, "Member 'FEnhancedInputMapping_WM::Key' has a wrong offset!");
static_assert(offsetof(FEnhancedInputMapping_WM, PlayerMappable) == 0x000018, "Member 'FEnhancedInputMapping_WM::PlayerMappable' has a wrong offset!");
static_assert(offsetof(FEnhancedInputMapping_WM, ActionName) == 0x000020, "Member 'FEnhancedInputMapping_WM::ActionName' has a wrong offset!");
static_assert(offsetof(FEnhancedInputMapping_WM, ActionFName) == 0x000030, "Member 'FEnhancedInputMapping_WM::ActionFName' has a wrong offset!");
static_assert(offsetof(FEnhancedInputMapping_WM, IsPlayerMappable) == 0x000040, "Member 'FEnhancedInputMapping_WM::IsPlayerMappable' has a wrong offset!");
static_assert(offsetof(FEnhancedInputMapping_WM, DisplayName) == 0x000048, "Member 'FEnhancedInputMapping_WM::DisplayName' has a wrong offset!");

// ScriptStruct WM_InputManager_Plugin.DefaultDeviceMappings
// 0x00A0 (0x00A0 - 0x0000)
struct FDefaultDeviceMappings final
{
public:
	TMap<class FString, class FString>            DefaultAxisMappings;                               // 0x0000(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<class FString, int32>                    DefaultButtonMappings;                             // 0x0050(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDefaultDeviceMappings) == 0x000008, "Wrong alignment on FDefaultDeviceMappings");
static_assert(sizeof(FDefaultDeviceMappings) == 0x0000A0, "Wrong size on FDefaultDeviceMappings");
static_assert(offsetof(FDefaultDeviceMappings, DefaultAxisMappings) == 0x000000, "Member 'FDefaultDeviceMappings::DefaultAxisMappings' has a wrong offset!");
static_assert(offsetof(FDefaultDeviceMappings, DefaultButtonMappings) == 0x000050, "Member 'FDefaultDeviceMappings::DefaultButtonMappings' has a wrong offset!");

// ScriptStruct WM_InputManager_Plugin.Driver_AxisDefaults
// 0x0018 (0x0018 - 0x0000)
struct FDriver_AxisDefaults final
{
public:
	class FString                                 DefaultMapping;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Instance;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Inverted;                                          // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Pedal;                                             // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C7B[0x2];                                     // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDriver_AxisDefaults) == 0x000008, "Wrong alignment on FDriver_AxisDefaults");
static_assert(sizeof(FDriver_AxisDefaults) == 0x000018, "Wrong size on FDriver_AxisDefaults");
static_assert(offsetof(FDriver_AxisDefaults, DefaultMapping) == 0x000000, "Member 'FDriver_AxisDefaults::DefaultMapping' has a wrong offset!");
static_assert(offsetof(FDriver_AxisDefaults, Instance) == 0x000010, "Member 'FDriver_AxisDefaults::Instance' has a wrong offset!");
static_assert(offsetof(FDriver_AxisDefaults, Inverted) == 0x000014, "Member 'FDriver_AxisDefaults::Inverted' has a wrong offset!");
static_assert(offsetof(FDriver_AxisDefaults, Pedal) == 0x000015, "Member 'FDriver_AxisDefaults::Pedal' has a wrong offset!");

// ScriptStruct WM_InputManager_Plugin.Driver_ButtonDefaults
// 0x0004 (0x0004 - 0x0000)
struct FDriver_ButtonDefaults final
{
public:
	int32                                         DefaultIndex;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDriver_ButtonDefaults) == 0x000004, "Wrong alignment on FDriver_ButtonDefaults");
static_assert(sizeof(FDriver_ButtonDefaults) == 0x000004, "Wrong size on FDriver_ButtonDefaults");
static_assert(offsetof(FDriver_ButtonDefaults, DefaultIndex) == 0x000000, "Member 'FDriver_ButtonDefaults::DefaultIndex' has a wrong offset!");

// ScriptStruct WM_InputManager_Plugin.Developer_HIDDeviceDriver
// 0x00C0 (0x00C0 - 0x0000)
struct FDeveloper_HIDDeviceDriver final
{
public:
	TArray<struct FDriver_AxisDefaults>           AxisDefaults;                                      // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 DeviceName;                                        // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FKey, class FString>              AxisDefaultsString;                                // 0x0020(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<struct FKey, int32>                      ButtonsDefaults;                                   // 0x0070(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDeveloper_HIDDeviceDriver) == 0x000008, "Wrong alignment on FDeveloper_HIDDeviceDriver");
static_assert(sizeof(FDeveloper_HIDDeviceDriver) == 0x0000C0, "Wrong size on FDeveloper_HIDDeviceDriver");
static_assert(offsetof(FDeveloper_HIDDeviceDriver, AxisDefaults) == 0x000000, "Member 'FDeveloper_HIDDeviceDriver::AxisDefaults' has a wrong offset!");
static_assert(offsetof(FDeveloper_HIDDeviceDriver, DeviceName) == 0x000010, "Member 'FDeveloper_HIDDeviceDriver::DeviceName' has a wrong offset!");
static_assert(offsetof(FDeveloper_HIDDeviceDriver, AxisDefaultsString) == 0x000020, "Member 'FDeveloper_HIDDeviceDriver::AxisDefaultsString' has a wrong offset!");
static_assert(offsetof(FDeveloper_HIDDeviceDriver, ButtonsDefaults) == 0x000070, "Member 'FDeveloper_HIDDeviceDriver::ButtonsDefaults' has a wrong offset!");

// ScriptStruct WM_InputManager_Plugin.Developer_HIDJoystick_Preset
// 0x00C0 (0x00C0 - 0x0000)
struct FDeveloper_HIDJoystick_Preset final
{
public:
	class FString                                 VendorID;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProductID;                                         // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            AxisPreset;                                        // 0x0020(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<int32, int32>                            ButtonsPreset;                                     // 0x0070(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDeveloper_HIDJoystick_Preset) == 0x000008, "Wrong alignment on FDeveloper_HIDJoystick_Preset");
static_assert(sizeof(FDeveloper_HIDJoystick_Preset) == 0x0000C0, "Wrong size on FDeveloper_HIDJoystick_Preset");
static_assert(offsetof(FDeveloper_HIDJoystick_Preset, VendorID) == 0x000000, "Member 'FDeveloper_HIDJoystick_Preset::VendorID' has a wrong offset!");
static_assert(offsetof(FDeveloper_HIDJoystick_Preset, ProductID) == 0x000010, "Member 'FDeveloper_HIDJoystick_Preset::ProductID' has a wrong offset!");
static_assert(offsetof(FDeveloper_HIDJoystick_Preset, AxisPreset) == 0x000020, "Member 'FDeveloper_HIDJoystick_Preset::AxisPreset' has a wrong offset!");
static_assert(offsetof(FDeveloper_HIDJoystick_Preset, ButtonsPreset) == 0x000070, "Member 'FDeveloper_HIDJoystick_Preset::ButtonsPreset' has a wrong offset!");

}


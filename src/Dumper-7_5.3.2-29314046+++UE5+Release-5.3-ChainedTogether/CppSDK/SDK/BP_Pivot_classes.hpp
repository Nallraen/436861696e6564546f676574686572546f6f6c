#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Pivot

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Pivot.BP_Pivot_C
// 0x00A0 (0x0338 - 0x0298)
class ABP_Pivot_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UC_VinceSync_C*                         C_VinceSync;                                       // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxLeft3;                                          // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxLeft2;                                          // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxLeft1;                                          // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxLeft;                                           // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxRight3;                                         // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxRight2;                                         // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxRight1;                                         // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxRight;                                          // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UC_TickOptimizer_C*                     C_TickOptimizer;                                   // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Pivot;                                             // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ActorToInteractWith;                               // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        PrivateResetSpeed;                                 // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Turn_Rate_Target;                                  // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TurnRate;                                          // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AlwaysReset;                                       // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_3AC1[0x7];                                     // 0x0321(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ResetSpeed;                                        // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Rewind;                                            // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Pivot(int32 EntryPoint);
	bool IsSomeoneInside(TArray<class UBoxComponent*>& Boxes);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void UpdateActorToInteractWith();
	void UpdateTurn(double* Param_TurnRate);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Pivot_C">();
	}
	static class ABP_Pivot_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Pivot_C>();
	}
};
static_assert(alignof(ABP_Pivot_C) == 0x000008, "Wrong alignment on ABP_Pivot_C");
static_assert(sizeof(ABP_Pivot_C) == 0x000338, "Wrong size on ABP_Pivot_C");
static_assert(offsetof(ABP_Pivot_C, UberGraphFrame) == 0x000298, "Member 'ABP_Pivot_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Pivot_C, C_VinceSync) == 0x0002A0, "Member 'ABP_Pivot_C::C_VinceSync' has a wrong offset!");
static_assert(offsetof(ABP_Pivot_C, BoxLeft3) == 0x0002A8, "Member 'ABP_Pivot_C::BoxLeft3' has a wrong offset!");
static_assert(offsetof(ABP_Pivot_C, BoxLeft2) == 0x0002B0, "Member 'ABP_Pivot_C::BoxLeft2' has a wrong offset!");
static_assert(offsetof(ABP_Pivot_C, BoxLeft1) == 0x0002B8, "Member 'ABP_Pivot_C::BoxLeft1' has a wrong offset!");
static_assert(offsetof(ABP_Pivot_C, BoxLeft) == 0x0002C0, "Member 'ABP_Pivot_C::BoxLeft' has a wrong offset!");
static_assert(offsetof(ABP_Pivot_C, BoxRight3) == 0x0002C8, "Member 'ABP_Pivot_C::BoxRight3' has a wrong offset!");
static_assert(offsetof(ABP_Pivot_C, BoxRight2) == 0x0002D0, "Member 'ABP_Pivot_C::BoxRight2' has a wrong offset!");
static_assert(offsetof(ABP_Pivot_C, BoxRight1) == 0x0002D8, "Member 'ABP_Pivot_C::BoxRight1' has a wrong offset!");
static_assert(offsetof(ABP_Pivot_C, BoxRight) == 0x0002E0, "Member 'ABP_Pivot_C::BoxRight' has a wrong offset!");
static_assert(offsetof(ABP_Pivot_C, C_TickOptimizer) == 0x0002E8, "Member 'ABP_Pivot_C::C_TickOptimizer' has a wrong offset!");
static_assert(offsetof(ABP_Pivot_C, Pivot) == 0x0002F0, "Member 'ABP_Pivot_C::Pivot' has a wrong offset!");
static_assert(offsetof(ABP_Pivot_C, DefaultSceneRoot) == 0x0002F8, "Member 'ABP_Pivot_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Pivot_C, ActorToInteractWith) == 0x000300, "Member 'ABP_Pivot_C::ActorToInteractWith' has a wrong offset!");
static_assert(offsetof(ABP_Pivot_C, PrivateResetSpeed) == 0x000308, "Member 'ABP_Pivot_C::PrivateResetSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Pivot_C, Turn_Rate_Target) == 0x000310, "Member 'ABP_Pivot_C::Turn_Rate_Target' has a wrong offset!");
static_assert(offsetof(ABP_Pivot_C, TurnRate) == 0x000318, "Member 'ABP_Pivot_C::TurnRate' has a wrong offset!");
static_assert(offsetof(ABP_Pivot_C, AlwaysReset) == 0x000320, "Member 'ABP_Pivot_C::AlwaysReset' has a wrong offset!");
static_assert(offsetof(ABP_Pivot_C, ResetSpeed) == 0x000328, "Member 'ABP_Pivot_C::ResetSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Pivot_C, Rewind) == 0x000330, "Member 'ABP_Pivot_C::Rewind' has a wrong offset!");

}


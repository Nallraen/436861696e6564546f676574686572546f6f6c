#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: V_GameInstanceWithSave

#include "Basic.hpp"

#include "S_Checkpoint_structs.hpp"
#include "E_SettingCategory_structs.hpp"
#include "S_SavedSetting_structs.hpp"
#include "E_ApplySettingType_structs.hpp"


namespace SDK::Params
{

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.Apply Audio Settings
// 0x0001 (0x0001 - 0x0000)
struct V_GameInstanceWithSave_C_Apply_Audio_Settings final
{
public:
	E_ApplySettingType                            Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_Apply_Audio_Settings) == 0x000001, "Wrong alignment on V_GameInstanceWithSave_C_Apply_Audio_Settings");
static_assert(sizeof(V_GameInstanceWithSave_C_Apply_Audio_Settings) == 0x000001, "Wrong size on V_GameInstanceWithSave_C_Apply_Audio_Settings");
static_assert(offsetof(V_GameInstanceWithSave_C_Apply_Audio_Settings, Type) == 0x000000, "Member 'V_GameInstanceWithSave_C_Apply_Audio_Settings::Type' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.Apply Push to Talk
// 0x0028 (0x0028 - 0x0000)
struct V_GameInstanceWithSave_C_Apply_Push_to_Talk final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSettingFromIdentifier_ReturnValue;     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_356C[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetSettingFromIdentifier_Value;           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_Apply_Push_to_Talk) == 0x000008, "Wrong alignment on V_GameInstanceWithSave_C_Apply_Push_to_Talk");
static_assert(sizeof(V_GameInstanceWithSave_C_Apply_Push_to_Talk) == 0x000028, "Wrong size on V_GameInstanceWithSave_C_Apply_Push_to_Talk");
static_assert(offsetof(V_GameInstanceWithSave_C_Apply_Push_to_Talk, ID) == 0x000000, "Member 'V_GameInstanceWithSave_C_Apply_Push_to_Talk::ID' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_Apply_Push_to_Talk, CallFunc_GetSettingFromIdentifier_ReturnValue) == 0x000010, "Member 'V_GameInstanceWithSave_C_Apply_Push_to_Talk::CallFunc_GetSettingFromIdentifier_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_Apply_Push_to_Talk, CallFunc_GetSettingFromIdentifier_Value) == 0x000018, "Member 'V_GameInstanceWithSave_C_Apply_Push_to_Talk::CallFunc_GetSettingFromIdentifier_Value' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.Apply Resolution And Windowed
// 0x0048 (0x0048 - 0x0000)
struct V_GameInstanceWithSave_C_Apply_Resolution_And_Windowed final
{
public:
	bool                                          K2Node_SwitchString_CmpSuccess;                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_356D[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_Apply_Resolution_And_Windowed) == 0x000008, "Wrong alignment on V_GameInstanceWithSave_C_Apply_Resolution_And_Windowed");
static_assert(sizeof(V_GameInstanceWithSave_C_Apply_Resolution_And_Windowed) == 0x000048, "Wrong size on V_GameInstanceWithSave_C_Apply_Resolution_And_Windowed");
static_assert(offsetof(V_GameInstanceWithSave_C_Apply_Resolution_And_Windowed, K2Node_SwitchString_CmpSuccess) == 0x000000, "Member 'V_GameInstanceWithSave_C_Apply_Resolution_And_Windowed::K2Node_SwitchString_CmpSuccess' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_Apply_Resolution_And_Windowed, CallFunc_Concat_StrStr_ReturnValue) == 0x000008, "Member 'V_GameInstanceWithSave_C_Apply_Resolution_And_Windowed::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_Apply_Resolution_And_Windowed, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000018, "Member 'V_GameInstanceWithSave_C_Apply_Resolution_And_Windowed::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_Apply_Resolution_And_Windowed, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000028, "Member 'V_GameInstanceWithSave_C_Apply_Resolution_And_Windowed::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_Apply_Resolution_And_Windowed, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000038, "Member 'V_GameInstanceWithSave_C_Apply_Resolution_And_Windowed::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ApplyAntialiasing
// 0x0002 (0x0002 - 0x0000)
struct V_GameInstanceWithSave_C_ApplyAntialiasing final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchString_CmpSuccess;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_ApplyAntialiasing) == 0x000001, "Wrong alignment on V_GameInstanceWithSave_C_ApplyAntialiasing");
static_assert(sizeof(V_GameInstanceWithSave_C_ApplyAntialiasing) == 0x000002, "Wrong size on V_GameInstanceWithSave_C_ApplyAntialiasing");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyAntialiasing, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'V_GameInstanceWithSave_C_ApplyAntialiasing::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyAntialiasing, K2Node_SwitchString_CmpSuccess) == 0x000001, "Member 'V_GameInstanceWithSave_C_ApplyAntialiasing::K2Node_SwitchString_CmpSuccess' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ApplyAudioVolume
// 0x0060 (0x0060 - 0x0000)
struct V_GameInstanceWithSave_C_ApplyAudioVolume final
{
public:
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_2;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_3;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_4;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_5;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_6;        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_7;        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetSoundMixClassOverride_Volume_ImplicitCast; // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetSoundMixClassOverride_Volume_ImplicitCast_1; // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetSoundMixClassOverride_Volume_ImplicitCast_2; // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetSoundMixClassOverride_Volume_ImplicitCast_3; // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetSoundMixClassOverride_Volume_ImplicitCast_4; // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetSoundMixClassOverride_Volume_ImplicitCast_5; // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetSoundMixClassOverride_Volume_ImplicitCast_6; // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetSoundMixClassOverride_Volume_ImplicitCast_7; // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_ApplyAudioVolume) == 0x000008, "Wrong alignment on V_GameInstanceWithSave_C_ApplyAudioVolume");
static_assert(sizeof(V_GameInstanceWithSave_C_ApplyAudioVolume) == 0x000060, "Wrong size on V_GameInstanceWithSave_C_ApplyAudioVolume");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyAudioVolume, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000000, "Member 'V_GameInstanceWithSave_C_ApplyAudioVolume::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyAudioVolume, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000008, "Member 'V_GameInstanceWithSave_C_ApplyAudioVolume::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyAudioVolume, CallFunc_Divide_DoubleDouble_ReturnValue_2) == 0x000010, "Member 'V_GameInstanceWithSave_C_ApplyAudioVolume::CallFunc_Divide_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyAudioVolume, CallFunc_Divide_DoubleDouble_ReturnValue_3) == 0x000018, "Member 'V_GameInstanceWithSave_C_ApplyAudioVolume::CallFunc_Divide_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyAudioVolume, CallFunc_Divide_DoubleDouble_ReturnValue_4) == 0x000020, "Member 'V_GameInstanceWithSave_C_ApplyAudioVolume::CallFunc_Divide_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyAudioVolume, CallFunc_Divide_DoubleDouble_ReturnValue_5) == 0x000028, "Member 'V_GameInstanceWithSave_C_ApplyAudioVolume::CallFunc_Divide_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyAudioVolume, CallFunc_Divide_DoubleDouble_ReturnValue_6) == 0x000030, "Member 'V_GameInstanceWithSave_C_ApplyAudioVolume::CallFunc_Divide_DoubleDouble_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyAudioVolume, CallFunc_Divide_DoubleDouble_ReturnValue_7) == 0x000038, "Member 'V_GameInstanceWithSave_C_ApplyAudioVolume::CallFunc_Divide_DoubleDouble_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyAudioVolume, CallFunc_SetSoundMixClassOverride_Volume_ImplicitCast) == 0x000040, "Member 'V_GameInstanceWithSave_C_ApplyAudioVolume::CallFunc_SetSoundMixClassOverride_Volume_ImplicitCast' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyAudioVolume, CallFunc_SetSoundMixClassOverride_Volume_ImplicitCast_1) == 0x000044, "Member 'V_GameInstanceWithSave_C_ApplyAudioVolume::CallFunc_SetSoundMixClassOverride_Volume_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyAudioVolume, CallFunc_SetSoundMixClassOverride_Volume_ImplicitCast_2) == 0x000048, "Member 'V_GameInstanceWithSave_C_ApplyAudioVolume::CallFunc_SetSoundMixClassOverride_Volume_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyAudioVolume, CallFunc_SetSoundMixClassOverride_Volume_ImplicitCast_3) == 0x00004C, "Member 'V_GameInstanceWithSave_C_ApplyAudioVolume::CallFunc_SetSoundMixClassOverride_Volume_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyAudioVolume, CallFunc_SetSoundMixClassOverride_Volume_ImplicitCast_4) == 0x000050, "Member 'V_GameInstanceWithSave_C_ApplyAudioVolume::CallFunc_SetSoundMixClassOverride_Volume_ImplicitCast_4' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyAudioVolume, CallFunc_SetSoundMixClassOverride_Volume_ImplicitCast_5) == 0x000054, "Member 'V_GameInstanceWithSave_C_ApplyAudioVolume::CallFunc_SetSoundMixClassOverride_Volume_ImplicitCast_5' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyAudioVolume, CallFunc_SetSoundMixClassOverride_Volume_ImplicitCast_6) == 0x000058, "Member 'V_GameInstanceWithSave_C_ApplyAudioVolume::CallFunc_SetSoundMixClassOverride_Volume_ImplicitCast_6' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyAudioVolume, CallFunc_SetSoundMixClassOverride_Volume_ImplicitCast_7) == 0x00005C, "Member 'V_GameInstanceWithSave_C_ApplyAudioVolume::CallFunc_SetSoundMixClassOverride_Volume_ImplicitCast_7' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ApplyBloom
// 0x0030 (0x0030 - 0x0000)
struct V_GameInstanceWithSave_C_ApplyBloom final
{
public:
	bool                                          CallFunc_GetSettingFromIdentifier_ReturnValue;     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_356E[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetSettingFromIdentifier_Value;           // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_356F[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_ApplyBloom) == 0x000008, "Wrong alignment on V_GameInstanceWithSave_C_ApplyBloom");
static_assert(sizeof(V_GameInstanceWithSave_C_ApplyBloom) == 0x000030, "Wrong size on V_GameInstanceWithSave_C_ApplyBloom");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyBloom, CallFunc_GetSettingFromIdentifier_ReturnValue) == 0x000000, "Member 'V_GameInstanceWithSave_C_ApplyBloom::CallFunc_GetSettingFromIdentifier_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyBloom, CallFunc_GetSettingFromIdentifier_Value) == 0x000008, "Member 'V_GameInstanceWithSave_C_ApplyBloom::CallFunc_GetSettingFromIdentifier_Value' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyBloom, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'V_GameInstanceWithSave_C_ApplyBloom::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyBloom, CallFunc_Concat_StrStr_ReturnValue) == 0x000020, "Member 'V_GameInstanceWithSave_C_ApplyBloom::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ApplyCameraInvertionSettings
// 0x0003 (0x0003 - 0x0000)
struct V_GameInstanceWithSave_C_ApplyCameraInvertionSettings final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchString_CmpSuccess;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchString_CmpSuccess_1;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_ApplyCameraInvertionSettings) == 0x000001, "Wrong alignment on V_GameInstanceWithSave_C_ApplyCameraInvertionSettings");
static_assert(sizeof(V_GameInstanceWithSave_C_ApplyCameraInvertionSettings) == 0x000003, "Wrong size on V_GameInstanceWithSave_C_ApplyCameraInvertionSettings");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyCameraInvertionSettings, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'V_GameInstanceWithSave_C_ApplyCameraInvertionSettings::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyCameraInvertionSettings, K2Node_SwitchString_CmpSuccess) == 0x000001, "Member 'V_GameInstanceWithSave_C_ApplyCameraInvertionSettings::K2Node_SwitchString_CmpSuccess' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyCameraInvertionSettings, K2Node_SwitchString_CmpSuccess_1) == 0x000002, "Member 'V_GameInstanceWithSave_C_ApplyCameraInvertionSettings::K2Node_SwitchString_CmpSuccess_1' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ApplyCameraSensitivity
// 0x0001 (0x0001 - 0x0000)
struct V_GameInstanceWithSave_C_ApplyCameraSensitivity final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_ApplyCameraSensitivity) == 0x000001, "Wrong alignment on V_GameInstanceWithSave_C_ApplyCameraSensitivity");
static_assert(sizeof(V_GameInstanceWithSave_C_ApplyCameraSensitivity) == 0x000001, "Wrong size on V_GameInstanceWithSave_C_ApplyCameraSensitivity");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyCameraSensitivity, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'V_GameInstanceWithSave_C_ApplyCameraSensitivity::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ApplyEffectsQuality
// 0x0002 (0x0002 - 0x0000)
struct V_GameInstanceWithSave_C_ApplyEffectsQuality final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchString_CmpSuccess;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_ApplyEffectsQuality) == 0x000001, "Wrong alignment on V_GameInstanceWithSave_C_ApplyEffectsQuality");
static_assert(sizeof(V_GameInstanceWithSave_C_ApplyEffectsQuality) == 0x000002, "Wrong size on V_GameInstanceWithSave_C_ApplyEffectsQuality");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyEffectsQuality, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'V_GameInstanceWithSave_C_ApplyEffectsQuality::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyEffectsQuality, K2Node_SwitchString_CmpSuccess) == 0x000001, "Member 'V_GameInstanceWithSave_C_ApplyEffectsQuality::K2Node_SwitchString_CmpSuccess' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ApplyGamma
// 0x0028 (0x0028 - 0x0000)
struct V_GameInstanceWithSave_C_ApplyGamma final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3570[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_DoubleToString_ReturnValue;          // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_ApplyGamma) == 0x000008, "Wrong alignment on V_GameInstanceWithSave_C_ApplyGamma");
static_assert(sizeof(V_GameInstanceWithSave_C_ApplyGamma) == 0x000028, "Wrong size on V_GameInstanceWithSave_C_ApplyGamma");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyGamma, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'V_GameInstanceWithSave_C_ApplyGamma::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyGamma, CallFunc_Conv_DoubleToString_ReturnValue) == 0x000008, "Member 'V_GameInstanceWithSave_C_ApplyGamma::CallFunc_Conv_DoubleToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyGamma, CallFunc_Concat_StrStr_ReturnValue) == 0x000018, "Member 'V_GameInstanceWithSave_C_ApplyGamma::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ApplyLanguage
// 0x0001 (0x0001 - 0x0000)
struct V_GameInstanceWithSave_C_ApplyLanguage final
{
public:
	bool                                          CallFunc_SetCurrentCulture_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_ApplyLanguage) == 0x000001, "Wrong alignment on V_GameInstanceWithSave_C_ApplyLanguage");
static_assert(sizeof(V_GameInstanceWithSave_C_ApplyLanguage) == 0x000001, "Wrong size on V_GameInstanceWithSave_C_ApplyLanguage");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyLanguage, CallFunc_SetCurrentCulture_ReturnValue) == 0x000000, "Member 'V_GameInstanceWithSave_C_ApplyLanguage::CallFunc_SetCurrentCulture_ReturnValue' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ApplyMaxFPS
// 0x0028 (0x0028 - 0x0000)
struct V_GameInstanceWithSave_C_ApplyMaxFPS final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3571[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_ApplyMaxFPS) == 0x000008, "Wrong alignment on V_GameInstanceWithSave_C_ApplyMaxFPS");
static_assert(sizeof(V_GameInstanceWithSave_C_ApplyMaxFPS) == 0x000028, "Wrong size on V_GameInstanceWithSave_C_ApplyMaxFPS");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyMaxFPS, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'V_GameInstanceWithSave_C_ApplyMaxFPS::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyMaxFPS, CallFunc_Conv_IntToString_ReturnValue) == 0x000008, "Member 'V_GameInstanceWithSave_C_ApplyMaxFPS::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyMaxFPS, CallFunc_Concat_StrStr_ReturnValue) == 0x000018, "Member 'V_GameInstanceWithSave_C_ApplyMaxFPS::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ApplyMicrophone
// 0x0040 (0x0040 - 0x0000)
struct V_GameInstanceWithSave_C_ApplyMicrophone final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_PlayerController_C> K2Node_DynamicCast_AsBPI_Player_Controller;        // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSettingFromIdentifier_ReturnValue;     // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3572[0x6];                                     // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetSettingFromIdentifier_Value;           // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_ApplyMicrophone) == 0x000008, "Wrong alignment on V_GameInstanceWithSave_C_ApplyMicrophone");
static_assert(sizeof(V_GameInstanceWithSave_C_ApplyMicrophone) == 0x000040, "Wrong size on V_GameInstanceWithSave_C_ApplyMicrophone");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyMicrophone, ID) == 0x000000, "Member 'V_GameInstanceWithSave_C_ApplyMicrophone::ID' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyMicrophone, CallFunc_GetPlayerController_ReturnValue) == 0x000010, "Member 'V_GameInstanceWithSave_C_ApplyMicrophone::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyMicrophone, K2Node_DynamicCast_AsBPI_Player_Controller) == 0x000018, "Member 'V_GameInstanceWithSave_C_ApplyMicrophone::K2Node_DynamicCast_AsBPI_Player_Controller' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyMicrophone, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'V_GameInstanceWithSave_C_ApplyMicrophone::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyMicrophone, CallFunc_GetSettingFromIdentifier_ReturnValue) == 0x000029, "Member 'V_GameInstanceWithSave_C_ApplyMicrophone::CallFunc_GetSettingFromIdentifier_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyMicrophone, CallFunc_GetSettingFromIdentifier_Value) == 0x000030, "Member 'V_GameInstanceWithSave_C_ApplyMicrophone::CallFunc_GetSettingFromIdentifier_Value' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ApplyMotionBlur
// 0x0050 (0x0050 - 0x0000)
struct V_GameInstanceWithSave_C_ApplyMotionBlur final
{
public:
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3573[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchString_CmpSuccess;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3574[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_ApplyMotionBlur) == 0x000008, "Wrong alignment on V_GameInstanceWithSave_C_ApplyMotionBlur");
static_assert(sizeof(V_GameInstanceWithSave_C_ApplyMotionBlur) == 0x000050, "Wrong size on V_GameInstanceWithSave_C_ApplyMotionBlur");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyMotionBlur, CallFunc_Concat_StrStr_ReturnValue) == 0x000000, "Member 'V_GameInstanceWithSave_C_ApplyMotionBlur::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyMotionBlur, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'V_GameInstanceWithSave_C_ApplyMotionBlur::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyMotionBlur, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000018, "Member 'V_GameInstanceWithSave_C_ApplyMotionBlur::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyMotionBlur, K2Node_SwitchString_CmpSuccess) == 0x000028, "Member 'V_GameInstanceWithSave_C_ApplyMotionBlur::K2Node_SwitchString_CmpSuccess' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyMotionBlur, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000030, "Member 'V_GameInstanceWithSave_C_ApplyMotionBlur::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyMotionBlur, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000040, "Member 'V_GameInstanceWithSave_C_ApplyMotionBlur::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ApplyParticlesQuality
// 0x0002 (0x0002 - 0x0000)
struct V_GameInstanceWithSave_C_ApplyParticlesQuality final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchString_CmpSuccess;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_ApplyParticlesQuality) == 0x000001, "Wrong alignment on V_GameInstanceWithSave_C_ApplyParticlesQuality");
static_assert(sizeof(V_GameInstanceWithSave_C_ApplyParticlesQuality) == 0x000002, "Wrong size on V_GameInstanceWithSave_C_ApplyParticlesQuality");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyParticlesQuality, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'V_GameInstanceWithSave_C_ApplyParticlesQuality::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyParticlesQuality, K2Node_SwitchString_CmpSuccess) == 0x000001, "Member 'V_GameInstanceWithSave_C_ApplyParticlesQuality::K2Node_SwitchString_CmpSuccess' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ApplyPP_Quality
// 0x0002 (0x0002 - 0x0000)
struct V_GameInstanceWithSave_C_ApplyPP_Quality final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchString_CmpSuccess;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_ApplyPP_Quality) == 0x000001, "Wrong alignment on V_GameInstanceWithSave_C_ApplyPP_Quality");
static_assert(sizeof(V_GameInstanceWithSave_C_ApplyPP_Quality) == 0x000002, "Wrong size on V_GameInstanceWithSave_C_ApplyPP_Quality");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyPP_Quality, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'V_GameInstanceWithSave_C_ApplyPP_Quality::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyPP_Quality, K2Node_SwitchString_CmpSuccess) == 0x000001, "Member 'V_GameInstanceWithSave_C_ApplyPP_Quality::K2Node_SwitchString_CmpSuccess' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ApplyResolutionScale
// 0x0028 (0x0028 - 0x0000)
struct V_GameInstanceWithSave_C_ApplyResolutionScale final
{
public:
	double                                        Resolutionscale;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_DoubleToString_ReturnValue;          // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_ApplyResolutionScale) == 0x000008, "Wrong alignment on V_GameInstanceWithSave_C_ApplyResolutionScale");
static_assert(sizeof(V_GameInstanceWithSave_C_ApplyResolutionScale) == 0x000028, "Wrong size on V_GameInstanceWithSave_C_ApplyResolutionScale");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyResolutionScale, Resolutionscale) == 0x000000, "Member 'V_GameInstanceWithSave_C_ApplyResolutionScale::Resolutionscale' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyResolutionScale, CallFunc_Conv_DoubleToString_ReturnValue) == 0x000008, "Member 'V_GameInstanceWithSave_C_ApplyResolutionScale::CallFunc_Conv_DoubleToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyResolutionScale, CallFunc_Concat_StrStr_ReturnValue) == 0x000018, "Member 'V_GameInstanceWithSave_C_ApplyResolutionScale::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ApplyShadowQuality
// 0x0050 (0x0050 - 0x0000)
struct V_GameInstanceWithSave_C_ApplyShadowQuality final
{
public:
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3575[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchString_CmpSuccess;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3576[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_ApplyShadowQuality) == 0x000008, "Wrong alignment on V_GameInstanceWithSave_C_ApplyShadowQuality");
static_assert(sizeof(V_GameInstanceWithSave_C_ApplyShadowQuality) == 0x000050, "Wrong size on V_GameInstanceWithSave_C_ApplyShadowQuality");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyShadowQuality, CallFunc_Concat_StrStr_ReturnValue) == 0x000000, "Member 'V_GameInstanceWithSave_C_ApplyShadowQuality::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyShadowQuality, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'V_GameInstanceWithSave_C_ApplyShadowQuality::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyShadowQuality, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000018, "Member 'V_GameInstanceWithSave_C_ApplyShadowQuality::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyShadowQuality, K2Node_SwitchString_CmpSuccess) == 0x000028, "Member 'V_GameInstanceWithSave_C_ApplyShadowQuality::K2Node_SwitchString_CmpSuccess' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyShadowQuality, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000030, "Member 'V_GameInstanceWithSave_C_ApplyShadowQuality::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyShadowQuality, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000040, "Member 'V_GameInstanceWithSave_C_ApplyShadowQuality::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ApplySharpen
// 0x0028 (0x0028 - 0x0000)
struct V_GameInstanceWithSave_C_ApplySharpen final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3577[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_DoubleToString_ReturnValue;          // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_ApplySharpen) == 0x000008, "Wrong alignment on V_GameInstanceWithSave_C_ApplySharpen");
static_assert(sizeof(V_GameInstanceWithSave_C_ApplySharpen) == 0x000028, "Wrong size on V_GameInstanceWithSave_C_ApplySharpen");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplySharpen, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'V_GameInstanceWithSave_C_ApplySharpen::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplySharpen, CallFunc_Conv_DoubleToString_ReturnValue) == 0x000008, "Member 'V_GameInstanceWithSave_C_ApplySharpen::CallFunc_Conv_DoubleToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplySharpen, CallFunc_Concat_StrStr_ReturnValue) == 0x000018, "Member 'V_GameInstanceWithSave_C_ApplySharpen::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ApplySSR
// 0x0002 (0x0002 - 0x0000)
struct V_GameInstanceWithSave_C_ApplySSR final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchString_CmpSuccess;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_ApplySSR) == 0x000001, "Wrong alignment on V_GameInstanceWithSave_C_ApplySSR");
static_assert(sizeof(V_GameInstanceWithSave_C_ApplySSR) == 0x000002, "Wrong size on V_GameInstanceWithSave_C_ApplySSR");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplySSR, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'V_GameInstanceWithSave_C_ApplySSR::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplySSR, K2Node_SwitchString_CmpSuccess) == 0x000001, "Member 'V_GameInstanceWithSave_C_ApplySSR::K2Node_SwitchString_CmpSuccess' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ApplyTextureQuality
// 0x0002 (0x0002 - 0x0000)
struct V_GameInstanceWithSave_C_ApplyTextureQuality final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchString_CmpSuccess;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_ApplyTextureQuality) == 0x000001, "Wrong alignment on V_GameInstanceWithSave_C_ApplyTextureQuality");
static_assert(sizeof(V_GameInstanceWithSave_C_ApplyTextureQuality) == 0x000002, "Wrong size on V_GameInstanceWithSave_C_ApplyTextureQuality");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyTextureQuality, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'V_GameInstanceWithSave_C_ApplyTextureQuality::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyTextureQuality, K2Node_SwitchString_CmpSuccess) == 0x000001, "Member 'V_GameInstanceWithSave_C_ApplyTextureQuality::K2Node_SwitchString_CmpSuccess' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ApplyVideoSettings
// 0x0010 (0x0010 - 0x0000)
struct V_GameInstanceWithSave_C_ApplyVideoSettings final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3578[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_ApplyVideoSettings) == 0x000008, "Wrong alignment on V_GameInstanceWithSave_C_ApplyVideoSettings");
static_assert(sizeof(V_GameInstanceWithSave_C_ApplyVideoSettings) == 0x000010, "Wrong size on V_GameInstanceWithSave_C_ApplyVideoSettings");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyVideoSettings, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'V_GameInstanceWithSave_C_ApplyVideoSettings::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyVideoSettings, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000008, "Member 'V_GameInstanceWithSave_C_ApplyVideoSettings::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ApplyViewDistance
// 0x0002 (0x0002 - 0x0000)
struct V_GameInstanceWithSave_C_ApplyViewDistance final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchString_CmpSuccess;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_ApplyViewDistance) == 0x000001, "Wrong alignment on V_GameInstanceWithSave_C_ApplyViewDistance");
static_assert(sizeof(V_GameInstanceWithSave_C_ApplyViewDistance) == 0x000002, "Wrong size on V_GameInstanceWithSave_C_ApplyViewDistance");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyViewDistance, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'V_GameInstanceWithSave_C_ApplyViewDistance::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyViewDistance, K2Node_SwitchString_CmpSuccess) == 0x000001, "Member 'V_GameInstanceWithSave_C_ApplyViewDistance::K2Node_SwitchString_CmpSuccess' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ApplyVSync
// 0x0020 (0x0020 - 0x0000)
struct V_GameInstanceWithSave_C_ApplyVSync final
{
public:
	class UGameUserSettings*                      CallFunc_GetGameUserSettings_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3579[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameUserSettings*                      CallFunc_GetGameUserSettings_ReturnValue_1;        // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchString_CmpSuccess;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_ApplyVSync) == 0x000008, "Wrong alignment on V_GameInstanceWithSave_C_ApplyVSync");
static_assert(sizeof(V_GameInstanceWithSave_C_ApplyVSync) == 0x000020, "Wrong size on V_GameInstanceWithSave_C_ApplyVSync");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyVSync, CallFunc_GetGameUserSettings_ReturnValue) == 0x000000, "Member 'V_GameInstanceWithSave_C_ApplyVSync::CallFunc_GetGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyVSync, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'V_GameInstanceWithSave_C_ApplyVSync::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyVSync, CallFunc_GetGameUserSettings_ReturnValue_1) == 0x000010, "Member 'V_GameInstanceWithSave_C_ApplyVSync::CallFunc_GetGameUserSettings_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ApplyVSync, K2Node_SwitchString_CmpSuccess) == 0x000018, "Member 'V_GameInstanceWithSave_C_ApplyVSync::K2Node_SwitchString_CmpSuccess' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ClearSaveNotif
// 0x0001 (0x0001 - 0x0000)
struct V_GameInstanceWithSave_C_ClearSaveNotif final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_ClearSaveNotif) == 0x000001, "Wrong alignment on V_GameInstanceWithSave_C_ClearSaveNotif");
static_assert(sizeof(V_GameInstanceWithSave_C_ClearSaveNotif) == 0x000001, "Wrong size on V_GameInstanceWithSave_C_ClearSaveNotif");
static_assert(offsetof(V_GameInstanceWithSave_C_ClearSaveNotif, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'V_GameInstanceWithSave_C_ClearSaveNotif::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.Compare Setting With Save
// 0x0078 (0x0078 - 0x0000)
struct V_GameInstanceWithSave_C_Compare_Setting_With_Save final
{
public:
	TArray<struct FS_SavedSetting>                SettingsArray;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 ID;                                                // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Same;                                              // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_357A[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UV_SaveGame_C*                          CallFunc_GetSaveGame_SaveGame;                     // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSettingFromArray_returnValue;          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_357B[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetSettingFromArray_Value;                // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_GameSave_C>       K2Node_DynamicCast_AsBPI_Game_Save;                // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSettingFromIdentifier_ReturnValue;     // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_357C[0x6];                                     // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetSettingFromIdentifier_Value;           // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_Compare_Setting_With_Save) == 0x000008, "Wrong alignment on V_GameInstanceWithSave_C_Compare_Setting_With_Save");
static_assert(sizeof(V_GameInstanceWithSave_C_Compare_Setting_With_Save) == 0x000078, "Wrong size on V_GameInstanceWithSave_C_Compare_Setting_With_Save");
static_assert(offsetof(V_GameInstanceWithSave_C_Compare_Setting_With_Save, SettingsArray) == 0x000000, "Member 'V_GameInstanceWithSave_C_Compare_Setting_With_Save::SettingsArray' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_Compare_Setting_With_Save, ID) == 0x000010, "Member 'V_GameInstanceWithSave_C_Compare_Setting_With_Save::ID' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_Compare_Setting_With_Save, Same) == 0x000020, "Member 'V_GameInstanceWithSave_C_Compare_Setting_With_Save::Same' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_Compare_Setting_With_Save, CallFunc_GetSaveGame_SaveGame) == 0x000028, "Member 'V_GameInstanceWithSave_C_Compare_Setting_With_Save::CallFunc_GetSaveGame_SaveGame' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_Compare_Setting_With_Save, CallFunc_GetSettingFromArray_returnValue) == 0x000030, "Member 'V_GameInstanceWithSave_C_Compare_Setting_With_Save::CallFunc_GetSettingFromArray_returnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_Compare_Setting_With_Save, CallFunc_GetSettingFromArray_Value) == 0x000038, "Member 'V_GameInstanceWithSave_C_Compare_Setting_With_Save::CallFunc_GetSettingFromArray_Value' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_Compare_Setting_With_Save, K2Node_DynamicCast_AsBPI_Game_Save) == 0x000048, "Member 'V_GameInstanceWithSave_C_Compare_Setting_With_Save::K2Node_DynamicCast_AsBPI_Game_Save' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_Compare_Setting_With_Save, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'V_GameInstanceWithSave_C_Compare_Setting_With_Save::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_Compare_Setting_With_Save, CallFunc_GetSettingFromIdentifier_ReturnValue) == 0x000059, "Member 'V_GameInstanceWithSave_C_Compare_Setting_With_Save::CallFunc_GetSettingFromIdentifier_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_Compare_Setting_With_Save, CallFunc_GetSettingFromIdentifier_Value) == 0x000060, "Member 'V_GameInstanceWithSave_C_Compare_Setting_With_Save::CallFunc_GetSettingFromIdentifier_Value' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_Compare_Setting_With_Save, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x000070, "Member 'V_GameInstanceWithSave_C_Compare_Setting_With_Save::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ExecuteUbergraph_V_GameInstanceWithSave
// 0x0120 (0x0120 - 0x0000)
struct V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_357D[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	double                                        K2Node_Event_Value;                                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_Event_Setting;                              // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	E_ApplySettingType                            K2Node_Event_Type_2;                               // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_357E[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_Event_Identifier_1;                         // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_Event_NewString;                            // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	E_ApplySettingType                            K2Node_Event_Type_1;                               // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_357F[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_Event_Identifier;                           // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Bool;                                 // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ApplySettingType                            K2Node_Event_Type;                                 // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SaveGameToSlot_ReturnValue;               // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3580[0x5];                                     // 0x0073(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_SaveNotif_C*                         CallFunc_Create_ReturnValue;                       // 0x0078(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_Event_ID;                                   // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_Event_NewValue;                             // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_InvertY;                              // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_InvertX;                              // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3581[0x6];                                     // 0x00A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_Delay;                                // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_Checkpoint                          K2Node_Event_CheckpointS;                          // 0x00B0(0x0018)(ZeroConstructor, HasGetValueTypeHash)
	struct FS_Checkpoint                          K2Node_MakeStruct_S_Checkpoint;                    // 0x00C8(0x0018)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3582[0x4];                                     // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetProjectDirectory_ReturnValue;          // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TArray<uint8>                                 CallFunc_ReadFileToBytes_ReturnValue;              // 0x0108(0x0010)(ReferenceParm)
	bool                                          CallFunc_FileWrite_ReturnValue;                    // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3583[0x3];                                     // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RetriggerableDelay_Duration_ImplicitCast; // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave) == 0x000008, "Wrong alignment on V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave");
static_assert(sizeof(V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave) == 0x000120, "Wrong size on V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave");
static_assert(offsetof(V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave, EntryPoint) == 0x000000, "Member 'V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave::EntryPoint' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave, CallFunc_Conv_IntToString_ReturnValue) == 0x000008, "Member 'V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave, K2Node_Event_Value) == 0x000018, "Member 'V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave::K2Node_Event_Value' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave, K2Node_Event_Setting) == 0x000020, "Member 'V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave::K2Node_Event_Setting' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave, K2Node_Event_Type_2) == 0x000030, "Member 'V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave::K2Node_Event_Type_2' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave, K2Node_Event_Identifier_1) == 0x000038, "Member 'V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave::K2Node_Event_Identifier_1' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave, K2Node_Event_NewString) == 0x000048, "Member 'V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave::K2Node_Event_NewString' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave, K2Node_Event_Type_1) == 0x000058, "Member 'V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave::K2Node_Event_Type_1' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave, K2Node_Event_Identifier) == 0x000060, "Member 'V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave::K2Node_Event_Identifier' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave, K2Node_Event_Bool) == 0x000070, "Member 'V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave::K2Node_Event_Bool' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave, K2Node_Event_Type) == 0x000071, "Member 'V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave::K2Node_Event_Type' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave, CallFunc_SaveGameToSlot_ReturnValue) == 0x000072, "Member 'V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave::CallFunc_SaveGameToSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave, CallFunc_Create_ReturnValue) == 0x000078, "Member 'V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave, K2Node_Event_ID) == 0x000080, "Member 'V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave::K2Node_Event_ID' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave, K2Node_Event_NewValue) == 0x000090, "Member 'V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave::K2Node_Event_NewValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave, K2Node_Event_InvertY) == 0x0000A0, "Member 'V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave::K2Node_Event_InvertY' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave, K2Node_Event_InvertX) == 0x0000A1, "Member 'V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave::K2Node_Event_InvertX' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave, K2Node_Event_Delay) == 0x0000A8, "Member 'V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave::K2Node_Event_Delay' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave, K2Node_Event_CheckpointS) == 0x0000B0, "Member 'V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave::K2Node_Event_CheckpointS' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave, K2Node_MakeStruct_S_Checkpoint) == 0x0000C8, "Member 'V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave::K2Node_MakeStruct_S_Checkpoint' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave, CallFunc_Array_AddUnique_ReturnValue) == 0x0000E0, "Member 'V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave, CallFunc_GetProjectDirectory_ReturnValue) == 0x0000E8, "Member 'V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave::CallFunc_GetProjectDirectory_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave, CallFunc_Concat_StrStr_ReturnValue) == 0x0000F8, "Member 'V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave, CallFunc_ReadFileToBytes_ReturnValue) == 0x000108, "Member 'V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave::CallFunc_ReadFileToBytes_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave, CallFunc_FileWrite_ReturnValue) == 0x000118, "Member 'V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave::CallFunc_FileWrite_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave, CallFunc_RetriggerableDelay_Duration_ImplicitCast) == 0x00011C, "Member 'V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave::CallFunc_RetriggerableDelay_Duration_ImplicitCast' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.GetCameraSettings
// 0x0018 (0x0018 - 0x0000)
struct V_GameInstanceWithSave_C_GetCameraSettings final
{
public:
	bool                                          Param_InvertX;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_InvertY;                                     // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3584[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Param_X_Sensitivity;                               // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Param_Y_Sensitivity;                               // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_GetCameraSettings) == 0x000008, "Wrong alignment on V_GameInstanceWithSave_C_GetCameraSettings");
static_assert(sizeof(V_GameInstanceWithSave_C_GetCameraSettings) == 0x000018, "Wrong size on V_GameInstanceWithSave_C_GetCameraSettings");
static_assert(offsetof(V_GameInstanceWithSave_C_GetCameraSettings, Param_InvertX) == 0x000000, "Member 'V_GameInstanceWithSave_C_GetCameraSettings::Param_InvertX' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_GetCameraSettings, Param_InvertY) == 0x000001, "Member 'V_GameInstanceWithSave_C_GetCameraSettings::Param_InvertY' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_GetCameraSettings, Param_X_Sensitivity) == 0x000008, "Member 'V_GameInstanceWithSave_C_GetCameraSettings::Param_X_Sensitivity' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_GetCameraSettings, Param_Y_Sensitivity) == 0x000010, "Member 'V_GameInstanceWithSave_C_GetCameraSettings::Param_Y_Sensitivity' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.GetCheckpoints
// 0x0010 (0x0010 - 0x0000)
struct V_GameInstanceWithSave_C_GetCheckpoints final
{
public:
	TArray<struct FS_Checkpoint>                  Checkpoints;                                       // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(V_GameInstanceWithSave_C_GetCheckpoints) == 0x000008, "Wrong alignment on V_GameInstanceWithSave_C_GetCheckpoints");
static_assert(sizeof(V_GameInstanceWithSave_C_GetCheckpoints) == 0x000010, "Wrong size on V_GameInstanceWithSave_C_GetCheckpoints");
static_assert(offsetof(V_GameInstanceWithSave_C_GetCheckpoints, Checkpoints) == 0x000000, "Member 'V_GameInstanceWithSave_C_GetCheckpoints::Checkpoints' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.GetPushToTalk
// 0x0002 (0x0002 - 0x0000)
struct V_GameInstanceWithSave_C_GetPushToTalk final
{
public:
	bool                                          PTT;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_GetPushToTalk) == 0x000001, "Wrong alignment on V_GameInstanceWithSave_C_GetPushToTalk");
static_assert(sizeof(V_GameInstanceWithSave_C_GetPushToTalk) == 0x000002, "Wrong size on V_GameInstanceWithSave_C_GetPushToTalk");
static_assert(offsetof(V_GameInstanceWithSave_C_GetPushToTalk, PTT) == 0x000000, "Member 'V_GameInstanceWithSave_C_GetPushToTalk::PTT' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_GetPushToTalk, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x000001, "Member 'V_GameInstanceWithSave_C_GetPushToTalk::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.GetSaveGameObject
// 0x0008 (0x0008 - 0x0000)
struct V_GameInstanceWithSave_C_GetSaveGameObject final
{
public:
	class UV_SaveGame_C*                          SaveGame;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_GetSaveGameObject) == 0x000008, "Wrong alignment on V_GameInstanceWithSave_C_GetSaveGameObject");
static_assert(sizeof(V_GameInstanceWithSave_C_GetSaveGameObject) == 0x000008, "Wrong size on V_GameInstanceWithSave_C_GetSaveGameObject");
static_assert(offsetof(V_GameInstanceWithSave_C_GetSaveGameObject, SaveGame) == 0x000000, "Member 'V_GameInstanceWithSave_C_GetSaveGameObject::SaveGame' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.GetShowDebug
// 0x0001 (0x0001 - 0x0000)
struct V_GameInstanceWithSave_C_GetShowDebug final
{
public:
	bool                                          Debug;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_GetShowDebug) == 0x000001, "Wrong alignment on V_GameInstanceWithSave_C_GetShowDebug");
static_assert(sizeof(V_GameInstanceWithSave_C_GetShowDebug) == 0x000001, "Wrong size on V_GameInstanceWithSave_C_GetShowDebug");
static_assert(offsetof(V_GameInstanceWithSave_C_GetShowDebug, Debug) == 0x000000, "Member 'V_GameInstanceWithSave_C_GetShowDebug::Debug' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.GetTestControl
// 0x0001 (0x0001 - 0x0000)
struct V_GameInstanceWithSave_C_GetTestControl final
{
public:
	bool                                          TestControl;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_GetTestControl) == 0x000001, "Wrong alignment on V_GameInstanceWithSave_C_GetTestControl");
static_assert(sizeof(V_GameInstanceWithSave_C_GetTestControl) == 0x000001, "Wrong size on V_GameInstanceWithSave_C_GetTestControl");
static_assert(offsetof(V_GameInstanceWithSave_C_GetTestControl, TestControl) == 0x000000, "Member 'V_GameInstanceWithSave_C_GetTestControl::TestControl' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.GetTestPlayers
// 0x0004 (0x0004 - 0x0000)
struct V_GameInstanceWithSave_C_GetTestPlayers final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_GetTestPlayers) == 0x000004, "Wrong alignment on V_GameInstanceWithSave_C_GetTestPlayers");
static_assert(sizeof(V_GameInstanceWithSave_C_GetTestPlayers) == 0x000004, "Wrong size on V_GameInstanceWithSave_C_GetTestPlayers");
static_assert(offsetof(V_GameInstanceWithSave_C_GetTestPlayers, Count) == 0x000000, "Member 'V_GameInstanceWithSave_C_GetTestPlayers::Count' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.InitSaveGameObject
// 0x0028 (0x0028 - 0x0000)
struct V_GameInstanceWithSave_C_InitSaveGameObject final
{
public:
	class UV_SaveGame_C*                          CallFunc_CreateSaveGameObject_ReturnValue;         // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USaveGame*                              CallFunc_LoadGameFromSlot_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3585[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UV_SaveGame_C*                          K2Node_DynamicCast_AsV_Save_Game;                  // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_InitSaveGameObject) == 0x000008, "Wrong alignment on V_GameInstanceWithSave_C_InitSaveGameObject");
static_assert(sizeof(V_GameInstanceWithSave_C_InitSaveGameObject) == 0x000028, "Wrong size on V_GameInstanceWithSave_C_InitSaveGameObject");
static_assert(offsetof(V_GameInstanceWithSave_C_InitSaveGameObject, CallFunc_CreateSaveGameObject_ReturnValue) == 0x000000, "Member 'V_GameInstanceWithSave_C_InitSaveGameObject::CallFunc_CreateSaveGameObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_InitSaveGameObject, CallFunc_LoadGameFromSlot_ReturnValue) == 0x000008, "Member 'V_GameInstanceWithSave_C_InitSaveGameObject::CallFunc_LoadGameFromSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_InitSaveGameObject, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'V_GameInstanceWithSave_C_InitSaveGameObject::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_InitSaveGameObject, K2Node_DynamicCast_AsV_Save_Game) == 0x000018, "Member 'V_GameInstanceWithSave_C_InitSaveGameObject::K2Node_DynamicCast_AsV_Save_Game' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_InitSaveGameObject, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'V_GameInstanceWithSave_C_InitSaveGameObject::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.OnUpdateBoolSetting
// 0x0048 (0x0048 - 0x0000)
struct V_GameInstanceWithSave_C_OnUpdateBoolSetting final
{
public:
	class FString                                 Identifier;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          NewBool;                                           // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ApplySettingType                            SetType;                                           // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3586[0x5];                                     // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue;            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_OnUpdateBoolSetting) == 0x000008, "Wrong alignment on V_GameInstanceWithSave_C_OnUpdateBoolSetting");
static_assert(sizeof(V_GameInstanceWithSave_C_OnUpdateBoolSetting) == 0x000048, "Wrong size on V_GameInstanceWithSave_C_OnUpdateBoolSetting");
static_assert(offsetof(V_GameInstanceWithSave_C_OnUpdateBoolSetting, Identifier) == 0x000000, "Member 'V_GameInstanceWithSave_C_OnUpdateBoolSetting::Identifier' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_OnUpdateBoolSetting, NewBool) == 0x000010, "Member 'V_GameInstanceWithSave_C_OnUpdateBoolSetting::NewBool' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_OnUpdateBoolSetting, SetType) == 0x000011, "Member 'V_GameInstanceWithSave_C_OnUpdateBoolSetting::SetType' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_OnUpdateBoolSetting, K2Node_SwitchEnum_CmpSuccess) == 0x000012, "Member 'V_GameInstanceWithSave_C_OnUpdateBoolSetting::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_OnUpdateBoolSetting, CallFunc_Concat_StrStr_ReturnValue) == 0x000018, "Member 'V_GameInstanceWithSave_C_OnUpdateBoolSetting::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_OnUpdateBoolSetting, CallFunc_Conv_BoolToString_ReturnValue) == 0x000028, "Member 'V_GameInstanceWithSave_C_OnUpdateBoolSetting::CallFunc_Conv_BoolToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_OnUpdateBoolSetting, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000038, "Member 'V_GameInstanceWithSave_C_OnUpdateBoolSetting::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.OnUpdateFloatSetting
// 0x0020 (0x0020 - 0x0000)
struct V_GameInstanceWithSave_C_OnUpdateFloatSetting final
{
public:
	double                                        NewFloat;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Selection;                                         // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	E_ApplySettingType                            SetType;                                           // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_OnUpdateFloatSetting) == 0x000008, "Wrong alignment on V_GameInstanceWithSave_C_OnUpdateFloatSetting");
static_assert(sizeof(V_GameInstanceWithSave_C_OnUpdateFloatSetting) == 0x000020, "Wrong size on V_GameInstanceWithSave_C_OnUpdateFloatSetting");
static_assert(offsetof(V_GameInstanceWithSave_C_OnUpdateFloatSetting, NewFloat) == 0x000000, "Member 'V_GameInstanceWithSave_C_OnUpdateFloatSetting::NewFloat' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_OnUpdateFloatSetting, Selection) == 0x000008, "Member 'V_GameInstanceWithSave_C_OnUpdateFloatSetting::Selection' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_OnUpdateFloatSetting, SetType) == 0x000018, "Member 'V_GameInstanceWithSave_C_OnUpdateFloatSetting::SetType' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.OnUpdateStringSetting
// 0x0048 (0x0048 - 0x0000)
struct V_GameInstanceWithSave_C_OnUpdateStringSetting final
{
public:
	class FString                                 Identifier;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 NewString;                                         // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	E_ApplySettingType                            SetType;                                           // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3587[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_OnUpdateStringSetting) == 0x000008, "Wrong alignment on V_GameInstanceWithSave_C_OnUpdateStringSetting");
static_assert(sizeof(V_GameInstanceWithSave_C_OnUpdateStringSetting) == 0x000048, "Wrong size on V_GameInstanceWithSave_C_OnUpdateStringSetting");
static_assert(offsetof(V_GameInstanceWithSave_C_OnUpdateStringSetting, Identifier) == 0x000000, "Member 'V_GameInstanceWithSave_C_OnUpdateStringSetting::Identifier' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_OnUpdateStringSetting, NewString) == 0x000010, "Member 'V_GameInstanceWithSave_C_OnUpdateStringSetting::NewString' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_OnUpdateStringSetting, SetType) == 0x000020, "Member 'V_GameInstanceWithSave_C_OnUpdateStringSetting::SetType' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_OnUpdateStringSetting, K2Node_SwitchEnum_CmpSuccess) == 0x000021, "Member 'V_GameInstanceWithSave_C_OnUpdateStringSetting::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_OnUpdateStringSetting, CallFunc_Concat_StrStr_ReturnValue) == 0x000028, "Member 'V_GameInstanceWithSave_C_OnUpdateStringSetting::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_OnUpdateStringSetting, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000038, "Member 'V_GameInstanceWithSave_C_OnUpdateStringSetting::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.Reset Resolution
// 0x0008 (0x0008 - 0x0000)
struct V_GameInstanceWithSave_C_Reset_Resolution final
{
public:
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_Reset_Resolution) == 0x000008, "Wrong alignment on V_GameInstanceWithSave_C_Reset_Resolution");
static_assert(sizeof(V_GameInstanceWithSave_C_Reset_Resolution) == 0x000008, "Wrong size on V_GameInstanceWithSave_C_Reset_Resolution");
static_assert(offsetof(V_GameInstanceWithSave_C_Reset_Resolution, CallFunc_GetObjectClass_ReturnValue) == 0x000000, "Member 'V_GameInstanceWithSave_C_Reset_Resolution::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ResetSavedSettings
// 0x0008 (0x0008 - 0x0000)
struct V_GameInstanceWithSave_C_ResetSavedSettings final
{
public:
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_ResetSavedSettings) == 0x000008, "Wrong alignment on V_GameInstanceWithSave_C_ResetSavedSettings");
static_assert(sizeof(V_GameInstanceWithSave_C_ResetSavedSettings) == 0x000008, "Wrong size on V_GameInstanceWithSave_C_ResetSavedSettings");
static_assert(offsetof(V_GameInstanceWithSave_C_ResetSavedSettings, CallFunc_GetObjectClass_ReturnValue) == 0x000000, "Member 'V_GameInstanceWithSave_C_ResetSavedSettings::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ResetSavedSettings_0
// 0x0008 (0x0008 - 0x0000)
struct V_GameInstanceWithSave_C_ResetSavedSettings_0 final
{
public:
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_ResetSavedSettings_0) == 0x000008, "Wrong alignment on V_GameInstanceWithSave_C_ResetSavedSettings_0");
static_assert(sizeof(V_GameInstanceWithSave_C_ResetSavedSettings_0) == 0x000008, "Wrong size on V_GameInstanceWithSave_C_ResetSavedSettings_0");
static_assert(offsetof(V_GameInstanceWithSave_C_ResetSavedSettings_0, CallFunc_GetObjectClass_ReturnValue) == 0x000000, "Member 'V_GameInstanceWithSave_C_ResetSavedSettings_0::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ResetSettingsByCategory
// 0x0040 (0x0040 - 0x0000)
struct V_GameInstanceWithSave_C_ResetSettingsByCategory final
{
public:
	E_SettingCategory                             Category;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3588[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3589[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_SavedSetting                        CallFunc_Array_Get_Item;                           // 0x0018(0x0020)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SettingCategory                             CallFunc_GetSettingCategory_Category;              // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_ResetSettingsByCategory) == 0x000008, "Wrong alignment on V_GameInstanceWithSave_C_ResetSettingsByCategory");
static_assert(sizeof(V_GameInstanceWithSave_C_ResetSettingsByCategory) == 0x000040, "Wrong size on V_GameInstanceWithSave_C_ResetSettingsByCategory");
static_assert(offsetof(V_GameInstanceWithSave_C_ResetSettingsByCategory, Category) == 0x000000, "Member 'V_GameInstanceWithSave_C_ResetSettingsByCategory::Category' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ResetSettingsByCategory, Temp_int_Array_Index_Variable) == 0x000004, "Member 'V_GameInstanceWithSave_C_ResetSettingsByCategory::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ResetSettingsByCategory, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'V_GameInstanceWithSave_C_ResetSettingsByCategory::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ResetSettingsByCategory, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'V_GameInstanceWithSave_C_ResetSettingsByCategory::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ResetSettingsByCategory, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'V_GameInstanceWithSave_C_ResetSettingsByCategory::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ResetSettingsByCategory, CallFunc_Array_Get_Item) == 0x000018, "Member 'V_GameInstanceWithSave_C_ResetSettingsByCategory::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ResetSettingsByCategory, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'V_GameInstanceWithSave_C_ResetSettingsByCategory::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ResetSettingsByCategory, CallFunc_GetSettingCategory_Category) == 0x000039, "Member 'V_GameInstanceWithSave_C_ResetSettingsByCategory::CallFunc_GetSettingCategory_Category' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ResetSettingsByCategory, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00003A, "Member 'V_GameInstanceWithSave_C_ResetSettingsByCategory::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.SaveAfterRetrigerableDelay
// 0x0008 (0x0008 - 0x0000)
struct V_GameInstanceWithSave_C_SaveAfterRetrigerableDelay final
{
public:
	double                                        Delay;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_SaveAfterRetrigerableDelay) == 0x000008, "Wrong alignment on V_GameInstanceWithSave_C_SaveAfterRetrigerableDelay");
static_assert(sizeof(V_GameInstanceWithSave_C_SaveAfterRetrigerableDelay) == 0x000008, "Wrong size on V_GameInstanceWithSave_C_SaveAfterRetrigerableDelay");
static_assert(offsetof(V_GameInstanceWithSave_C_SaveAfterRetrigerableDelay, Delay) == 0x000000, "Member 'V_GameInstanceWithSave_C_SaveAfterRetrigerableDelay::Delay' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.SaveCheckpoint
// 0x0018 (0x0018 - 0x0000)
struct V_GameInstanceWithSave_C_SaveCheckpoint final
{
public:
	struct FS_Checkpoint                          Checkpoints;                                       // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_SaveCheckpoint) == 0x000008, "Wrong alignment on V_GameInstanceWithSave_C_SaveCheckpoint");
static_assert(sizeof(V_GameInstanceWithSave_C_SaveCheckpoint) == 0x000018, "Wrong size on V_GameInstanceWithSave_C_SaveCheckpoint");
static_assert(offsetof(V_GameInstanceWithSave_C_SaveCheckpoint, Checkpoints) == 0x000000, "Member 'V_GameInstanceWithSave_C_SaveCheckpoint::Checkpoints' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.SetCameraInvertX
// 0x0001 (0x0001 - 0x0000)
struct V_GameInstanceWithSave_C_SetCameraInvertX final
{
public:
	bool                                          Param_InvertX;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_SetCameraInvertX) == 0x000001, "Wrong alignment on V_GameInstanceWithSave_C_SetCameraInvertX");
static_assert(sizeof(V_GameInstanceWithSave_C_SetCameraInvertX) == 0x000001, "Wrong size on V_GameInstanceWithSave_C_SetCameraInvertX");
static_assert(offsetof(V_GameInstanceWithSave_C_SetCameraInvertX, Param_InvertX) == 0x000000, "Member 'V_GameInstanceWithSave_C_SetCameraInvertX::Param_InvertX' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.SetCameraInvertY
// 0x0001 (0x0001 - 0x0000)
struct V_GameInstanceWithSave_C_SetCameraInvertY final
{
public:
	bool                                          Param_InvertY;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_SetCameraInvertY) == 0x000001, "Wrong alignment on V_GameInstanceWithSave_C_SetCameraInvertY");
static_assert(sizeof(V_GameInstanceWithSave_C_SetCameraInvertY) == 0x000001, "Wrong size on V_GameInstanceWithSave_C_SetCameraInvertY");
static_assert(offsetof(V_GameInstanceWithSave_C_SetCameraInvertY, Param_InvertY) == 0x000000, "Member 'V_GameInstanceWithSave_C_SetCameraInvertY::Param_InvertY' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.SetResolutionScale
// 0x0010 (0x0010 - 0x0000)
struct V_GameInstanceWithSave_C_SetResolutionScale final
{
public:
	double                                        NewValue;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ApplySettingType                            SetType;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_SetResolutionScale) == 0x000008, "Wrong alignment on V_GameInstanceWithSave_C_SetResolutionScale");
static_assert(sizeof(V_GameInstanceWithSave_C_SetResolutionScale) == 0x000010, "Wrong size on V_GameInstanceWithSave_C_SetResolutionScale");
static_assert(offsetof(V_GameInstanceWithSave_C_SetResolutionScale, NewValue) == 0x000000, "Member 'V_GameInstanceWithSave_C_SetResolutionScale::NewValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_SetResolutionScale, SetType) == 0x000008, "Member 'V_GameInstanceWithSave_C_SetResolutionScale::SetType' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ShowResolutionConfirmWidget
// 0x0010 (0x0010 - 0x0000)
struct V_GameInstanceWithSave_C_ShowResolutionConfirmWidget final
{
public:
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UW_ResolutionConfirmation_C*            CallFunc_Create_ReturnValue;                       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_ShowResolutionConfirmWidget) == 0x000008, "Wrong alignment on V_GameInstanceWithSave_C_ShowResolutionConfirmWidget");
static_assert(sizeof(V_GameInstanceWithSave_C_ShowResolutionConfirmWidget) == 0x000010, "Wrong size on V_GameInstanceWithSave_C_ShowResolutionConfirmWidget");
static_assert(offsetof(V_GameInstanceWithSave_C_ShowResolutionConfirmWidget, CallFunc_GetPlayerController_ReturnValue) == 0x000000, "Member 'V_GameInstanceWithSave_C_ShowResolutionConfirmWidget::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_ShowResolutionConfirmWidget, CallFunc_Create_ReturnValue) == 0x000008, "Member 'V_GameInstanceWithSave_C_ShowResolutionConfirmWidget::CallFunc_Create_ReturnValue' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.Update Float
// 0x0028 (0x0028 - 0x0000)
struct V_GameInstanceWithSave_C_Update_Float final
{
public:
	double                                        Float;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NewValue;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DefaultValue;                                      // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PreviousValue;                                     // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ApplySettingType                            SetType;                                           // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_Update_Float) == 0x000008, "Wrong alignment on V_GameInstanceWithSave_C_Update_Float");
static_assert(sizeof(V_GameInstanceWithSave_C_Update_Float) == 0x000028, "Wrong size on V_GameInstanceWithSave_C_Update_Float");
static_assert(offsetof(V_GameInstanceWithSave_C_Update_Float, Float) == 0x000000, "Member 'V_GameInstanceWithSave_C_Update_Float::Float' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_Update_Float, NewValue) == 0x000008, "Member 'V_GameInstanceWithSave_C_Update_Float::NewValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_Update_Float, DefaultValue) == 0x000010, "Member 'V_GameInstanceWithSave_C_Update_Float::DefaultValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_Update_Float, PreviousValue) == 0x000018, "Member 'V_GameInstanceWithSave_C_Update_Float::PreviousValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_Update_Float, SetType) == 0x000020, "Member 'V_GameInstanceWithSave_C_Update_Float::SetType' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_Update_Float, K2Node_SwitchEnum_CmpSuccess) == 0x000021, "Member 'V_GameInstanceWithSave_C_Update_Float::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.UpdateBool
// 0x0003 (0x0003 - 0x0000)
struct V_GameInstanceWithSave_C_UpdateBool final
{
public:
	bool                                          Bool;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewValue;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_UpdateBool) == 0x000001, "Wrong alignment on V_GameInstanceWithSave_C_UpdateBool");
static_assert(sizeof(V_GameInstanceWithSave_C_UpdateBool) == 0x000003, "Wrong size on V_GameInstanceWithSave_C_UpdateBool");
static_assert(offsetof(V_GameInstanceWithSave_C_UpdateBool, Bool) == 0x000000, "Member 'V_GameInstanceWithSave_C_UpdateBool::Bool' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_UpdateBool, NewValue) == 0x000001, "Member 'V_GameInstanceWithSave_C_UpdateBool::NewValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_UpdateBool, K2Node_SwitchEnum_CmpSuccess) == 0x000002, "Member 'V_GameInstanceWithSave_C_UpdateBool::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.UpdateBoolSetting
// 0x0018 (0x0018 - 0x0000)
struct V_GameInstanceWithSave_C_UpdateBoolSetting final
{
public:
	class FString                                 Identifier;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Bool;                                              // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ApplySettingType                            Type;                                              // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_UpdateBoolSetting) == 0x000008, "Wrong alignment on V_GameInstanceWithSave_C_UpdateBoolSetting");
static_assert(sizeof(V_GameInstanceWithSave_C_UpdateBoolSetting) == 0x000018, "Wrong size on V_GameInstanceWithSave_C_UpdateBoolSetting");
static_assert(offsetof(V_GameInstanceWithSave_C_UpdateBoolSetting, Identifier) == 0x000000, "Member 'V_GameInstanceWithSave_C_UpdateBoolSetting::Identifier' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_UpdateBoolSetting, Bool) == 0x000010, "Member 'V_GameInstanceWithSave_C_UpdateBoolSetting::Bool' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_UpdateBoolSetting, Type) == 0x000011, "Member 'V_GameInstanceWithSave_C_UpdateBoolSetting::Type' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.UpdateFloatSetting
// 0x0020 (0x0020 - 0x0000)
struct V_GameInstanceWithSave_C_UpdateFloatSetting final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Setting;                                           // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	E_ApplySettingType                            Type;                                              // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_UpdateFloatSetting) == 0x000008, "Wrong alignment on V_GameInstanceWithSave_C_UpdateFloatSetting");
static_assert(sizeof(V_GameInstanceWithSave_C_UpdateFloatSetting) == 0x000020, "Wrong size on V_GameInstanceWithSave_C_UpdateFloatSetting");
static_assert(offsetof(V_GameInstanceWithSave_C_UpdateFloatSetting, Value) == 0x000000, "Member 'V_GameInstanceWithSave_C_UpdateFloatSetting::Value' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_UpdateFloatSetting, Setting) == 0x000008, "Member 'V_GameInstanceWithSave_C_UpdateFloatSetting::Setting' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_UpdateFloatSetting, Type) == 0x000018, "Member 'V_GameInstanceWithSave_C_UpdateFloatSetting::Type' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.UpdateFoliageDensity
// 0x0028 (0x0028 - 0x0000)
struct V_GameInstanceWithSave_C_UpdateFoliageDensity final
{
public:
	double                                        Resolutionscale;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_DoubleToString_ReturnValue;          // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_UpdateFoliageDensity) == 0x000008, "Wrong alignment on V_GameInstanceWithSave_C_UpdateFoliageDensity");
static_assert(sizeof(V_GameInstanceWithSave_C_UpdateFoliageDensity) == 0x000028, "Wrong size on V_GameInstanceWithSave_C_UpdateFoliageDensity");
static_assert(offsetof(V_GameInstanceWithSave_C_UpdateFoliageDensity, Resolutionscale) == 0x000000, "Member 'V_GameInstanceWithSave_C_UpdateFoliageDensity::Resolutionscale' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_UpdateFoliageDensity, CallFunc_Conv_DoubleToString_ReturnValue) == 0x000008, "Member 'V_GameInstanceWithSave_C_UpdateFoliageDensity::CallFunc_Conv_DoubleToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_UpdateFoliageDensity, CallFunc_Concat_StrStr_ReturnValue) == 0x000018, "Member 'V_GameInstanceWithSave_C_UpdateFoliageDensity::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.UpdateSetting
// 0x0020 (0x0020 - 0x0000)
struct V_GameInstanceWithSave_C_UpdateSetting final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 NewValue;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_UpdateSetting) == 0x000008, "Wrong alignment on V_GameInstanceWithSave_C_UpdateSetting");
static_assert(sizeof(V_GameInstanceWithSave_C_UpdateSetting) == 0x000020, "Wrong size on V_GameInstanceWithSave_C_UpdateSetting");
static_assert(offsetof(V_GameInstanceWithSave_C_UpdateSetting, ID) == 0x000000, "Member 'V_GameInstanceWithSave_C_UpdateSetting::ID' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_UpdateSetting, NewValue) == 0x000010, "Member 'V_GameInstanceWithSave_C_UpdateSetting::NewValue' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.UpdateSettingByIdentifier
// 0x0020 (0x0020 - 0x0000)
struct V_GameInstanceWithSave_C_UpdateSettingByIdentifier final
{
public:
	class FString                                 Identifier;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 NewValue;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_UpdateSettingByIdentifier) == 0x000008, "Wrong alignment on V_GameInstanceWithSave_C_UpdateSettingByIdentifier");
static_assert(sizeof(V_GameInstanceWithSave_C_UpdateSettingByIdentifier) == 0x000020, "Wrong size on V_GameInstanceWithSave_C_UpdateSettingByIdentifier");
static_assert(offsetof(V_GameInstanceWithSave_C_UpdateSettingByIdentifier, Identifier) == 0x000000, "Member 'V_GameInstanceWithSave_C_UpdateSettingByIdentifier::Identifier' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_UpdateSettingByIdentifier, NewValue) == 0x000010, "Member 'V_GameInstanceWithSave_C_UpdateSettingByIdentifier::NewValue' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.UpdateString
// 0x0028 (0x0028 - 0x0000)
struct V_GameInstanceWithSave_C_UpdateString final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash)
	class FString                                 NewValue;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	E_ApplySettingType                            Selection;                                         // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_UpdateString) == 0x000008, "Wrong alignment on V_GameInstanceWithSave_C_UpdateString");
static_assert(sizeof(V_GameInstanceWithSave_C_UpdateString) == 0x000028, "Wrong size on V_GameInstanceWithSave_C_UpdateString");
static_assert(offsetof(V_GameInstanceWithSave_C_UpdateString, String) == 0x000000, "Member 'V_GameInstanceWithSave_C_UpdateString::String' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_UpdateString, NewValue) == 0x000010, "Member 'V_GameInstanceWithSave_C_UpdateString::NewValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_UpdateString, Selection) == 0x000020, "Member 'V_GameInstanceWithSave_C_UpdateString::Selection' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_UpdateString, K2Node_SwitchEnum_CmpSuccess) == 0x000021, "Member 'V_GameInstanceWithSave_C_UpdateString::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.UpdateStringSetting
// 0x0028 (0x0028 - 0x0000)
struct V_GameInstanceWithSave_C_UpdateStringSetting final
{
public:
	class FString                                 Identifier;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 NewString;                                         // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	E_ApplySettingType                            Type;                                              // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_UpdateStringSetting) == 0x000008, "Wrong alignment on V_GameInstanceWithSave_C_UpdateStringSetting");
static_assert(sizeof(V_GameInstanceWithSave_C_UpdateStringSetting) == 0x000028, "Wrong size on V_GameInstanceWithSave_C_UpdateStringSetting");
static_assert(offsetof(V_GameInstanceWithSave_C_UpdateStringSetting, Identifier) == 0x000000, "Member 'V_GameInstanceWithSave_C_UpdateStringSetting::Identifier' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_UpdateStringSetting, NewString) == 0x000010, "Member 'V_GameInstanceWithSave_C_UpdateStringSetting::NewString' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_UpdateStringSetting, Type) == 0x000020, "Member 'V_GameInstanceWithSave_C_UpdateStringSetting::Type' has a wrong offset!");

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.UpdateVolume
// 0x0030 (0x0030 - 0x0000)
struct V_GameInstanceWithSave_C_UpdateVolume final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundClass*                            InSoundClass;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetSoundMixClassOverride_Volume_ImplicitCast; // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(V_GameInstanceWithSave_C_UpdateVolume) == 0x000008, "Wrong alignment on V_GameInstanceWithSave_C_UpdateVolume");
static_assert(sizeof(V_GameInstanceWithSave_C_UpdateVolume) == 0x000030, "Wrong size on V_GameInstanceWithSave_C_UpdateVolume");
static_assert(offsetof(V_GameInstanceWithSave_C_UpdateVolume, Value) == 0x000000, "Member 'V_GameInstanceWithSave_C_UpdateVolume::Value' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_UpdateVolume, InSoundClass) == 0x000008, "Member 'V_GameInstanceWithSave_C_UpdateVolume::InSoundClass' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_UpdateVolume, CallFunc_GetDisplayName_ReturnValue) == 0x000010, "Member 'V_GameInstanceWithSave_C_UpdateVolume::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_UpdateVolume, CallFunc_MapRangeClamped_ReturnValue) == 0x000020, "Member 'V_GameInstanceWithSave_C_UpdateVolume::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(V_GameInstanceWithSave_C_UpdateVolume, CallFunc_SetSoundMixClassOverride_Volume_ImplicitCast) == 0x000028, "Member 'V_GameInstanceWithSave_C_UpdateVolume::CallFunc_SetSoundMixClassOverride_Volume_ImplicitCast' has a wrong offset!");

}


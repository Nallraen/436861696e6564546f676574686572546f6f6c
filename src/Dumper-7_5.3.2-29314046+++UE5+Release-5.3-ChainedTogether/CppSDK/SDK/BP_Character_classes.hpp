#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Character

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ALS_RotationMode_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ALS_MovementState_structs.hpp"
#include "Mantle_Asset_structs.hpp"
#include "ALS_Gait_structs.hpp"
#include "ALS_Stance_structs.hpp"
#include "Mantle_TraceSettings_structs.hpp"
#include "ALS_ComponentAndTransform_structs.hpp"
#include "ALS_ViewMode_structs.hpp"
#include "S_LocationAtTime_structs.hpp"
#include "ALS_MovementAction_structs.hpp"
#include "MovementSettings_structs.hpp"
#include "Mantle_Params_structs.hpp"
#include "ALS_OverlayState_structs.hpp"
#include "E_ChoosenChar_structs.hpp"
#include "MantleType_structs.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Character.BP_Character_C
// 0x0BA0 (0x0EC0 - 0x0320)
class ABP_Character_C : public APawn
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0320(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        StuckBegin;                                        // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        StuckEnd;                                          // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Wings;                                             // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Aureole;                                           // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   MaillonFix;                                        // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow4;                                            // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        FallWindSound;                                     // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    Camera_SpringArm;                                  // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        BalancierArrowX;                                   // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        BalancierArrowZ;                                   // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SkeletalMeshSpringArm;                             // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow3;                                            // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        FakeChainSocket;                                   // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Belt;                                              // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       PullWidget;                                        // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        ChainSound;                                        // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       ControlNotify;                                     // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       Pseudo_Widget;                                     // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Capsule;                                           // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      FakePawnCollision;                                 // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere1;                                           // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            PhysicsConstraint;                                 // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow2;                                            // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow1;                                            // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Sphere;                                            // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Camera;                                            // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_12__Direction_1F46870241B091A762B7309BE0D423AB; // 0x0420(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30F8[0x7];                                     // 0x0421(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_12;                                       // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         ResyncTimeline_NewTrack_1_A56C447343018F0B5E851FBF664BAD47; // 0x0430(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ResyncTimeline__Direction_A56C447343018F0B5E851FBF664BAD47; // 0x0434(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30F9[0x3];                                     // 0x0435(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ResyncTimeline;                                    // 0x0438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_11_NewTrack_0_A109167B47B297E89AD4BD957A5D1372; // 0x0440(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_11__Direction_A109167B47B297E89AD4BD957A5D1372; // 0x0444(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30FA[0x3];                                     // 0x0445(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_11;                                       // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_10_NewTrack_0_E58D57524F5B83A7422E82A6C9259A48; // 0x0450(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_10__Direction_E58D57524F5B83A7422E82A6C9259A48; // 0x0454(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30FB[0x3];                                     // 0x0455(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_10;                                       // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_9_NewTrack_0_48F8BCF944F05D1345F2809DC641A5D4; // 0x0460(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_9__Direction_48F8BCF944F05D1345F2809DC641A5D4; // 0x0464(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30FC[0x3];                                     // 0x0465(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_9;                                        // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_8__Direction_8D2E11C24260CCA853E85B925DAE7912; // 0x0470(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30FD[0x7];                                     // 0x0471(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_8;                                        // 0x0478(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_2__Direction_8102F614470B3CF1380E4DAB88E73C3A; // 0x0480(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30FE[0x7];                                     // 0x0481(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_2;                                        // 0x0488(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_0F452D994D0F7054912493ACCC06E9AE; // 0x0490(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30FF[0x7];                                     // 0x0491(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x0498(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_5_NewTrack_0_BBDC15D54F6D44BAA52330ADD2B33EDC; // 0x04A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_5__Direction_BBDC15D54F6D44BAA52330ADD2B33EDC; // 0x04A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3100[0x3];                                     // 0x04A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_5;                                        // 0x04A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline__Direction_6D0371DE453E7F811E4635ABC27540BE; // 0x04B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3101[0x7];                                     // 0x04B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline;                                          // 0x04B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         EmissiveDissolve_TL_NewTrack_0_643C91344D65771884470A8386F6E312; // 0x04C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            EmissiveDissolve_TL__Direction_643C91344D65771884470A8386F6E312; // 0x04C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3102[0x3];                                     // 0x04C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     EmissiveDissolve_TL;                               // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Dissolve_TL_NewTrack_0_B7566A3B49967368D5B5CE8E1A2B3E37; // 0x04D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Dissolve_TL__Direction_B7566A3B49967368D5B5CE8E1A2B3E37; // 0x04D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3103[0x3];                                     // 0x04D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Dissolve_TL;                                       // 0x04D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_7__Direction_4FC2439846AD1DA398BC82A7AB126456; // 0x04E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3104[0x7];                                     // 0x04E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_7;                                        // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_6_NewTrack_0_07BDE72F4A8D936A059FA7866ACE8C46; // 0x04F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_6__Direction_07BDE72F4A8D936A059FA7866ACE8C46; // 0x04F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3105[0x3];                                     // 0x04F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_6;                                        // 0x04F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_4_NewTrack_0_465FCCE24F51D7BE011D06B30E14469A; // 0x0500(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_4__Direction_465FCCE24F51D7BE011D06B30E14469A; // 0x0504(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3106[0x3];                                     // 0x0505(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_4;                                        // 0x0508(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_3__Direction_DC2F7E4C41222CE9F39CF79115DEBF65; // 0x0510(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3107[0x7];                                     // 0x0511(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_3;                                        // 0x0518(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            SteppingDownBoolTL__Direction_612A471F44B6EBAA5BE2F18590A29B02; // 0x0520(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3108[0x7];                                     // 0x0521(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     SteppingDownBoolTL;                                // 0x0528(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            SteppUpBoolTL__Direction_49C7C7B64471F296824E4796C9420FDA; // 0x0530(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3109[0x7];                                     // 0x0531(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     SteppUpBoolTL;                                     // 0x0538(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_1_NewTrack_0_4D75B6AA403EFB977D387C8E45BBB5A5; // 0x0540(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_1__Direction_4D75B6AA403EFB977D387C8E45BBB5A5; // 0x0544(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_310A[0x3];                                     // 0x0545(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_1;                                        // 0x0548(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            NullVelocityTL__Direction_AB6362B443CFC1FB84E910BCE683401F; // 0x0550(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_310B[0x7];                                     // 0x0551(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     NullVelocityTL;                                    // 0x0558(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         MantleTimeline_NewTrack_0_3B906D304032A76D74BCE783475BA80A; // 0x0560(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            MantleTimeline__Direction_3B906D304032A76D74BCE783475BA80A; // 0x0564(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_310C[0x3];                                     // 0x0565(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     MantleTimeline;                                    // 0x0568(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        MoveMagnitude;                                     // 0x0570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MoveForwardAxis;                                   // 0x0578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MoveForwardVector;                                 // 0x0580(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MoveRightAxis;                                     // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MoveRightVector;                                   // 0x05A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxWalkSpeed;                                      // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FloorNormal;                                       // 0x05C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GravityForce;                                      // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Grounded;                                          // 0x05E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_310D[0x7];                                     // 0x05E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Acceleration;                                      // 0x05E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CharacterVelocity;                                 // 0x0600(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PreviousVelocity;                                  // 0x0618(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Speed;                                             // 0x0630(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMoving;                                          // 0x0638(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_310E[0x7];                                     // 0x0639(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               LastVelocityRotation;                              // 0x0640(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        MovementInputAmount;                               // 0x0658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasMovementInput;                                  // 0x0660(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_310F[0x7];                                     // 0x0661(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               LastMovementInputRotation;                         // 0x0668(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               RepControlRotation;                                // 0x0680(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        PreviousAimYaw;                                    // 0x0698(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_MovementState                            MovementState;                                     // 0x06A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sprinting;                                         // 0x06A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_Gait                                     Gait;                                              // 0x06A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3110[0x5];                                     // 0x06A3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               TargetRotation;                                    // 0x06A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        MaxWalkableSlope;                                  // 0x06C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMantle_TraceSettings                  FallingTraceSettings;                              // 0x06C8(0x0014)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3111[0x4];                                     // 0x06DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AimYawRate;                                        // 0x06E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_ViewMode                                 ViewMode;                                          // 0x06E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_RotationMode                             RotationMode;                                      // 0x06E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3112[0x6];                                     // 0x06EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovementSettings                      CurrentMovementSettings;                           // 0x06F0(0x0020)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          MainAnimInstance;                                  // 0x0710(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	EALS_MovementAction                           MovementAction;                                    // 0x0718(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3113[0x7];                                     // 0x0719(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMantle_Params                         Mantle_Params;                                     // 0x0720(0x0030)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FMantle_Asset                          MantleAsset;                                       // 0x0750(0x0040)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FALS_ComponentAndTransform             MantleLedgeLS;                                     // 0x0790(0x0070)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FTransform                             MantleTarget;                                      // 0x0800(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             MantleActualStartOffset;                           // 0x0860(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             MantleAnimatedStartOffset;                         // 0x08C0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 Pawn_Movement_Mode;                                // 0x0920(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3114[0x7];                                     // 0x0921(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APawn*>                          Rep_Attached_Characters;                           // 0x0928(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance, RepNotify)
	TArray<class APawn*>                          InitialAttachedCharacters;                         // 0x0938(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class AActor*>                         ConnectedChains;                                   // 0x0948(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance)
	struct FRotator                               InAirRotation;                                     // 0x0958(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EALS_OverlayState                             OverlayState;                                      // 0x0970(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_RotationMode                             DesiredRotationMode;                               // 0x0971(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_MovementState                            PrevMovementState;                                 // 0x0972(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_Stance                                   ActualStance;                                      // 0x0973(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMantle_TraceSettings                  GroundedTraceSettings;                             // 0x0974(0x0014)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Tyrolienne_C*                       CurrentTyrolienne;                                 // 0x0988(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        JumpForce;                                         // 0x0990(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Climbing;                                          // 0x0998(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3115[0x7];                                     // 0x0999(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ClimbRotation;                                     // 0x09A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class AGridConstraint_C*                      GridConstraint;                                    // 0x09B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bPull;                                             // 0x09C0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3116[0x3];                                     // 0x09C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WaterVolumes;                                      // 0x09C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Swim;                                              // 0x09C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3117[0x7];                                     // 0x09C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               PreviousActorRotation;                             // 0x09D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               RadialVel;                                         // 0x09E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                LeftHandLocation;                                  // 0x0A00(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RightHandLocation;                                 // 0x0A18(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LocationBackup;                                    // 0x0A30(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RepLocation;                                       // 0x0A48(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PreviousCapsuleLocation;                           // 0x0A60(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Bouncing;                                          // 0x0A78(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3118[0x7];                                     // 0x0A79(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPrimitiveComponent*>            CubeSockets;                                       // 0x0A80(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          IsSteppingUp;                                      // 0x0A90(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSteppingDown;                                    // 0x0A91(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsJumping;                                         // 0x0A92(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3119[0x5];                                     // 0x0A93(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MaxStepHeight;                                     // 0x0A98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            DirectionLerpCurve;                                // 0x0AA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LerpedMovementForce;                               // 0x0AA8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasJumped;                                         // 0x0AC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MantleAborting;                                    // 0x0AC1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_311A[0x6];                                     // 0x0AC2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Pseudo;                                            // 0x0AC8(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, RepNotify, HasGetValueTypeHash)
	class FString                                 FakePseudo;                                        // 0x0AD8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FLinearColor                           ClothColor;                                        // 0x0AE8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FlyMode;                                           // 0x0AF8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_311B[0x7];                                     // 0x0AF9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_NewChain_C*                         PullingChain;                                      // 0x0B00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayingCinematic;                                // 0x0B08(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_311C[0x7];                                     // 0x0B09(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             FlushTransformCache;                               // 0x0B10(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Look_Around;                                       // 0x0B70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Chained;                                           // 0x0B71(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_311D[0x6];                                     // 0x0B72(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ChainVolumeVariation;                              // 0x0B78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    AttractiveSun;                                     // 0x0B80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDetectableByPlacingBlocks;                       // 0x0B88(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_311E[0x7];                                     // 0x0B89(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 PulledCharacter;                                   // 0x0B90(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CheckMovementTimer;                                // 0x0B98(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        ReplicationTreshold;                               // 0x0BA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PreviousMoveForward;                               // 0x0BA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PreviousMoveRight;                                 // 0x0BB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ClientRepLocation;                                 // 0x0BB8(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RepCapsuleYaw;                                     // 0x0BD0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanReconciliateLocation;                           // 0x0BD8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_311F[0x7];                                     // 0x0BD9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RescueTransform;                                   // 0x0BE0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InMovingObject;                                    // 0x0C40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3120[0x7];                                     // 0x0C41(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RepZAlpha;                                         // 0x0C48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReplicationScale;                                  // 0x0C50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GravityErrorScale;                                 // 0x0C58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PreviousLocation;                                  // 0x0C60(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<int32, struct FS_LocationAtTime>         LocationAtTime;                                    // 0x0C78(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FDateTime                              Timestamp;                                         // 0x0CC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<struct FS_LocationAtTime>              LocationsAtTime;                                   // 0x0CD0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                ServerRepLocation;                                 // 0x0CE0(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NewVar_0;                                          // 0x0CF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GroundedTemp;                                      // 0x0D00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3121[0x7];                                     // 0x0D01(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ClientLatency;                                     // 0x0D08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ClientReplicationSpeed;                            // 0x0D10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ServerReplicationSpeed;                            // 0x0D18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Step_New_Location_Z;                               // 0x0D20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    GroundedComponentFloor;                            // 0x0D28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSliding;                                         // 0x0D30(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3122[0x7];                                     // 0x0D31(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SpringArmSpeed;                                    // 0x0D38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Balancier;                                         // 0x0D40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3123[0x7];                                     // 0x0D41(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    BalancierMaillon;                                  // 0x0D48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ABalancierConstraint_C*                 BalancierConstraint;                               // 0x0D50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CurrentBalancier;                                  // 0x0D58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          HasJumpedFromBalancier;                            // 0x0D60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3124[0x7];                                     // 0x0D61(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UC_TickOptimizer_C*>             TickComponentsInSphere;                            // 0x0D68(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	double                                        MaxFallSpeed;                                      // 0x0D78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       DynamicMaterials;                                  // 0x0D80(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Dead;                                              // 0x0D90(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3125[0x7];                                     // 0x0D91(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Lava_C*                             LavaRef;                                           // 0x0D98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        HardSnapDistanceXY;                                // 0x0DA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HardSnapDistanceZ;                                 // 0x0DA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ServerRepVelocity;                                 // 0x0DB0(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HardSnapZVelocityDifference;                       // 0x0DC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DesyncDuration;                                    // 0x0DD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3126[0x4];                                     // 0x0DD4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PlayerLocationResync;                              // 0x0DD8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ServerRepGrounded;                                 // 0x0DF0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ResyncGrounded;                                    // 0x0DF1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3127[0x6];                                     // 0x0DF2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            ReplicationCurve;                                  // 0x0DF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PreviousMoveForwardVector;                         // 0x0E00(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PreviousMoveRightVector;                           // 0x0E18(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PreviousCapsuleRotation;                           // 0x0E30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RepMoveForward;                                    // 0x0E38(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RepMoveRight;                                      // 0x0E40(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanHardSnap;                                       // 0x0E48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PushedByObstacle;                                  // 0x0E49(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasStoppedGrounded;                                // 0x0E4A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OnWaterSurface;                                    // 0x0E4B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3128[0x4];                                     // 0x0E4C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_StabilisationSocket_C*              StabilisationSocket;                               // 0x0E50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         InitialFieldOfView;                                // 0x0E58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FOV_Backup;                                        // 0x0E5C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    ChainFixSocket;                                    // 0x0E60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   FixMaillonSocketName;                              // 0x0E68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FlushJumpReplication;                              // 0x0E70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Flotte;                                            // 0x0E71(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasWings;                                          // 0x0E72(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3129[0x1];                                     // 0x0E73(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AirControlShuffle;                                 // 0x0E74(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoMantleCheck;                                     // 0x0E78(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_312A[0x7];                                     // 0x0E79(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AInOutPillar_BP_C*                      Mantling_in_Out_Pillar_BP;                         // 0x0E80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          PostMantleStabilize;                               // 0x0E88(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DesyncTemp;                                        // 0x0E89(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanFixToGround;                                    // 0x0E8A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EvaluateCustomDepth;                               // 0x0E8B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_312B[0x4];                                     // 0x0E8C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PreviousLocationForNotif;                          // 0x0E90(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           SafeLocationTimer;                                 // 0x0EA8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          PullStabilisation;                                 // 0x0EB0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OnIce;                                             // 0x0EB1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_312C[0x6];                                     // 0x0EB2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      BallOnIceMaterial;                                 // 0x0EB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ActivateCollisions(bool Active);
	void AdaptSwimCollision(bool Param_Swim);
	void Add_Chain(const class APawn* OtherCharacter);
	void Add_Character_Constraint(class AActor* Constraint);
	void AddAttachedCharacter(class APawn* Character);
	void AddChainPhysic(class UObject* Physics, class UStaticMeshComponent* Comp);
	void AddChainSocket(class UPrimitiveComponent* Socket);
	void AddCloth(class USkeletalMesh* NewMesh, const struct FLinearColor& Color, bool CustomMat, class UMaterialInterface* Material);
	void AddClothes();
	void AddConnectedChain(class AActor* Chain);
	void AddForce(const struct FVector& Vector, bool MakeSlide, double StabilizeSpeed, bool PushedByTrain, bool ShuffleFixToGround);
	void AddImpulseToCar(const struct FVector& Impulse);
	void AddImpulseToCharacter(const struct FVector& Impulse, bool OverrideVelocityZ, bool StopClimb, bool Param_ShuffleAirControl, bool IgnoreDoOnce, bool Param_PushedByObstacle);
	class ABP_NewChain_C* AddPhysX_Chain(const class APawn* OtherAttachedPawn);
	void AddWaterVolume(bool Remove);
	void AddWingsSRV();
	void AddZForceToPulledCharacter();
	void ALS_Tick();
	void AnnulateVelocity(double Duration);
	void AnulateCharacterVelocity(double Time);
	void ApplyStepMovement(double New_Location_Z);
	void AttachBalancierAll(class AActor* Param_Balancier, int32 MaillonIndex, const struct FVector& Location);
	void AttachBalancierServer(class AActor* Param_Balancier, int32 MaillonIndex, const struct FVector& Location);
	bool AttachedCharactersAreSwiming();
	void AttachToBalancier(class AActor* Param_Balancier, int32 Param_BalancierMaillon, const struct FVector& Location);
	void BeAttractedBySun(class UPrimitiveComponent* SunMesh);
	void BeginCinematic(const struct FTransform& BeginTransform);
	void BeginClimb(const struct FRotator& NewRotation, const struct FVector& Loc, const struct FVector& Normal);
	void BeginGridConstraint();
	void BeginPullOtherCharacter(bool BeginPull, class AActor* OtherCharacter);
	void BeltFallDown();
	void BndEvt__BP_BallMovement_Sphere_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BndEvt__BP_Character_Capsule_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BounceAnim();
	void BounceOnTrampoline(double Bounce, bool Param_Instigator, bool UseControlRot, bool JustZ);
	void BounceOnTrampolineClient(double Bounce, bool Param_Instigator, bool UseControlRot, bool JustZ);
	void BounceTrampolineAll(double Bounce, bool Param_Instigator, bool UseControlRot, bool JustZ);
	void BounceTrampolineSRV(double Bounce, bool Param_Instigator, bool UseControlRot, bool JustZ);
	void BPI_Get_CurrentStates(EMovementMode* PawnMovementMode, EALS_MovementState* Param_MovementState, EALS_MovementState* Param_PrevMovementState, EALS_MovementAction* Param_MovementAction, EALS_RotationMode* Param_RotationMode, EALS_Gait* ActualGait, EALS_Stance* Param_ActualStance, EALS_ViewMode* Param_ViewMode, EALS_OverlayState* Param_OverlayState);
	void BPI_Get_EssentialValues(struct FVector* Velocity, struct FVector* Param_Acceleration, struct FVector* MovementInput, bool* Param_IsMoving, bool* Param_HasMovementInput, double* Param_Speed, double* Param_MovementInputAmount, struct FRotator* AimingRotation, double* Param_AimYawRate, class AActor** PullCharacter, bool* Pull, bool* Climb, struct FVector2D* MoveInput, bool* SwimOnSurface, struct FVector* Param_LeftHandLocation, struct FVector* Param_RightHandLocation, double* RadialVelocityRight, double* RadialVelocityUp, bool* Param_Swim, bool* Bounce, bool* LookAround, bool* Param_Balancier);
	void BPI_Set_Gait(EALS_Gait NewGait);
	void BPI_Set_MovementAction(EALS_MovementAction NewMovementAction);
	void BPI_Set_MovementState(EALS_MovementState NewMovementState);
	void BPI_Set_OverlayState(EALS_OverlayState NewOverlayState);
	void BPI_Set_RotationMode(EALS_RotationMode NewRotationMode);
	void BPI_Set_ViewMode(EALS_ViewMode NewViewMode);
	void CacheValues();
	struct FVector CalculateAcceleration();
	void CalculateFloorNormal(const struct FHitResult& Hit, struct FVector* ImpactNormal);
	double CalculateGroundedRotationRate();
	void CalculateRadialVel();
	void CalculateVelocity();
	bool CanUpdateMovingRotation();
	void CapsuleHasRoomCheck(class UCapsuleComponent* Param_Capsule, const struct FVector& TargetLocation, double HeightOffset, double RadiusOffset, EDrawDebugTrace DebugType, const TArray<class AActor*>& ActorsToIgnore, bool* HasRoom);
	bool ChainAlreadyExist_(class APawn* Player01, class APawn* Player02);
	void ChangeCurrentVehicle(class AActor* Vehicle);
	void Character_Bounce(double Force);
	void CheckDeathInLava();
	void CheckForTrampoline();
	void CheckMaxDistanceWithOthers(float* Distance);
	void ClientLocationSRV(const struct FVector& Param_ClientRepLocation);
	void ClimbAll(const struct FRotator& NewRotation, const struct FVector& Loc, const struct FVector& Normal);
	void ClimbSideTrace(double SideDistance, double ForwardDistance, bool* ClimbableWall);
	void ClimbSRV(const struct FRotator& NewRotation, const struct FVector& Loc, const struct FVector& Normal, bool Stop);
	void CustomEvent();
	void CustomEvent_0();
	void CustomEvent_1();
	void DeactivateCustomDepth();
	void DetachFromBalancier();
	void DetectBalancier();
	void DetectChainViolation(bool* Violation);
	void DetectClimbableWall();
	void DetectDesync(bool* Desync);
	void DetectFalldown();
	void DetectGrounded();
	void DetectStuck(bool* Stuck, double* ZFix);
	void DetectSwimOrDive();
	void Dissolve_TL__FinishedFunc();
	void Dissolve_TL__UpdateFunc();
	void EmissiveDissolve_TL__FinishedFunc();
	void EmissiveDissolve_TL__UpdateFunc();
	void EnableMovements();
	void EndCinematic();
	void ExecuteUbergraph_BP_Character(int32 EntryPoint);
	void Falldown();
	bool Find_Chain_Physics(const class FString& Char, const class FString& Char02, bool Cosmetics, class ABP_Chain_C** Chain);
	void FixCapsuleRotation();
	void FixClimbersDistance();
	void FixFirstMaillon();
	void FixPlayerToGround(bool* Fixation);
	void Flotter(bool Param_Flotte);
	void FlushJumpedFromBalancier();
	void FlushJumping();
	void FlushSync();
	void FlushTransform(const struct FVector& New_Transform_Location, const struct FRotator& New_Transform_Rotation, double Duration);
	void Get_Belt_Fall_Cam_Loc_Rot(struct FVector* Loc, struct FRotator* Rot);
	void GetAllConnectedChainPhysics(bool Cosmetics, TArray<class ABP_Chain_C*>* Chains);
	double GetAnimCurveValue(class FName CurveName);
	void GetAnimVariables(bool* Jump, bool* Fall, struct FVector* RadialVelocity, struct FVector2D* MoveInput, bool* Climb, bool* Pull, class AActor** Param_PulledCharacter, bool* IsDriving, struct FVector* DriveLeftHand, struct FVector* DriveRightHand, bool* LookAround);
	TArray<class AActor*> GetAttachedCharacters();
	void GetAttachedComponent(class UPrimitiveComponent** Comp);
	void GetBaseLocation(struct FVector* Location);
	void GetBeltLocation(struct FVector* Location);
	void GetBeltSocket(class USceneComponent** Comp);
	struct FVector GetCalpsuleBaseLocation(double ZOffset);
	void GetCapsuleBase(class USphereComponent** base);
	void GetCapsuleComponent(class UCapsuleComponent** Param_Capsule);
	void GetCapsuleLocation(struct FVector* NewParam);
	struct FVector GetCapsuleLocationFromBase(const struct FVector& BaseLocation, double ZOffset);
	void GetCapsuleRotation(struct FRotator* Rotation);
	void GetCharacter(E_ChoosenChar* Character);
	struct FVector GetCharacterVelocity();
	void GetConnectedChains(TArray<class AActor*>* Chains);
	void GetCosmeticSocket(class UPrimitiveComponent** Comp);
	void GetCurrentVehicle(class AActor** Vehicle);
	struct FVector GetDesiredMoveDirection(bool Normalize, double RightAxisScale);
	void GetFakeChainSocket(class USceneComponent** Socket);
	void GetHandLocation(struct FVector* Location);
	bool GetIsDetectableByPlacingBlocks();
	bool GetIsDriving();
	void GetLastUpdateRotation(struct FRotator* Rot);
	struct FMantle_Asset GetMantleAsset(EMantleType MantleType);
	double GetMappedSpeed();
	void GetMovementState(EALS_MovementState* State);
	void GetSkeletalMesh(class USkeletalMeshComponent** SKM);
	void GetWalkMagnitude(double* Magnitude);
	void Handle_Movement_and_Damping();
	void HandSplash(bool RightHand);
	void HasJustBeginGrounded();
	void HasJustStopGrounded();
	void ImproveFail();
	void Input_Leave_Tyro();
	void IsBeingAttracted(bool* Attracted);
	bool IsChained();
	bool IsClimbing();
	bool IsCloseToGround();
	void IsGrounded(bool* Param_Grounded);
	bool IsInCinematicMode();
	bool IsOnTyrolienne();
	void IsPulling(bool* Pulling);
	bool IsSomeoneStuckFalling();
	void IsSwimming(bool* Param_Swim);
	bool IsWalkableSurface(const struct FHitResult& Hit);
	void Jump();
	void Jump_Input();
	void JumpAll();
	void JumpForceFix();
	void JumpInputAll();
	void JumpInputServer();
	void JumpSRV();
	void JumpTraceHits(TArray<struct FHitResult>& Array, bool* Good);
	void LaunchChainVolumeVariation();
	void LaunchMantleTimeline();
	void LeaveTyro();
	void LeaveTyroAll();
	void LeaveTyroSRV();
	void LimitRotation(double AimYawMin, double AimYawMax, double InterpSpeed);
	void LookRight(double Axis);
	void LookUp(double Axis);
	void MakeBeltFall();
	void MakeOutline(bool Outline);
	void MantleCheck(const struct FMantle_TraceSettings& Trace_Settings, EDrawDebugTrace DebugType, bool* Vault);
	void MantleCheckShuffle(double Delay);
	void MantleEnd();
	void MantleStart(double MantleHeight, const struct FALS_ComponentAndTransform& MantleLedgeWS, EMantleType MantleType);
	void MantleStartAll(double MantleHeight, const struct FALS_ComponentAndTransform& MantleLedgeWS, EMantleType MantleType);
	void MantleStartSRV(double MantleHeight, const struct FALS_ComponentAndTransform& MantleLedgeWS, EMantleType MantleType);
	void MantleTimeline__FinishedFunc();
	void MantleTimeline__UpdateFunc();
	void MantleUpdate(double BlendIn);
	void MoveForward(double Axis);
	void MoveForwardSRV(double MoveForward);
	void MoveForwardVectorAll(const struct FVector& Param_MoveForwardVector);
	void MoveForwardVectorSRV(const struct FVector& Param_MoveForwardVector);
	void MoveRight(double Axis);
	void MoveRightSRV(double MoveRight);
	void MoveRightVectorAll(const struct FVector& Param_MoveRightVector);
	void MoveRightVectorSRV(const struct FVector& Param_MoveRightVector);
	void MoveToTyrolienne(class ABP_Tyrolienne_C* Tyro);
	bool MultiLineTrace(const struct FVector& Start, const struct FVector& End, int32 X, int32 Y, double Spacing, EDrawDebugTrace DrawDebugType, double DrawTime, struct FHitResult* OutHit);
	void NullVelocityTL__FinishedFunc();
	void NullVelocityTL__UpdateFunc();
	void OnGaitChanged(EALS_Gait NewActualGait);
	void OnMovementActionChanged(EALS_MovementAction NewMovementAction);
	void OnMovementStateChanged(EALS_MovementState NewMovementState);
	void OnOverlayStateChanged(EALS_OverlayState NewOverlayState);
	void OnPossessOwner();
	void OnRep_FlyMode();
	void OnRep_HasWings();
	void OnRep_Pseudo();
	void OnRep_PullingCharacter();
	void OnRep_Rep_Attached_Characters();
	void OnRotationModeChanged(EALS_RotationMode NewRotationMode);
	void OnVehicleExit();
	void OnViewModeChanged(EALS_ViewMode NewViewMode);
	void PlayClimbSound();
	void PlayEffortSound(float Weight);
	void PlayMantleMontage(const struct FMantle_Params& Param_Mantle_Params);
	void PlayVoiceSRV(const TArray<uint8>& Data);
	void PostMantleStabilization();
	void ReactivatePhysics();
	void ReceiveBeginPlay();
	void ReceivePossessed(class AController* NewController);
	void ReceiveTick(float DeltaSeconds);
	void RepControlRotSRV(const struct FRotator& DesiredControlRotation);
	void Replicate_Location();
	void ReplicateCapsuleRotation(double Param_RepCapsuleYaw);
	void ReplicateControlRotation();
	void ReplicatePseudo(const class FString& Param_Pseudo);
	void ReplicationCollision_GravityUpdater();
	void RescueTeleport(const struct FVector& Location, const struct FRotator& Rotation);
	void ResetCharacterMass();
	void ResetClimb();
	void ResetClimbingState();
	void ResetSkeletalMeshLocation();
	void ResetStepDownTL();
	void RessortImpulse(const struct FVector& Impulse);
	void ResyncDetection_Grounded_();
	void ResyncTimeline__FinishedFunc();
	void ResyncTimeline__UpdateFunc();
	void SelectControlRot(struct FRotator* DesiredControlRotation);
	double SelectMoveForwardAxis();
	double SelectMoveRightAxis();
	struct FVector SelectVelocity();
	bool SetActorLocationAndRotation_UpdateTarget_(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void SetCameraRotation(const struct FRotator& Rotation);
	void SetChainComp(class UStaticMeshComponent* Comp);
	void SetCharacterRotation(const struct FRotator& Rotation);
	void SetCharacterVelocity(const struct FVector& NewVel, bool Param_Capsule, bool Param_Sphere);
	void SetCollisionResponse(ECollisionChannel Collision, ECollisionResponse Response);
	void SetController(const struct FVector& Location);
	void SetCosmeticChainFixSocket(class UPrimitiveComponent* Socket, class FName Param_Name);
	void SetEssentialValues();
	void SetFlyMode(bool Param_FlyMode);
	void SetInAirDamping(double Damping);
	void SetIsDetectableByPlacingBlocks(bool Detectable);
	void SetIsDriving(bool Driving);
	void SetIsInMovingObject(bool Param_InMovingObject);
	void SetIsSwimming(bool Param_Swim);
	void SetLookAround(bool LookAround);
	void SetPawnMovementMode(EMovementMode Param_Pawn_Movement_Mode);
	void SetPlayerNameSRV(const class FString& PlayerName);
	void SetRenderCustomDepth(bool bValue);
	void SetRotation(const struct FRotator& Rotation);
	void SetZLocation(double Z);
	void ShowHidePullWidget(bool Show);
	void ShuffleAirControl();
	void ShuffleFixToGround();
	void ShuffleHardSnap(double Delay);
	void ShuffleHardSnapping(double Delay);
	void ShuffleMantleCheck(float Duration);
	void ShufflePullStabilization();
	void ShufflePushedByObstacle(float Duration);
	void ShuffleReplicationScale(double NullDuration, double TimelineDuration);
	void ShuffleSliding();
	void SimulateGravity();
	void SimulateLegsPhysics(bool bNewSimulate, double PhysicsBlendWeight);
	void SmoothCharacterRotation(const struct FRotator& Target, double TargetInterpSpeed_Const_, double ActorInterpSpeed_Smooth_);
	void SnapCharacterToVehicle(class USphereComponent* DriverSocket);
	void Spawn_Chains();
	void SpawnChainsServer();
	void SpawnStabilisationSocket();
	void Sprint(bool Param_Sprint);
	void SprintAll(bool Param_Sprint);
	void SprintSRV(bool Param_Sprint);
	void StabilizeGroundedMovement();
	void Stance();
	void StepDownTL();
	void StepMovement();
	void SteppingDownBoolTL__FinishedFunc();
	void SteppingDownBoolTL__UpdateFunc();
	void SteppingUpTL();
	void SteppUpBoolTL__FinishedFunc();
	void SteppUpBoolTL__UpdateFunc();
	void StopClimbAll();
	void StopFalldown();
	void StopFlotterAll();
	void StopFlotterSRV();
	void StopGridConstraint();
	void StopMantleTimeline();
	void StopUnstuck();
	bool StuckTrace(struct FHitResult* OutHit);
	void SunAttraction();
	void SwitchClimbMode(const struct FRotator& Rot, class USceneComponent* Comp, const struct FVector& HitLocation, const struct FVector& Normal);
	void SwitchToTyroAll(class ABP_Tyrolienne_C* Tyrolienne);
	void SwitchToTyrolienne(class ABP_Tyrolienne_C* Tyrolienne);
	void SwitchToTyroSRV(class ABP_Tyrolienne_C* Tyrolienne);
	void TestControlNotify();
	void Timeline_0__FinishedFunc();
	void Timeline_0__UpdateFunc();
	void Timeline_10__FinishedFunc();
	void Timeline_10__UpdateFunc();
	void Timeline_11__FinishedFunc();
	void Timeline_11__UpdateFunc();
	void Timeline_12__FinishedFunc();
	void Timeline_12__UpdateFunc();
	void Timeline_1__FinishedFunc();
	void Timeline_1__UpdateFunc();
	void Timeline_2__FinishedFunc();
	void Timeline_2__UpdateFunc();
	void Timeline_3__FinishedFunc();
	void Timeline_3__UpdateFunc();
	void Timeline_4__FinishedFunc();
	void Timeline_4__UpdateFunc();
	void Timeline_5__FinishedFunc();
	void Timeline_5__UpdateFunc();
	void Timeline_6__FinishedFunc();
	void Timeline_6__UpdateFunc();
	void Timeline_7__FinishedFunc();
	void Timeline_7__UpdateFunc();
	void Timeline_8__FinishedFunc();
	void Timeline_8__UpdateFunc();
	void Timeline_9__FinishedFunc();
	void Timeline_9__UpdateFunc();
	void Timeline__FinishedFunc();
	void Timeline__UpdateFunc();
	void TrampolineBounce(double Force, bool Param_Instigator, bool UseControlRot);
	void TryUnstuck();
	void UnderLava();
	void Update_Balancier_Arrow_Rotation();
	void UpdateChainSound();
	void UpdateCharacterMovement();
	void UpdateDecceleration();
	void UpdateDriveHands(const struct FVector& Left, const struct FVector& Right);
	void UpdateGroudedRotation();
	void UpdateMovementState();
	void UpdateMoveVectors();
	void UpdateServerReconciliationSpeed();
	void UpdateSpringArmSpeed();
	void UpdateSwimRotation();
	void UpdateTyrolienneHands();
	void UserConstructionScript();
	bool VerifyChainTendue(TArray<class AActor*>& Array, double Tension);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Character_C">();
	}
	static class ABP_Character_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Character_C>();
	}
};
static_assert(alignof(ABP_Character_C) == 0x000010, "Wrong alignment on ABP_Character_C");
static_assert(sizeof(ABP_Character_C) == 0x000EC0, "Wrong size on ABP_Character_C");
static_assert(offsetof(ABP_Character_C, UberGraphFrame) == 0x000320, "Member 'ABP_Character_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, StuckBegin) == 0x000328, "Member 'ABP_Character_C::StuckBegin' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, StuckEnd) == 0x000330, "Member 'ABP_Character_C::StuckEnd' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, PointLight) == 0x000338, "Member 'ABP_Character_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Wings) == 0x000340, "Member 'ABP_Character_C::Wings' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Aureole) == 0x000348, "Member 'ABP_Character_C::Aureole' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, MaillonFix) == 0x000350, "Member 'ABP_Character_C::MaillonFix' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Arrow4) == 0x000358, "Member 'ABP_Character_C::Arrow4' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, FallWindSound) == 0x000360, "Member 'ABP_Character_C::FallWindSound' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, SpotLight) == 0x000368, "Member 'ABP_Character_C::SpotLight' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Camera_SpringArm) == 0x000370, "Member 'ABP_Character_C::Camera_SpringArm' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, BalancierArrowX) == 0x000378, "Member 'ABP_Character_C::BalancierArrowX' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, BalancierArrowZ) == 0x000380, "Member 'ABP_Character_C::BalancierArrowZ' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, SkeletalMesh) == 0x000388, "Member 'ABP_Character_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, SkeletalMeshSpringArm) == 0x000390, "Member 'ABP_Character_C::SkeletalMeshSpringArm' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Arrow3) == 0x000398, "Member 'ABP_Character_C::Arrow3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, FakeChainSocket) == 0x0003A0, "Member 'ABP_Character_C::FakeChainSocket' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Belt) == 0x0003A8, "Member 'ABP_Character_C::Belt' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, PullWidget) == 0x0003B0, "Member 'ABP_Character_C::PullWidget' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, ChainSound) == 0x0003B8, "Member 'ABP_Character_C::ChainSound' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, ControlNotify) == 0x0003C0, "Member 'ABP_Character_C::ControlNotify' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Pseudo_Widget) == 0x0003C8, "Member 'ABP_Character_C::Pseudo_Widget' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Capsule) == 0x0003D0, "Member 'ABP_Character_C::Capsule' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, FakePawnCollision) == 0x0003D8, "Member 'ABP_Character_C::FakePawnCollision' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Sphere1) == 0x0003E0, "Member 'ABP_Character_C::Sphere1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Scene) == 0x0003E8, "Member 'ABP_Character_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, PhysicsConstraint) == 0x0003F0, "Member 'ABP_Character_C::PhysicsConstraint' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Arrow2) == 0x0003F8, "Member 'ABP_Character_C::Arrow2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Arrow1) == 0x000400, "Member 'ABP_Character_C::Arrow1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Sphere) == 0x000408, "Member 'ABP_Character_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Arrow) == 0x000410, "Member 'ABP_Character_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Camera) == 0x000418, "Member 'ABP_Character_C::Camera' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Timeline_12__Direction_1F46870241B091A762B7309BE0D423AB) == 0x000420, "Member 'ABP_Character_C::Timeline_12__Direction_1F46870241B091A762B7309BE0D423AB' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Timeline_12) == 0x000428, "Member 'ABP_Character_C::Timeline_12' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, ResyncTimeline_NewTrack_1_A56C447343018F0B5E851FBF664BAD47) == 0x000430, "Member 'ABP_Character_C::ResyncTimeline_NewTrack_1_A56C447343018F0B5E851FBF664BAD47' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, ResyncTimeline__Direction_A56C447343018F0B5E851FBF664BAD47) == 0x000434, "Member 'ABP_Character_C::ResyncTimeline__Direction_A56C447343018F0B5E851FBF664BAD47' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, ResyncTimeline) == 0x000438, "Member 'ABP_Character_C::ResyncTimeline' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Timeline_11_NewTrack_0_A109167B47B297E89AD4BD957A5D1372) == 0x000440, "Member 'ABP_Character_C::Timeline_11_NewTrack_0_A109167B47B297E89AD4BD957A5D1372' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Timeline_11__Direction_A109167B47B297E89AD4BD957A5D1372) == 0x000444, "Member 'ABP_Character_C::Timeline_11__Direction_A109167B47B297E89AD4BD957A5D1372' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Timeline_11) == 0x000448, "Member 'ABP_Character_C::Timeline_11' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Timeline_10_NewTrack_0_E58D57524F5B83A7422E82A6C9259A48) == 0x000450, "Member 'ABP_Character_C::Timeline_10_NewTrack_0_E58D57524F5B83A7422E82A6C9259A48' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Timeline_10__Direction_E58D57524F5B83A7422E82A6C9259A48) == 0x000454, "Member 'ABP_Character_C::Timeline_10__Direction_E58D57524F5B83A7422E82A6C9259A48' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Timeline_10) == 0x000458, "Member 'ABP_Character_C::Timeline_10' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Timeline_9_NewTrack_0_48F8BCF944F05D1345F2809DC641A5D4) == 0x000460, "Member 'ABP_Character_C::Timeline_9_NewTrack_0_48F8BCF944F05D1345F2809DC641A5D4' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Timeline_9__Direction_48F8BCF944F05D1345F2809DC641A5D4) == 0x000464, "Member 'ABP_Character_C::Timeline_9__Direction_48F8BCF944F05D1345F2809DC641A5D4' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Timeline_9) == 0x000468, "Member 'ABP_Character_C::Timeline_9' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Timeline_8__Direction_8D2E11C24260CCA853E85B925DAE7912) == 0x000470, "Member 'ABP_Character_C::Timeline_8__Direction_8D2E11C24260CCA853E85B925DAE7912' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Timeline_8) == 0x000478, "Member 'ABP_Character_C::Timeline_8' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Timeline_2__Direction_8102F614470B3CF1380E4DAB88E73C3A) == 0x000480, "Member 'ABP_Character_C::Timeline_2__Direction_8102F614470B3CF1380E4DAB88E73C3A' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Timeline_2) == 0x000488, "Member 'ABP_Character_C::Timeline_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Timeline_0__Direction_0F452D994D0F7054912493ACCC06E9AE) == 0x000490, "Member 'ABP_Character_C::Timeline_0__Direction_0F452D994D0F7054912493ACCC06E9AE' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Timeline_0) == 0x000498, "Member 'ABP_Character_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Timeline_5_NewTrack_0_BBDC15D54F6D44BAA52330ADD2B33EDC) == 0x0004A0, "Member 'ABP_Character_C::Timeline_5_NewTrack_0_BBDC15D54F6D44BAA52330ADD2B33EDC' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Timeline_5__Direction_BBDC15D54F6D44BAA52330ADD2B33EDC) == 0x0004A4, "Member 'ABP_Character_C::Timeline_5__Direction_BBDC15D54F6D44BAA52330ADD2B33EDC' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Timeline_5) == 0x0004A8, "Member 'ABP_Character_C::Timeline_5' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Timeline__Direction_6D0371DE453E7F811E4635ABC27540BE) == 0x0004B0, "Member 'ABP_Character_C::Timeline__Direction_6D0371DE453E7F811E4635ABC27540BE' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Timeline) == 0x0004B8, "Member 'ABP_Character_C::Timeline' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, EmissiveDissolve_TL_NewTrack_0_643C91344D65771884470A8386F6E312) == 0x0004C0, "Member 'ABP_Character_C::EmissiveDissolve_TL_NewTrack_0_643C91344D65771884470A8386F6E312' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, EmissiveDissolve_TL__Direction_643C91344D65771884470A8386F6E312) == 0x0004C4, "Member 'ABP_Character_C::EmissiveDissolve_TL__Direction_643C91344D65771884470A8386F6E312' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, EmissiveDissolve_TL) == 0x0004C8, "Member 'ABP_Character_C::EmissiveDissolve_TL' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Dissolve_TL_NewTrack_0_B7566A3B49967368D5B5CE8E1A2B3E37) == 0x0004D0, "Member 'ABP_Character_C::Dissolve_TL_NewTrack_0_B7566A3B49967368D5B5CE8E1A2B3E37' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Dissolve_TL__Direction_B7566A3B49967368D5B5CE8E1A2B3E37) == 0x0004D4, "Member 'ABP_Character_C::Dissolve_TL__Direction_B7566A3B49967368D5B5CE8E1A2B3E37' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Dissolve_TL) == 0x0004D8, "Member 'ABP_Character_C::Dissolve_TL' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Timeline_7__Direction_4FC2439846AD1DA398BC82A7AB126456) == 0x0004E0, "Member 'ABP_Character_C::Timeline_7__Direction_4FC2439846AD1DA398BC82A7AB126456' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Timeline_7) == 0x0004E8, "Member 'ABP_Character_C::Timeline_7' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Timeline_6_NewTrack_0_07BDE72F4A8D936A059FA7866ACE8C46) == 0x0004F0, "Member 'ABP_Character_C::Timeline_6_NewTrack_0_07BDE72F4A8D936A059FA7866ACE8C46' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Timeline_6__Direction_07BDE72F4A8D936A059FA7866ACE8C46) == 0x0004F4, "Member 'ABP_Character_C::Timeline_6__Direction_07BDE72F4A8D936A059FA7866ACE8C46' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Timeline_6) == 0x0004F8, "Member 'ABP_Character_C::Timeline_6' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Timeline_4_NewTrack_0_465FCCE24F51D7BE011D06B30E14469A) == 0x000500, "Member 'ABP_Character_C::Timeline_4_NewTrack_0_465FCCE24F51D7BE011D06B30E14469A' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Timeline_4__Direction_465FCCE24F51D7BE011D06B30E14469A) == 0x000504, "Member 'ABP_Character_C::Timeline_4__Direction_465FCCE24F51D7BE011D06B30E14469A' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Timeline_4) == 0x000508, "Member 'ABP_Character_C::Timeline_4' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Timeline_3__Direction_DC2F7E4C41222CE9F39CF79115DEBF65) == 0x000510, "Member 'ABP_Character_C::Timeline_3__Direction_DC2F7E4C41222CE9F39CF79115DEBF65' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Timeline_3) == 0x000518, "Member 'ABP_Character_C::Timeline_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, SteppingDownBoolTL__Direction_612A471F44B6EBAA5BE2F18590A29B02) == 0x000520, "Member 'ABP_Character_C::SteppingDownBoolTL__Direction_612A471F44B6EBAA5BE2F18590A29B02' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, SteppingDownBoolTL) == 0x000528, "Member 'ABP_Character_C::SteppingDownBoolTL' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, SteppUpBoolTL__Direction_49C7C7B64471F296824E4796C9420FDA) == 0x000530, "Member 'ABP_Character_C::SteppUpBoolTL__Direction_49C7C7B64471F296824E4796C9420FDA' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, SteppUpBoolTL) == 0x000538, "Member 'ABP_Character_C::SteppUpBoolTL' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Timeline_1_NewTrack_0_4D75B6AA403EFB977D387C8E45BBB5A5) == 0x000540, "Member 'ABP_Character_C::Timeline_1_NewTrack_0_4D75B6AA403EFB977D387C8E45BBB5A5' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Timeline_1__Direction_4D75B6AA403EFB977D387C8E45BBB5A5) == 0x000544, "Member 'ABP_Character_C::Timeline_1__Direction_4D75B6AA403EFB977D387C8E45BBB5A5' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Timeline_1) == 0x000548, "Member 'ABP_Character_C::Timeline_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, NullVelocityTL__Direction_AB6362B443CFC1FB84E910BCE683401F) == 0x000550, "Member 'ABP_Character_C::NullVelocityTL__Direction_AB6362B443CFC1FB84E910BCE683401F' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, NullVelocityTL) == 0x000558, "Member 'ABP_Character_C::NullVelocityTL' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, MantleTimeline_NewTrack_0_3B906D304032A76D74BCE783475BA80A) == 0x000560, "Member 'ABP_Character_C::MantleTimeline_NewTrack_0_3B906D304032A76D74BCE783475BA80A' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, MantleTimeline__Direction_3B906D304032A76D74BCE783475BA80A) == 0x000564, "Member 'ABP_Character_C::MantleTimeline__Direction_3B906D304032A76D74BCE783475BA80A' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, MantleTimeline) == 0x000568, "Member 'ABP_Character_C::MantleTimeline' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, MoveMagnitude) == 0x000570, "Member 'ABP_Character_C::MoveMagnitude' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, MoveForwardAxis) == 0x000578, "Member 'ABP_Character_C::MoveForwardAxis' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, MoveForwardVector) == 0x000580, "Member 'ABP_Character_C::MoveForwardVector' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, MoveRightAxis) == 0x000598, "Member 'ABP_Character_C::MoveRightAxis' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, MoveRightVector) == 0x0005A0, "Member 'ABP_Character_C::MoveRightVector' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, MaxWalkSpeed) == 0x0005B8, "Member 'ABP_Character_C::MaxWalkSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, FloorNormal) == 0x0005C0, "Member 'ABP_Character_C::FloorNormal' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, GravityForce) == 0x0005D8, "Member 'ABP_Character_C::GravityForce' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Grounded) == 0x0005E0, "Member 'ABP_Character_C::Grounded' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Acceleration) == 0x0005E8, "Member 'ABP_Character_C::Acceleration' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, CharacterVelocity) == 0x000600, "Member 'ABP_Character_C::CharacterVelocity' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, PreviousVelocity) == 0x000618, "Member 'ABP_Character_C::PreviousVelocity' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Speed) == 0x000630, "Member 'ABP_Character_C::Speed' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, IsMoving) == 0x000638, "Member 'ABP_Character_C::IsMoving' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, LastVelocityRotation) == 0x000640, "Member 'ABP_Character_C::LastVelocityRotation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, MovementInputAmount) == 0x000658, "Member 'ABP_Character_C::MovementInputAmount' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, HasMovementInput) == 0x000660, "Member 'ABP_Character_C::HasMovementInput' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, LastMovementInputRotation) == 0x000668, "Member 'ABP_Character_C::LastMovementInputRotation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, RepControlRotation) == 0x000680, "Member 'ABP_Character_C::RepControlRotation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, PreviousAimYaw) == 0x000698, "Member 'ABP_Character_C::PreviousAimYaw' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, MovementState) == 0x0006A0, "Member 'ABP_Character_C::MovementState' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Sprinting) == 0x0006A1, "Member 'ABP_Character_C::Sprinting' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Gait) == 0x0006A2, "Member 'ABP_Character_C::Gait' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, TargetRotation) == 0x0006A8, "Member 'ABP_Character_C::TargetRotation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, MaxWalkableSlope) == 0x0006C0, "Member 'ABP_Character_C::MaxWalkableSlope' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, FallingTraceSettings) == 0x0006C8, "Member 'ABP_Character_C::FallingTraceSettings' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, AimYawRate) == 0x0006E0, "Member 'ABP_Character_C::AimYawRate' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, ViewMode) == 0x0006E8, "Member 'ABP_Character_C::ViewMode' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, RotationMode) == 0x0006E9, "Member 'ABP_Character_C::RotationMode' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, CurrentMovementSettings) == 0x0006F0, "Member 'ABP_Character_C::CurrentMovementSettings' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, MainAnimInstance) == 0x000710, "Member 'ABP_Character_C::MainAnimInstance' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, MovementAction) == 0x000718, "Member 'ABP_Character_C::MovementAction' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Mantle_Params) == 0x000720, "Member 'ABP_Character_C::Mantle_Params' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, MantleAsset) == 0x000750, "Member 'ABP_Character_C::MantleAsset' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, MantleLedgeLS) == 0x000790, "Member 'ABP_Character_C::MantleLedgeLS' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, MantleTarget) == 0x000800, "Member 'ABP_Character_C::MantleTarget' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, MantleActualStartOffset) == 0x000860, "Member 'ABP_Character_C::MantleActualStartOffset' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, MantleAnimatedStartOffset) == 0x0008C0, "Member 'ABP_Character_C::MantleAnimatedStartOffset' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Pawn_Movement_Mode) == 0x000920, "Member 'ABP_Character_C::Pawn_Movement_Mode' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Rep_Attached_Characters) == 0x000928, "Member 'ABP_Character_C::Rep_Attached_Characters' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, InitialAttachedCharacters) == 0x000938, "Member 'ABP_Character_C::InitialAttachedCharacters' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, ConnectedChains) == 0x000948, "Member 'ABP_Character_C::ConnectedChains' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, InAirRotation) == 0x000958, "Member 'ABP_Character_C::InAirRotation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, OverlayState) == 0x000970, "Member 'ABP_Character_C::OverlayState' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, DesiredRotationMode) == 0x000971, "Member 'ABP_Character_C::DesiredRotationMode' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, PrevMovementState) == 0x000972, "Member 'ABP_Character_C::PrevMovementState' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, ActualStance) == 0x000973, "Member 'ABP_Character_C::ActualStance' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, GroundedTraceSettings) == 0x000974, "Member 'ABP_Character_C::GroundedTraceSettings' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, CurrentTyrolienne) == 0x000988, "Member 'ABP_Character_C::CurrentTyrolienne' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, JumpForce) == 0x000990, "Member 'ABP_Character_C::JumpForce' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Climbing) == 0x000998, "Member 'ABP_Character_C::Climbing' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, ClimbRotation) == 0x0009A0, "Member 'ABP_Character_C::ClimbRotation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, GridConstraint) == 0x0009B8, "Member 'ABP_Character_C::GridConstraint' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, bPull) == 0x0009C0, "Member 'ABP_Character_C::bPull' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, WaterVolumes) == 0x0009C4, "Member 'ABP_Character_C::WaterVolumes' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Swim) == 0x0009C8, "Member 'ABP_Character_C::Swim' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, PreviousActorRotation) == 0x0009D0, "Member 'ABP_Character_C::PreviousActorRotation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, RadialVel) == 0x0009E8, "Member 'ABP_Character_C::RadialVel' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, LeftHandLocation) == 0x000A00, "Member 'ABP_Character_C::LeftHandLocation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, RightHandLocation) == 0x000A18, "Member 'ABP_Character_C::RightHandLocation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, LocationBackup) == 0x000A30, "Member 'ABP_Character_C::LocationBackup' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, RepLocation) == 0x000A48, "Member 'ABP_Character_C::RepLocation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, PreviousCapsuleLocation) == 0x000A60, "Member 'ABP_Character_C::PreviousCapsuleLocation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Bouncing) == 0x000A78, "Member 'ABP_Character_C::Bouncing' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, CubeSockets) == 0x000A80, "Member 'ABP_Character_C::CubeSockets' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, IsSteppingUp) == 0x000A90, "Member 'ABP_Character_C::IsSteppingUp' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, IsSteppingDown) == 0x000A91, "Member 'ABP_Character_C::IsSteppingDown' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, IsJumping) == 0x000A92, "Member 'ABP_Character_C::IsJumping' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, MaxStepHeight) == 0x000A98, "Member 'ABP_Character_C::MaxStepHeight' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, DirectionLerpCurve) == 0x000AA0, "Member 'ABP_Character_C::DirectionLerpCurve' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, LerpedMovementForce) == 0x000AA8, "Member 'ABP_Character_C::LerpedMovementForce' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, HasJumped) == 0x000AC0, "Member 'ABP_Character_C::HasJumped' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, MantleAborting) == 0x000AC1, "Member 'ABP_Character_C::MantleAborting' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Pseudo) == 0x000AC8, "Member 'ABP_Character_C::Pseudo' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, FakePseudo) == 0x000AD8, "Member 'ABP_Character_C::FakePseudo' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, ClothColor) == 0x000AE8, "Member 'ABP_Character_C::ClothColor' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, FlyMode) == 0x000AF8, "Member 'ABP_Character_C::FlyMode' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, PullingChain) == 0x000B00, "Member 'ABP_Character_C::PullingChain' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, IsPlayingCinematic) == 0x000B08, "Member 'ABP_Character_C::IsPlayingCinematic' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, FlushTransformCache) == 0x000B10, "Member 'ABP_Character_C::FlushTransformCache' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Look_Around) == 0x000B70, "Member 'ABP_Character_C::Look_Around' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Chained) == 0x000B71, "Member 'ABP_Character_C::Chained' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, ChainVolumeVariation) == 0x000B78, "Member 'ABP_Character_C::ChainVolumeVariation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, AttractiveSun) == 0x000B80, "Member 'ABP_Character_C::AttractiveSun' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, IsDetectableByPlacingBlocks) == 0x000B88, "Member 'ABP_Character_C::IsDetectableByPlacingBlocks' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, PulledCharacter) == 0x000B90, "Member 'ABP_Character_C::PulledCharacter' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, CheckMovementTimer) == 0x000B98, "Member 'ABP_Character_C::CheckMovementTimer' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, ReplicationTreshold) == 0x000BA0, "Member 'ABP_Character_C::ReplicationTreshold' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, PreviousMoveForward) == 0x000BA8, "Member 'ABP_Character_C::PreviousMoveForward' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, PreviousMoveRight) == 0x000BB0, "Member 'ABP_Character_C::PreviousMoveRight' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, ClientRepLocation) == 0x000BB8, "Member 'ABP_Character_C::ClientRepLocation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, RepCapsuleYaw) == 0x000BD0, "Member 'ABP_Character_C::RepCapsuleYaw' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, CanReconciliateLocation) == 0x000BD8, "Member 'ABP_Character_C::CanReconciliateLocation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, RescueTransform) == 0x000BE0, "Member 'ABP_Character_C::RescueTransform' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, InMovingObject) == 0x000C40, "Member 'ABP_Character_C::InMovingObject' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, RepZAlpha) == 0x000C48, "Member 'ABP_Character_C::RepZAlpha' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, ReplicationScale) == 0x000C50, "Member 'ABP_Character_C::ReplicationScale' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, GravityErrorScale) == 0x000C58, "Member 'ABP_Character_C::GravityErrorScale' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, PreviousLocation) == 0x000C60, "Member 'ABP_Character_C::PreviousLocation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, LocationAtTime) == 0x000C78, "Member 'ABP_Character_C::LocationAtTime' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Timestamp) == 0x000CC8, "Member 'ABP_Character_C::Timestamp' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, LocationsAtTime) == 0x000CD0, "Member 'ABP_Character_C::LocationsAtTime' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, ServerRepLocation) == 0x000CE0, "Member 'ABP_Character_C::ServerRepLocation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, NewVar_0) == 0x000CF8, "Member 'ABP_Character_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, GroundedTemp) == 0x000D00, "Member 'ABP_Character_C::GroundedTemp' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, ClientLatency) == 0x000D08, "Member 'ABP_Character_C::ClientLatency' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, ClientReplicationSpeed) == 0x000D10, "Member 'ABP_Character_C::ClientReplicationSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, ServerReplicationSpeed) == 0x000D18, "Member 'ABP_Character_C::ServerReplicationSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Step_New_Location_Z) == 0x000D20, "Member 'ABP_Character_C::Step_New_Location_Z' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, GroundedComponentFloor) == 0x000D28, "Member 'ABP_Character_C::GroundedComponentFloor' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, IsSliding) == 0x000D30, "Member 'ABP_Character_C::IsSliding' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, SpringArmSpeed) == 0x000D38, "Member 'ABP_Character_C::SpringArmSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Balancier) == 0x000D40, "Member 'ABP_Character_C::Balancier' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, BalancierMaillon) == 0x000D48, "Member 'ABP_Character_C::BalancierMaillon' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, BalancierConstraint) == 0x000D50, "Member 'ABP_Character_C::BalancierConstraint' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, CurrentBalancier) == 0x000D58, "Member 'ABP_Character_C::CurrentBalancier' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, HasJumpedFromBalancier) == 0x000D60, "Member 'ABP_Character_C::HasJumpedFromBalancier' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, TickComponentsInSphere) == 0x000D68, "Member 'ABP_Character_C::TickComponentsInSphere' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, MaxFallSpeed) == 0x000D78, "Member 'ABP_Character_C::MaxFallSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, DynamicMaterials) == 0x000D80, "Member 'ABP_Character_C::DynamicMaterials' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Dead) == 0x000D90, "Member 'ABP_Character_C::Dead' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, LavaRef) == 0x000D98, "Member 'ABP_Character_C::LavaRef' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, HardSnapDistanceXY) == 0x000DA0, "Member 'ABP_Character_C::HardSnapDistanceXY' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, HardSnapDistanceZ) == 0x000DA8, "Member 'ABP_Character_C::HardSnapDistanceZ' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, ServerRepVelocity) == 0x000DB0, "Member 'ABP_Character_C::ServerRepVelocity' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, HardSnapZVelocityDifference) == 0x000DC8, "Member 'ABP_Character_C::HardSnapZVelocityDifference' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, DesyncDuration) == 0x000DD0, "Member 'ABP_Character_C::DesyncDuration' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, PlayerLocationResync) == 0x000DD8, "Member 'ABP_Character_C::PlayerLocationResync' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, ServerRepGrounded) == 0x000DF0, "Member 'ABP_Character_C::ServerRepGrounded' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, ResyncGrounded) == 0x000DF1, "Member 'ABP_Character_C::ResyncGrounded' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, ReplicationCurve) == 0x000DF8, "Member 'ABP_Character_C::ReplicationCurve' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, PreviousMoveForwardVector) == 0x000E00, "Member 'ABP_Character_C::PreviousMoveForwardVector' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, PreviousMoveRightVector) == 0x000E18, "Member 'ABP_Character_C::PreviousMoveRightVector' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, PreviousCapsuleRotation) == 0x000E30, "Member 'ABP_Character_C::PreviousCapsuleRotation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, RepMoveForward) == 0x000E38, "Member 'ABP_Character_C::RepMoveForward' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, RepMoveRight) == 0x000E40, "Member 'ABP_Character_C::RepMoveRight' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, CanHardSnap) == 0x000E48, "Member 'ABP_Character_C::CanHardSnap' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, PushedByObstacle) == 0x000E49, "Member 'ABP_Character_C::PushedByObstacle' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, HasStoppedGrounded) == 0x000E4A, "Member 'ABP_Character_C::HasStoppedGrounded' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, OnWaterSurface) == 0x000E4B, "Member 'ABP_Character_C::OnWaterSurface' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, StabilisationSocket) == 0x000E50, "Member 'ABP_Character_C::StabilisationSocket' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, InitialFieldOfView) == 0x000E58, "Member 'ABP_Character_C::InitialFieldOfView' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, FOV_Backup) == 0x000E5C, "Member 'ABP_Character_C::FOV_Backup' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, ChainFixSocket) == 0x000E60, "Member 'ABP_Character_C::ChainFixSocket' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, FixMaillonSocketName) == 0x000E68, "Member 'ABP_Character_C::FixMaillonSocketName' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, FlushJumpReplication) == 0x000E70, "Member 'ABP_Character_C::FlushJumpReplication' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Flotte) == 0x000E71, "Member 'ABP_Character_C::Flotte' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, HasWings) == 0x000E72, "Member 'ABP_Character_C::HasWings' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, AirControlShuffle) == 0x000E74, "Member 'ABP_Character_C::AirControlShuffle' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, NoMantleCheck) == 0x000E78, "Member 'ABP_Character_C::NoMantleCheck' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Mantling_in_Out_Pillar_BP) == 0x000E80, "Member 'ABP_Character_C::Mantling_in_Out_Pillar_BP' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, PostMantleStabilize) == 0x000E88, "Member 'ABP_Character_C::PostMantleStabilize' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, DesyncTemp) == 0x000E89, "Member 'ABP_Character_C::DesyncTemp' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, CanFixToGround) == 0x000E8A, "Member 'ABP_Character_C::CanFixToGround' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, EvaluateCustomDepth) == 0x000E8B, "Member 'ABP_Character_C::EvaluateCustomDepth' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, PreviousLocationForNotif) == 0x000E90, "Member 'ABP_Character_C::PreviousLocationForNotif' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, SafeLocationTimer) == 0x000EA8, "Member 'ABP_Character_C::SafeLocationTimer' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, PullStabilisation) == 0x000EB0, "Member 'ABP_Character_C::PullStabilisation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, OnIce) == 0x000EB1, "Member 'ABP_Character_C::OnIce' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, BallOnIceMaterial) == 0x000EB8, "Member 'ABP_Character_C::BallOnIceMaterial' has a wrong offset!");

}


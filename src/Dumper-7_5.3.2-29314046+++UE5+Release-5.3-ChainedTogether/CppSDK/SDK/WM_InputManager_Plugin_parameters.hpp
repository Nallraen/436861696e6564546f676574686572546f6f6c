#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WM_InputManager_Plugin

#include "Basic.hpp"

#include "WM_InputManager_Plugin_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function WM_InputManager_Plugin.WM_ControllerFunctionLib.Get_WM_InputManager
// 0x0008 (0x0008 - 0x0000)
struct WM_ControllerFunctionLib_Get_WM_InputManager final
{
public:
	class UWM_InputManager*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WM_ControllerFunctionLib_Get_WM_InputManager) == 0x000008, "Wrong alignment on WM_ControllerFunctionLib_Get_WM_InputManager");
static_assert(sizeof(WM_ControllerFunctionLib_Get_WM_InputManager) == 0x000008, "Wrong size on WM_ControllerFunctionLib_Get_WM_InputManager");
static_assert(offsetof(WM_ControllerFunctionLib_Get_WM_InputManager, ReturnValue) == 0x000000, "Member 'WM_ControllerFunctionLib_Get_WM_InputManager::ReturnValue' has a wrong offset!");

// Function WM_InputManager_Plugin.WM_Device.AssignDeviceToPlayerIndex
// 0x0004 (0x0004 - 0x0000)
struct WM_Device_AssignDeviceToPlayerIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WM_Device_AssignDeviceToPlayerIndex) == 0x000004, "Wrong alignment on WM_Device_AssignDeviceToPlayerIndex");
static_assert(sizeof(WM_Device_AssignDeviceToPlayerIndex) == 0x000004, "Wrong size on WM_Device_AssignDeviceToPlayerIndex");
static_assert(offsetof(WM_Device_AssignDeviceToPlayerIndex, Param_Index) == 0x000000, "Member 'WM_Device_AssignDeviceToPlayerIndex::Param_Index' has a wrong offset!");

// Function WM_InputManager_Plugin.WM_Device.isValidPlayerIndex
// 0x0001 (0x0001 - 0x0000)
struct WM_Device_IsValidPlayerIndex final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WM_Device_IsValidPlayerIndex) == 0x000001, "Wrong alignment on WM_Device_IsValidPlayerIndex");
static_assert(sizeof(WM_Device_IsValidPlayerIndex) == 0x000001, "Wrong size on WM_Device_IsValidPlayerIndex");
static_assert(offsetof(WM_Device_IsValidPlayerIndex, ReturnValue) == 0x000000, "Member 'WM_Device_IsValidPlayerIndex::ReturnValue' has a wrong offset!");

// Function WM_InputManager_Plugin.WM_Device_HID.GetRaw_Available_Axes
// 0x0010 (0x0010 - 0x0000)
struct WM_Device_HID_GetRaw_Available_Axes final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WM_Device_HID_GetRaw_Available_Axes) == 0x000008, "Wrong alignment on WM_Device_HID_GetRaw_Available_Axes");
static_assert(sizeof(WM_Device_HID_GetRaw_Available_Axes) == 0x000010, "Wrong size on WM_Device_HID_GetRaw_Available_Axes");
static_assert(offsetof(WM_Device_HID_GetRaw_Available_Axes, ReturnValue) == 0x000000, "Member 'WM_Device_HID_GetRaw_Available_Axes::ReturnValue' has a wrong offset!");

// Function WM_InputManager_Plugin.WM_Device_HID.GetRaw_Available_Buttons
// 0x0010 (0x0010 - 0x0000)
struct WM_Device_HID_GetRaw_Available_Buttons final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WM_Device_HID_GetRaw_Available_Buttons) == 0x000008, "Wrong alignment on WM_Device_HID_GetRaw_Available_Buttons");
static_assert(sizeof(WM_Device_HID_GetRaw_Available_Buttons) == 0x000010, "Wrong size on WM_Device_HID_GetRaw_Available_Buttons");
static_assert(offsetof(WM_Device_HID_GetRaw_Available_Buttons, ReturnValue) == 0x000000, "Member 'WM_Device_HID_GetRaw_Available_Buttons::ReturnValue' has a wrong offset!");

// Function WM_InputManager_Plugin.WM_Device_HID.GetRaw_Available_DPADs
// 0x0010 (0x0010 - 0x0000)
struct WM_Device_HID_GetRaw_Available_DPADs final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WM_Device_HID_GetRaw_Available_DPADs) == 0x000008, "Wrong alignment on WM_Device_HID_GetRaw_Available_DPADs");
static_assert(sizeof(WM_Device_HID_GetRaw_Available_DPADs) == 0x000010, "Wrong size on WM_Device_HID_GetRaw_Available_DPADs");
static_assert(offsetof(WM_Device_HID_GetRaw_Available_DPADs, ReturnValue) == 0x000000, "Member 'WM_Device_HID_GetRaw_Available_DPADs::ReturnValue' has a wrong offset!");

// Function WM_InputManager_Plugin.WM_Device_HID.GetRaw_ButtonValue
// 0x0008 (0x0008 - 0x0000)
struct WM_Device_HID_GetRaw_ButtonValue final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ButtonValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWM_KeyTriggerState                           KeyTriggerState;                                   // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C84[0x2];                                     // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WM_Device_HID_GetRaw_ButtonValue) == 0x000004, "Wrong alignment on WM_Device_HID_GetRaw_ButtonValue");
static_assert(sizeof(WM_Device_HID_GetRaw_ButtonValue) == 0x000008, "Wrong size on WM_Device_HID_GetRaw_ButtonValue");
static_assert(offsetof(WM_Device_HID_GetRaw_ButtonValue, Param_Index) == 0x000000, "Member 'WM_Device_HID_GetRaw_ButtonValue::Param_Index' has a wrong offset!");
static_assert(offsetof(WM_Device_HID_GetRaw_ButtonValue, ButtonValue) == 0x000004, "Member 'WM_Device_HID_GetRaw_ButtonValue::ButtonValue' has a wrong offset!");
static_assert(offsetof(WM_Device_HID_GetRaw_ButtonValue, KeyTriggerState) == 0x000005, "Member 'WM_Device_HID_GetRaw_ButtonValue::KeyTriggerState' has a wrong offset!");

// Function WM_InputManager_Plugin.WM_Device_HID.GetAxisKeyValue
// 0x0020 (0x0020 - 0x0000)
struct WM_Device_HID_GetAxisKeyValue final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AxisValue;                                         // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid_WM_Key;                                    // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C85[0x3];                                     // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WM_Device_HID_GetAxisKeyValue) == 0x000008, "Wrong alignment on WM_Device_HID_GetAxisKeyValue");
static_assert(sizeof(WM_Device_HID_GetAxisKeyValue) == 0x000020, "Wrong size on WM_Device_HID_GetAxisKeyValue");
static_assert(offsetof(WM_Device_HID_GetAxisKeyValue, Key) == 0x000000, "Member 'WM_Device_HID_GetAxisKeyValue::Key' has a wrong offset!");
static_assert(offsetof(WM_Device_HID_GetAxisKeyValue, AxisValue) == 0x000018, "Member 'WM_Device_HID_GetAxisKeyValue::AxisValue' has a wrong offset!");
static_assert(offsetof(WM_Device_HID_GetAxisKeyValue, IsValid_WM_Key) == 0x00001C, "Member 'WM_Device_HID_GetAxisKeyValue::IsValid_WM_Key' has a wrong offset!");

// Function WM_InputManager_Plugin.WM_Device_HID.GetButtonKeyValue
// 0x0020 (0x0020 - 0x0000)
struct WM_Device_HID_GetButtonKeyValue final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ButtonValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid_WM_Key;                                    // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C86[0x6];                                     // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WM_Device_HID_GetButtonKeyValue) == 0x000008, "Wrong alignment on WM_Device_HID_GetButtonKeyValue");
static_assert(sizeof(WM_Device_HID_GetButtonKeyValue) == 0x000020, "Wrong size on WM_Device_HID_GetButtonKeyValue");
static_assert(offsetof(WM_Device_HID_GetButtonKeyValue, Key) == 0x000000, "Member 'WM_Device_HID_GetButtonKeyValue::Key' has a wrong offset!");
static_assert(offsetof(WM_Device_HID_GetButtonKeyValue, ButtonValue) == 0x000018, "Member 'WM_Device_HID_GetButtonKeyValue::ButtonValue' has a wrong offset!");
static_assert(offsetof(WM_Device_HID_GetButtonKeyValue, IsValid_WM_Key) == 0x000019, "Member 'WM_Device_HID_GetButtonKeyValue::IsValid_WM_Key' has a wrong offset!");

// Function WM_InputManager_Plugin.WM_Device_HID.GetRaw_AxisData
// 0x00B0 (0x00B0 - 0x0000)
struct WM_Device_HID_GetRaw_AxisData final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C87[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWM_HID_AxisData                       ReturnValue;                                       // 0x0008(0x00A8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WM_Device_HID_GetRaw_AxisData) == 0x000008, "Wrong alignment on WM_Device_HID_GetRaw_AxisData");
static_assert(sizeof(WM_Device_HID_GetRaw_AxisData) == 0x0000B0, "Wrong size on WM_Device_HID_GetRaw_AxisData");
static_assert(offsetof(WM_Device_HID_GetRaw_AxisData, Param_Index) == 0x000000, "Member 'WM_Device_HID_GetRaw_AxisData::Param_Index' has a wrong offset!");
static_assert(offsetof(WM_Device_HID_GetRaw_AxisData, ReturnValue) == 0x000008, "Member 'WM_Device_HID_GetRaw_AxisData::ReturnValue' has a wrong offset!");

// Function WM_InputManager_Plugin.WM_Device_HID.GetRaw_AxisValue
// 0x0008 (0x0008 - 0x0000)
struct WM_Device_HID_GetRaw_AxisValue final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WM_Device_HID_GetRaw_AxisValue) == 0x000004, "Wrong alignment on WM_Device_HID_GetRaw_AxisValue");
static_assert(sizeof(WM_Device_HID_GetRaw_AxisValue) == 0x000008, "Wrong size on WM_Device_HID_GetRaw_AxisValue");
static_assert(offsetof(WM_Device_HID_GetRaw_AxisValue, Param_Index) == 0x000000, "Member 'WM_Device_HID_GetRaw_AxisValue::Param_Index' has a wrong offset!");
static_assert(offsetof(WM_Device_HID_GetRaw_AxisValue, ReturnValue) == 0x000004, "Member 'WM_Device_HID_GetRaw_AxisValue::ReturnValue' has a wrong offset!");

// Function WM_InputManager_Plugin.WM_Device_HID.GetRaw_DPADData
// 0x0038 (0x0038 - 0x0000)
struct WM_Device_HID_GetRaw_DPADData final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Up;                                                // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Down;                                              // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Left;                                              // 0x0006(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Right;                                             // 0x0007(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWM_AxisCodeTable                             AxisEnum;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C88[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AxisBindingCode;                                   // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AxisHEX;                                           // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Instance;                                          // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0034(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WM_Device_HID_GetRaw_DPADData) == 0x000008, "Wrong alignment on WM_Device_HID_GetRaw_DPADData");
static_assert(sizeof(WM_Device_HID_GetRaw_DPADData) == 0x000038, "Wrong size on WM_Device_HID_GetRaw_DPADData");
static_assert(offsetof(WM_Device_HID_GetRaw_DPADData, Param_Index) == 0x000000, "Member 'WM_Device_HID_GetRaw_DPADData::Param_Index' has a wrong offset!");
static_assert(offsetof(WM_Device_HID_GetRaw_DPADData, Up) == 0x000004, "Member 'WM_Device_HID_GetRaw_DPADData::Up' has a wrong offset!");
static_assert(offsetof(WM_Device_HID_GetRaw_DPADData, Down) == 0x000005, "Member 'WM_Device_HID_GetRaw_DPADData::Down' has a wrong offset!");
static_assert(offsetof(WM_Device_HID_GetRaw_DPADData, Left) == 0x000006, "Member 'WM_Device_HID_GetRaw_DPADData::Left' has a wrong offset!");
static_assert(offsetof(WM_Device_HID_GetRaw_DPADData, Right) == 0x000007, "Member 'WM_Device_HID_GetRaw_DPADData::Right' has a wrong offset!");
static_assert(offsetof(WM_Device_HID_GetRaw_DPADData, AxisEnum) == 0x000008, "Member 'WM_Device_HID_GetRaw_DPADData::AxisEnum' has a wrong offset!");
static_assert(offsetof(WM_Device_HID_GetRaw_DPADData, AxisBindingCode) == 0x000010, "Member 'WM_Device_HID_GetRaw_DPADData::AxisBindingCode' has a wrong offset!");
static_assert(offsetof(WM_Device_HID_GetRaw_DPADData, AxisHEX) == 0x000020, "Member 'WM_Device_HID_GetRaw_DPADData::AxisHEX' has a wrong offset!");
static_assert(offsetof(WM_Device_HID_GetRaw_DPADData, Instance) == 0x000030, "Member 'WM_Device_HID_GetRaw_DPADData::Instance' has a wrong offset!");
static_assert(offsetof(WM_Device_HID_GetRaw_DPADData, Value) == 0x000034, "Member 'WM_Device_HID_GetRaw_DPADData::Value' has a wrong offset!");

// Function WM_InputManager_Plugin.WM_HID_Joystick.AutodetectAxisConfig
// 0x0004 (0x0004 - 0x0000)
struct WM_HID_Joystick_AutodetectAxisConfig final
{
public:
	int32                                         Axis;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WM_HID_Joystick_AutodetectAxisConfig) == 0x000004, "Wrong alignment on WM_HID_Joystick_AutodetectAxisConfig");
static_assert(sizeof(WM_HID_Joystick_AutodetectAxisConfig) == 0x000004, "Wrong size on WM_HID_Joystick_AutodetectAxisConfig");
static_assert(offsetof(WM_HID_Joystick_AutodetectAxisConfig, Axis) == 0x000000, "Member 'WM_HID_Joystick_AutodetectAxisConfig::Axis' has a wrong offset!");

// Function WM_InputManager_Plugin.WM_HID_Joystick.Bind_InputKey
// 0x0028 (0x0028 - 0x0000)
struct WM_HID_Joystick_Bind_InputKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetBinding;                                     // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WM_HID_Joystick_Bind_InputKey) == 0x000008, "Wrong alignment on WM_HID_Joystick_Bind_InputKey");
static_assert(sizeof(WM_HID_Joystick_Bind_InputKey) == 0x000028, "Wrong size on WM_HID_Joystick_Bind_InputKey");
static_assert(offsetof(WM_HID_Joystick_Bind_InputKey, Key) == 0x000000, "Member 'WM_HID_Joystick_Bind_InputKey::Key' has a wrong offset!");
static_assert(offsetof(WM_HID_Joystick_Bind_InputKey, TargetBinding) == 0x000018, "Member 'WM_HID_Joystick_Bind_InputKey::TargetBinding' has a wrong offset!");

// Function WM_InputManager_Plugin.WM_HID_Joystick.GetAxisConfig
// 0x0014 (0x0014 - 0x0000)
struct WM_HID_Joystick_GetAxisConfig final
{
public:
	int32                                         AxisNumber;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWM_HID_AxisConfiguration              Config;                                            // 0x0004(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WM_HID_Joystick_GetAxisConfig) == 0x000004, "Wrong alignment on WM_HID_Joystick_GetAxisConfig");
static_assert(sizeof(WM_HID_Joystick_GetAxisConfig) == 0x000014, "Wrong size on WM_HID_Joystick_GetAxisConfig");
static_assert(offsetof(WM_HID_Joystick_GetAxisConfig, AxisNumber) == 0x000000, "Member 'WM_HID_Joystick_GetAxisConfig::AxisNumber' has a wrong offset!");
static_assert(offsetof(WM_HID_Joystick_GetAxisConfig, Config) == 0x000004, "Member 'WM_HID_Joystick_GetAxisConfig::Config' has a wrong offset!");

// Function WM_InputManager_Plugin.WM_HID_Joystick.GetBinding
// 0x0028 (0x0028 - 0x0000)
struct WM_HID_Joystick_GetBinding final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Binding;                                           // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WM_HID_Joystick_GetBinding) == 0x000008, "Wrong alignment on WM_HID_Joystick_GetBinding");
static_assert(sizeof(WM_HID_Joystick_GetBinding) == 0x000028, "Wrong size on WM_HID_Joystick_GetBinding");
static_assert(offsetof(WM_HID_Joystick_GetBinding, Key) == 0x000000, "Member 'WM_HID_Joystick_GetBinding::Key' has a wrong offset!");
static_assert(offsetof(WM_HID_Joystick_GetBinding, Binding) == 0x000018, "Member 'WM_HID_Joystick_GetBinding::Binding' has a wrong offset!");

// Function WM_InputManager_Plugin.WM_HID_Joystick.GetBindingOptions
// 0x0028 (0x0028 - 0x0000)
struct WM_HID_Joystick_GetBindingOptions final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Options;                                           // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WM_HID_Joystick_GetBindingOptions) == 0x000008, "Wrong alignment on WM_HID_Joystick_GetBindingOptions");
static_assert(sizeof(WM_HID_Joystick_GetBindingOptions) == 0x000028, "Wrong size on WM_HID_Joystick_GetBindingOptions");
static_assert(offsetof(WM_HID_Joystick_GetBindingOptions, Key) == 0x000000, "Member 'WM_HID_Joystick_GetBindingOptions::Key' has a wrong offset!");
static_assert(offsetof(WM_HID_Joystick_GetBindingOptions, Options) == 0x000018, "Member 'WM_HID_Joystick_GetBindingOptions::Options' has a wrong offset!");

// Function WM_InputManager_Plugin.WM_HID_Joystick.GetConfigurationMode
// 0x0004 (0x0004 - 0x0000)
struct WM_HID_Joystick_GetConfigurationMode final
{
public:
	int32                                         ConfigurationMode;                                 // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WM_HID_Joystick_GetConfigurationMode) == 0x000004, "Wrong alignment on WM_HID_Joystick_GetConfigurationMode");
static_assert(sizeof(WM_HID_Joystick_GetConfigurationMode) == 0x000004, "Wrong size on WM_HID_Joystick_GetConfigurationMode");
static_assert(offsetof(WM_HID_Joystick_GetConfigurationMode, ConfigurationMode) == 0x000000, "Member 'WM_HID_Joystick_GetConfigurationMode::ConfigurationMode' has a wrong offset!");

// Function WM_InputManager_Plugin.WM_HID_Joystick.ListenForKeyInput
// 0x0020 (0x0020 - 0x0000)
struct WM_HID_Joystick_ListenForKeyInput final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Sucess;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C8D[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WM_HID_Joystick_ListenForKeyInput) == 0x000008, "Wrong alignment on WM_HID_Joystick_ListenForKeyInput");
static_assert(sizeof(WM_HID_Joystick_ListenForKeyInput) == 0x000020, "Wrong size on WM_HID_Joystick_ListenForKeyInput");
static_assert(offsetof(WM_HID_Joystick_ListenForKeyInput, Key) == 0x000000, "Member 'WM_HID_Joystick_ListenForKeyInput::Key' has a wrong offset!");
static_assert(offsetof(WM_HID_Joystick_ListenForKeyInput, Sucess) == 0x000018, "Member 'WM_HID_Joystick_ListenForKeyInput::Sucess' has a wrong offset!");

// Function WM_InputManager_Plugin.WM_HID_Joystick.PressButton
// 0x0004 (0x0004 - 0x0000)
struct WM_HID_Joystick_PressButton final
{
public:
	int32                                         Button;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WM_HID_Joystick_PressButton) == 0x000004, "Wrong alignment on WM_HID_Joystick_PressButton");
static_assert(sizeof(WM_HID_Joystick_PressButton) == 0x000004, "Wrong size on WM_HID_Joystick_PressButton");
static_assert(offsetof(WM_HID_Joystick_PressButton, Button) == 0x000000, "Member 'WM_HID_Joystick_PressButton::Button' has a wrong offset!");

// Function WM_InputManager_Plugin.WM_HID_Joystick.RebindKeyInput
// 0x0020 (0x0020 - 0x0000)
struct WM_HID_Joystick_RebindKeyInput final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Sucess;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C8E[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WM_HID_Joystick_RebindKeyInput) == 0x000008, "Wrong alignment on WM_HID_Joystick_RebindKeyInput");
static_assert(sizeof(WM_HID_Joystick_RebindKeyInput) == 0x000020, "Wrong size on WM_HID_Joystick_RebindKeyInput");
static_assert(offsetof(WM_HID_Joystick_RebindKeyInput, Key) == 0x000000, "Member 'WM_HID_Joystick_RebindKeyInput::Key' has a wrong offset!");
static_assert(offsetof(WM_HID_Joystick_RebindKeyInput, Sucess) == 0x000018, "Member 'WM_HID_Joystick_RebindKeyInput::Sucess' has a wrong offset!");

// Function WM_InputManager_Plugin.WM_HID_Joystick.ResetAxisConfig
// 0x0004 (0x0004 - 0x0000)
struct WM_HID_Joystick_ResetAxisConfig final
{
public:
	int32                                         Axis;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WM_HID_Joystick_ResetAxisConfig) == 0x000004, "Wrong alignment on WM_HID_Joystick_ResetAxisConfig");
static_assert(sizeof(WM_HID_Joystick_ResetAxisConfig) == 0x000004, "Wrong size on WM_HID_Joystick_ResetAxisConfig");
static_assert(offsetof(WM_HID_Joystick_ResetAxisConfig, Axis) == 0x000000, "Member 'WM_HID_Joystick_ResetAxisConfig::Axis' has a wrong offset!");

// Function WM_InputManager_Plugin.WM_HID_Joystick.SetAxisConfig
// 0x0014 (0x0014 - 0x0000)
struct WM_HID_Joystick_SetAxisConfig final
{
public:
	int32                                         AxisNumber;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWM_HID_AxisConfiguration              Config;                                            // 0x0004(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WM_HID_Joystick_SetAxisConfig) == 0x000004, "Wrong alignment on WM_HID_Joystick_SetAxisConfig");
static_assert(sizeof(WM_HID_Joystick_SetAxisConfig) == 0x000014, "Wrong size on WM_HID_Joystick_SetAxisConfig");
static_assert(offsetof(WM_HID_Joystick_SetAxisConfig, AxisNumber) == 0x000000, "Member 'WM_HID_Joystick_SetAxisConfig::AxisNumber' has a wrong offset!");
static_assert(offsetof(WM_HID_Joystick_SetAxisConfig, Config) == 0x000004, "Member 'WM_HID_Joystick_SetAxisConfig::Config' has a wrong offset!");

// Function WM_InputManager_Plugin.WM_HID_Joystick.SetConfigurationMode
// 0x0004 (0x0004 - 0x0000)
struct WM_HID_Joystick_SetConfigurationMode final
{
public:
	int32                                         ConfigurationMode;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WM_HID_Joystick_SetConfigurationMode) == 0x000004, "Wrong alignment on WM_HID_Joystick_SetConfigurationMode");
static_assert(sizeof(WM_HID_Joystick_SetConfigurationMode) == 0x000004, "Wrong size on WM_HID_Joystick_SetConfigurationMode");
static_assert(offsetof(WM_HID_Joystick_SetConfigurationMode, ConfigurationMode) == 0x000000, "Member 'WM_HID_Joystick_SetConfigurationMode::ConfigurationMode' has a wrong offset!");

// Function WM_InputManager_Plugin.WM_HID_Joystick.UpdateAxisValue
// 0x0004 (0x0004 - 0x0000)
struct WM_HID_Joystick_UpdateAxisValue final
{
public:
	int32                                         Axis;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WM_HID_Joystick_UpdateAxisValue) == 0x000004, "Wrong alignment on WM_HID_Joystick_UpdateAxisValue");
static_assert(sizeof(WM_HID_Joystick_UpdateAxisValue) == 0x000004, "Wrong size on WM_HID_Joystick_UpdateAxisValue");
static_assert(offsetof(WM_HID_Joystick_UpdateAxisValue, Axis) == 0x000000, "Member 'WM_HID_Joystick_UpdateAxisValue::Axis' has a wrong offset!");

// Function WM_InputManager_Plugin.WM_InputManagerBase.GetActionInputs
// 0x0010 (0x0010 - 0x0000)
struct WM_InputManagerBase_GetActionInputs final
{
public:
	TArray<class FName>                           ButtonInputs;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WM_InputManagerBase_GetActionInputs) == 0x000008, "Wrong alignment on WM_InputManagerBase_GetActionInputs");
static_assert(sizeof(WM_InputManagerBase_GetActionInputs) == 0x000010, "Wrong size on WM_InputManagerBase_GetActionInputs");
static_assert(offsetof(WM_InputManagerBase_GetActionInputs, ButtonInputs) == 0x000000, "Member 'WM_InputManagerBase_GetActionInputs::ButtonInputs' has a wrong offset!");

// Function WM_InputManager_Plugin.WM_InputManagerBase.GetActionsListStringForKey
// 0x0028 (0x0028 - 0x0000)
struct WM_InputManagerBase_GetActionsListStringForKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActionsListString;                                 // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WM_InputManagerBase_GetActionsListStringForKey) == 0x000008, "Wrong alignment on WM_InputManagerBase_GetActionsListStringForKey");
static_assert(sizeof(WM_InputManagerBase_GetActionsListStringForKey) == 0x000028, "Wrong size on WM_InputManagerBase_GetActionsListStringForKey");
static_assert(offsetof(WM_InputManagerBase_GetActionsListStringForKey, Key) == 0x000000, "Member 'WM_InputManagerBase_GetActionsListStringForKey::Key' has a wrong offset!");
static_assert(offsetof(WM_InputManagerBase_GetActionsListStringForKey, ActionsListString) == 0x000018, "Member 'WM_InputManagerBase_GetActionsListStringForKey::ActionsListString' has a wrong offset!");

// Function WM_InputManager_Plugin.WM_InputManagerBase.GetAllInputBindingsForKey
// 0x0028 (0x0028 - 0x0000)
struct WM_InputManagerBase_GetAllInputBindingsForKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ActionsForKey;                                     // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WM_InputManagerBase_GetAllInputBindingsForKey) == 0x000008, "Wrong alignment on WM_InputManagerBase_GetAllInputBindingsForKey");
static_assert(sizeof(WM_InputManagerBase_GetAllInputBindingsForKey) == 0x000028, "Wrong size on WM_InputManagerBase_GetAllInputBindingsForKey");
static_assert(offsetof(WM_InputManagerBase_GetAllInputBindingsForKey, Key) == 0x000000, "Member 'WM_InputManagerBase_GetAllInputBindingsForKey::Key' has a wrong offset!");
static_assert(offsetof(WM_InputManagerBase_GetAllInputBindingsForKey, ActionsForKey) == 0x000018, "Member 'WM_InputManagerBase_GetAllInputBindingsForKey::ActionsForKey' has a wrong offset!");

// Function WM_InputManager_Plugin.WM_InputManagerBase.GetAllKeysForAction
// 0x0018 (0x0018 - 0x0000)
struct WM_InputManagerBase_GetAllKeysForAction final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           Bindings;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WM_InputManagerBase_GetAllKeysForAction) == 0x000008, "Wrong alignment on WM_InputManagerBase_GetAllKeysForAction");
static_assert(sizeof(WM_InputManagerBase_GetAllKeysForAction) == 0x000018, "Wrong size on WM_InputManagerBase_GetAllKeysForAction");
static_assert(offsetof(WM_InputManagerBase_GetAllKeysForAction, ActionName) == 0x000000, "Member 'WM_InputManagerBase_GetAllKeysForAction::ActionName' has a wrong offset!");
static_assert(offsetof(WM_InputManagerBase_GetAllKeysForAction, Bindings) == 0x000008, "Member 'WM_InputManagerBase_GetAllKeysForAction::Bindings' has a wrong offset!");

// Function WM_InputManager_Plugin.WM_InputManagerBase.GetAllKeysForAxis
// 0x0018 (0x0018 - 0x0000)
struct WM_InputManagerBase_GetAllKeysForAxis final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           Bindings;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WM_InputManagerBase_GetAllKeysForAxis) == 0x000008, "Wrong alignment on WM_InputManagerBase_GetAllKeysForAxis");
static_assert(sizeof(WM_InputManagerBase_GetAllKeysForAxis) == 0x000018, "Wrong size on WM_InputManagerBase_GetAllKeysForAxis");
static_assert(offsetof(WM_InputManagerBase_GetAllKeysForAxis, ActionName) == 0x000000, "Member 'WM_InputManagerBase_GetAllKeysForAxis::ActionName' has a wrong offset!");
static_assert(offsetof(WM_InputManagerBase_GetAllKeysForAxis, Bindings) == 0x000008, "Member 'WM_InputManagerBase_GetAllKeysForAxis::Bindings' has a wrong offset!");

// Function WM_InputManager_Plugin.WM_InputManagerBase.GetAxisInputs
// 0x0010 (0x0010 - 0x0000)
struct WM_InputManagerBase_GetAxisInputs final
{
public:
	TArray<class FName>                           InputAxisActions;                                  // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WM_InputManagerBase_GetAxisInputs) == 0x000008, "Wrong alignment on WM_InputManagerBase_GetAxisInputs");
static_assert(sizeof(WM_InputManagerBase_GetAxisInputs) == 0x000010, "Wrong size on WM_InputManagerBase_GetAxisInputs");
static_assert(offsetof(WM_InputManagerBase_GetAxisInputs, InputAxisActions) == 0x000000, "Member 'WM_InputManagerBase_GetAxisInputs::InputAxisActions' has a wrong offset!");

// Function WM_InputManager_Plugin.WM_InputManagerBase.OnDeviceButtonKeyEvent
// 0x0028 (0x0028 - 0x0000)
struct WM_InputManagerBase_OnDeviceButtonKeyEvent final
{
public:
	struct FKey                                   WM_Key;                                            // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWM_Device*                             Device;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWM_KeyTriggerState                           TriggerState;                                      // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C9B[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WM_InputManagerBase_OnDeviceButtonKeyEvent) == 0x000008, "Wrong alignment on WM_InputManagerBase_OnDeviceButtonKeyEvent");
static_assert(sizeof(WM_InputManagerBase_OnDeviceButtonKeyEvent) == 0x000028, "Wrong size on WM_InputManagerBase_OnDeviceButtonKeyEvent");
static_assert(offsetof(WM_InputManagerBase_OnDeviceButtonKeyEvent, WM_Key) == 0x000000, "Member 'WM_InputManagerBase_OnDeviceButtonKeyEvent::WM_Key' has a wrong offset!");
static_assert(offsetof(WM_InputManagerBase_OnDeviceButtonKeyEvent, Device) == 0x000018, "Member 'WM_InputManagerBase_OnDeviceButtonKeyEvent::Device' has a wrong offset!");
static_assert(offsetof(WM_InputManagerBase_OnDeviceButtonKeyEvent, TriggerState) == 0x000020, "Member 'WM_InputManagerBase_OnDeviceButtonKeyEvent::TriggerState' has a wrong offset!");

// Function WM_InputManager_Plugin.WM_InputManagerBase.setEnchancedInputContext
// 0x0008 (0x0008 - 0x0000)
struct WM_InputManagerBase_SetEnchancedInputContext final
{
public:
	class UInputMappingContext*                   InputMappingContext;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WM_InputManagerBase_SetEnchancedInputContext) == 0x000008, "Wrong alignment on WM_InputManagerBase_SetEnchancedInputContext");
static_assert(sizeof(WM_InputManagerBase_SetEnchancedInputContext) == 0x000008, "Wrong size on WM_InputManagerBase_SetEnchancedInputContext");
static_assert(offsetof(WM_InputManagerBase_SetEnchancedInputContext, InputMappingContext) == 0x000000, "Member 'WM_InputManagerBase_SetEnchancedInputContext::InputMappingContext' has a wrong offset!");

// Function WM_InputManager_Plugin.WM_InputManagerBase.SetNumberOfPlayers
// 0x0004 (0x0004 - 0x0000)
struct WM_InputManagerBase_SetNumberOfPlayers final
{
public:
	int32                                         NumPlayers;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WM_InputManagerBase_SetNumberOfPlayers) == 0x000004, "Wrong alignment on WM_InputManagerBase_SetNumberOfPlayers");
static_assert(sizeof(WM_InputManagerBase_SetNumberOfPlayers) == 0x000004, "Wrong size on WM_InputManagerBase_SetNumberOfPlayers");
static_assert(offsetof(WM_InputManagerBase_SetNumberOfPlayers, NumPlayers) == 0x000000, "Member 'WM_InputManagerBase_SetNumberOfPlayers::NumPlayers' has a wrong offset!");

// Function WM_InputManager_Plugin.WM_InputManagerBase.SwitchManagerMode
// 0x0010 (0x0010 - 0x0000)
struct WM_InputManagerBase_SwitchManagerMode final
{
public:
	class FString                                 Mode;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WM_InputManagerBase_SwitchManagerMode) == 0x000008, "Wrong alignment on WM_InputManagerBase_SwitchManagerMode");
static_assert(sizeof(WM_InputManagerBase_SwitchManagerMode) == 0x000010, "Wrong size on WM_InputManagerBase_SwitchManagerMode");
static_assert(offsetof(WM_InputManagerBase_SwitchManagerMode, Mode) == 0x000000, "Member 'WM_InputManagerBase_SwitchManagerMode::Mode' has a wrong offset!");

// Function WM_InputManager_Plugin.WM_InputManagerBase.SwitchManagerModeEnum
// 0x0001 (0x0001 - 0x0000)
struct WM_InputManagerBase_SwitchManagerModeEnum final
{
public:
	EWM_InputManagerMode                          Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WM_InputManagerBase_SwitchManagerModeEnum) == 0x000001, "Wrong alignment on WM_InputManagerBase_SwitchManagerModeEnum");
static_assert(sizeof(WM_InputManagerBase_SwitchManagerModeEnum) == 0x000001, "Wrong size on WM_InputManagerBase_SwitchManagerModeEnum");
static_assert(offsetof(WM_InputManagerBase_SwitchManagerModeEnum, Mode) == 0x000000, "Member 'WM_InputManagerBase_SwitchManagerModeEnum::Mode' has a wrong offset!");

// Function WM_InputManager_Plugin.WM_InputManager.Get_HidJoystickKeyType
// 0x0020 (0x0020 - 0x0000)
struct WM_InputManager_Get_HidJoystickKeyType final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWM_GamepadKeyType                            ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CA1[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WM_InputManager_Get_HidJoystickKeyType) == 0x000008, "Wrong alignment on WM_InputManager_Get_HidJoystickKeyType");
static_assert(sizeof(WM_InputManager_Get_HidJoystickKeyType) == 0x000020, "Wrong size on WM_InputManager_Get_HidJoystickKeyType");
static_assert(offsetof(WM_InputManager_Get_HidJoystickKeyType, Key) == 0x000000, "Member 'WM_InputManager_Get_HidJoystickKeyType::Key' has a wrong offset!");
static_assert(offsetof(WM_InputManager_Get_HidJoystickKeyType, ReturnValue) == 0x000018, "Member 'WM_InputManager_Get_HidJoystickKeyType::ReturnValue' has a wrong offset!");

// Function WM_InputManager_Plugin.WM_InputManager.GetCurrentProfileName
// 0x0010 (0x0010 - 0x0000)
struct WM_InputManager_GetCurrentProfileName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WM_InputManager_GetCurrentProfileName) == 0x000008, "Wrong alignment on WM_InputManager_GetCurrentProfileName");
static_assert(sizeof(WM_InputManager_GetCurrentProfileName) == 0x000010, "Wrong size on WM_InputManager_GetCurrentProfileName");
static_assert(offsetof(WM_InputManager_GetCurrentProfileName, ReturnValue) == 0x000000, "Member 'WM_InputManager_GetCurrentProfileName::ReturnValue' has a wrong offset!");

// Function WM_InputManager_Plugin.WM_InputManager.GetSelectedDevice
// 0x0008 (0x0008 - 0x0000)
struct WM_InputManager_GetSelectedDevice final
{
public:
	class UWM_Device*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WM_InputManager_GetSelectedDevice) == 0x000008, "Wrong alignment on WM_InputManager_GetSelectedDevice");
static_assert(sizeof(WM_InputManager_GetSelectedDevice) == 0x000008, "Wrong size on WM_InputManager_GetSelectedDevice");
static_assert(offsetof(WM_InputManager_GetSelectedDevice, ReturnValue) == 0x000000, "Member 'WM_InputManager_GetSelectedDevice::ReturnValue' has a wrong offset!");

// Function WM_InputManager_Plugin.WM_InputManager.GetSelectedGamepad
// 0x0008 (0x0008 - 0x0000)
struct WM_InputManager_GetSelectedGamepad final
{
public:
	class UWM_HID_Joystick*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WM_InputManager_GetSelectedGamepad) == 0x000008, "Wrong alignment on WM_InputManager_GetSelectedGamepad");
static_assert(sizeof(WM_InputManager_GetSelectedGamepad) == 0x000008, "Wrong size on WM_InputManager_GetSelectedGamepad");
static_assert(offsetof(WM_InputManager_GetSelectedGamepad, ReturnValue) == 0x000000, "Member 'WM_InputManager_GetSelectedGamepad::ReturnValue' has a wrong offset!");

// Function WM_InputManager_Plugin.WM_InputManager.LoadProfile
// 0x0010 (0x0010 - 0x0000)
struct WM_InputManager_LoadProfile final
{
public:
	class FString                                 ProfileName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WM_InputManager_LoadProfile) == 0x000008, "Wrong alignment on WM_InputManager_LoadProfile");
static_assert(sizeof(WM_InputManager_LoadProfile) == 0x000010, "Wrong size on WM_InputManager_LoadProfile");
static_assert(offsetof(WM_InputManager_LoadProfile, ProfileName) == 0x000000, "Member 'WM_InputManager_LoadProfile::ProfileName' has a wrong offset!");

// Function WM_InputManager_Plugin.WM_InputManager.SelectDevice
// 0x0008 (0x0008 - 0x0000)
struct WM_InputManager_SelectDevice final
{
public:
	class UWM_Device*                             DeviceToSelect;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WM_InputManager_SelectDevice) == 0x000008, "Wrong alignment on WM_InputManager_SelectDevice");
static_assert(sizeof(WM_InputManager_SelectDevice) == 0x000008, "Wrong size on WM_InputManager_SelectDevice");
static_assert(offsetof(WM_InputManager_SelectDevice, DeviceToSelect) == 0x000000, "Member 'WM_InputManager_SelectDevice::DeviceToSelect' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MovingRock

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MovingRock.BP_MovingRock_C
// 0x0098 (0x0330 - 0x0298)
class ABP_MovingRock_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UDecalComponent*                        Decal3;                                            // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        Decal2;                                            // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        Decal1;                                            // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        Decal;                                             // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Grass3;                                            // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Grass2;                                            // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Grass1;                                            // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Grass;                                             // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UC_TickOptimizer_C*                     C_TickOptimizer;                                   // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            PhysicsConstraint;                                 // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        Force;                                             // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxSpeed;                                          // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector                                RepLoc;                                            // 0x0318(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_MovingRock(int32 EntryPoint);
	void PlatformMovement();
	void PlatformReplication();
	void PlatformReset();
	void ReceiveTick(float DeltaSeconds);
	void Reset();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MovingRock_C">();
	}
	static class ABP_MovingRock_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MovingRock_C>();
	}
};
static_assert(alignof(ABP_MovingRock_C) == 0x000008, "Wrong alignment on ABP_MovingRock_C");
static_assert(sizeof(ABP_MovingRock_C) == 0x000330, "Wrong size on ABP_MovingRock_C");
static_assert(offsetof(ABP_MovingRock_C, UberGraphFrame) == 0x000298, "Member 'ABP_MovingRock_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_MovingRock_C, Decal3) == 0x0002A0, "Member 'ABP_MovingRock_C::Decal3' has a wrong offset!");
static_assert(offsetof(ABP_MovingRock_C, Decal2) == 0x0002A8, "Member 'ABP_MovingRock_C::Decal2' has a wrong offset!");
static_assert(offsetof(ABP_MovingRock_C, Decal1) == 0x0002B0, "Member 'ABP_MovingRock_C::Decal1' has a wrong offset!");
static_assert(offsetof(ABP_MovingRock_C, Decal) == 0x0002B8, "Member 'ABP_MovingRock_C::Decal' has a wrong offset!");
static_assert(offsetof(ABP_MovingRock_C, Grass3) == 0x0002C0, "Member 'ABP_MovingRock_C::Grass3' has a wrong offset!");
static_assert(offsetof(ABP_MovingRock_C, Grass2) == 0x0002C8, "Member 'ABP_MovingRock_C::Grass2' has a wrong offset!");
static_assert(offsetof(ABP_MovingRock_C, Grass1) == 0x0002D0, "Member 'ABP_MovingRock_C::Grass1' has a wrong offset!");
static_assert(offsetof(ABP_MovingRock_C, Grass) == 0x0002D8, "Member 'ABP_MovingRock_C::Grass' has a wrong offset!");
static_assert(offsetof(ABP_MovingRock_C, C_TickOptimizer) == 0x0002E0, "Member 'ABP_MovingRock_C::C_TickOptimizer' has a wrong offset!");
static_assert(offsetof(ABP_MovingRock_C, Box) == 0x0002E8, "Member 'ABP_MovingRock_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_MovingRock_C, PhysicsConstraint) == 0x0002F0, "Member 'ABP_MovingRock_C::PhysicsConstraint' has a wrong offset!");
static_assert(offsetof(ABP_MovingRock_C, StaticMesh) == 0x0002F8, "Member 'ABP_MovingRock_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_MovingRock_C, DefaultSceneRoot) == 0x000300, "Member 'ABP_MovingRock_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_MovingRock_C, Force) == 0x000308, "Member 'ABP_MovingRock_C::Force' has a wrong offset!");
static_assert(offsetof(ABP_MovingRock_C, MaxSpeed) == 0x000310, "Member 'ABP_MovingRock_C::MaxSpeed' has a wrong offset!");
static_assert(offsetof(ABP_MovingRock_C, RepLoc) == 0x000318, "Member 'ABP_MovingRock_C::RepLoc' has a wrong offset!");

}


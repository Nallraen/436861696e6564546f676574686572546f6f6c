#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NewClock

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_NewClock.BP_NewClock_C.ExecuteUbergraph_BP_NewClock
// 0x0008 (0x0008 - 0x0000)
struct BP_NewClock_C_ExecuteUbergraph_BP_NewClock final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NewClock_C_ExecuteUbergraph_BP_NewClock) == 0x000004, "Wrong alignment on BP_NewClock_C_ExecuteUbergraph_BP_NewClock");
static_assert(sizeof(BP_NewClock_C_ExecuteUbergraph_BP_NewClock) == 0x000008, "Wrong size on BP_NewClock_C_ExecuteUbergraph_BP_NewClock");
static_assert(offsetof(BP_NewClock_C_ExecuteUbergraph_BP_NewClock, EntryPoint) == 0x000000, "Member 'BP_NewClock_C_ExecuteUbergraph_BP_NewClock::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_ExecuteUbergraph_BP_NewClock, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'BP_NewClock_C_ExecuteUbergraph_BP_NewClock::K2Node_Event_DeltaSeconds' has a wrong offset!");

// Function BP_NewClock.BP_NewClock_C.IsSomeoneInside
// 0x0040 (0x0040 - 0x0000)
struct BP_NewClock_C_IsSomeoneInside final
{
public:
	TArray<class UBoxComponent*>                  Boxes;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A5C[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors;   // 0x0028(0x0010)(ReferenceParm)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsEmpty_ReturnValue;                // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A5D[0x2];                                     // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NewClock_C_IsSomeoneInside) == 0x000008, "Wrong alignment on BP_NewClock_C_IsSomeoneInside");
static_assert(sizeof(BP_NewClock_C_IsSomeoneInside) == 0x000040, "Wrong size on BP_NewClock_C_IsSomeoneInside");
static_assert(offsetof(BP_NewClock_C_IsSomeoneInside, Boxes) == 0x000000, "Member 'BP_NewClock_C_IsSomeoneInside::Boxes' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_IsSomeoneInside, ReturnValue) == 0x000010, "Member 'BP_NewClock_C_IsSomeoneInside::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_IsSomeoneInside, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'BP_NewClock_C_IsSomeoneInside::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_IsSomeoneInside, Temp_int_Array_Index_Variable) == 0x000018, "Member 'BP_NewClock_C_IsSomeoneInside::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_IsSomeoneInside, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'BP_NewClock_C_IsSomeoneInside::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_IsSomeoneInside, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_NewClock_C_IsSomeoneInside::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_IsSomeoneInside, CallFunc_GetOverlappingActors_OverlappingActors) == 0x000028, "Member 'BP_NewClock_C_IsSomeoneInside::CallFunc_GetOverlappingActors_OverlappingActors' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_IsSomeoneInside, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'BP_NewClock_C_IsSomeoneInside::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_IsSomeoneInside, CallFunc_Array_IsEmpty_ReturnValue) == 0x000039, "Member 'BP_NewClock_C_IsSomeoneInside::CallFunc_Array_IsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_IsSomeoneInside, CallFunc_Add_IntInt_ReturnValue) == 0x00003C, "Member 'BP_NewClock_C_IsSomeoneInside::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_NewClock.BP_NewClock_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_NewClock_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NewClock_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_NewClock_C_ReceiveTick");
static_assert(sizeof(BP_NewClock_C_ReceiveTick) == 0x000004, "Wrong size on BP_NewClock_C_ReceiveTick");
static_assert(offsetof(BP_NewClock_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_NewClock_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_NewClock.BP_NewClock_C.SetCadranTexture
// 0x0008 (0x0008 - 0x0000)
struct BP_NewClock_C_SetCadranTexture final
{
public:
	class UTexture*                               Value;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NewClock_C_SetCadranTexture) == 0x000008, "Wrong alignment on BP_NewClock_C_SetCadranTexture");
static_assert(sizeof(BP_NewClock_C_SetCadranTexture) == 0x000008, "Wrong size on BP_NewClock_C_SetCadranTexture");
static_assert(offsetof(BP_NewClock_C_SetCadranTexture, Value) == 0x000000, "Member 'BP_NewClock_C_SetCadranTexture::Value' has a wrong offset!");

// Function BP_NewClock.BP_NewClock_C.UpdateAiguilleRotations
// 0x0258 (0x0258 - 0x0000)
struct BP_NewClock_C_UpdateAiguilleRotations final
{
public:
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue_1;       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_ReturnValue;                    // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue_2;       // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue_3;       // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_AddLocalRotation_SweepHitResult;       // 0x0058(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	double                                        CallFunc_FInterpTo_ReturnValue_1;                  // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_AddLocalRotation_SweepHitResult_1;     // 0x0148(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	double                                        CallFunc_UpdateTurn_TurnRate;                      // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_UpdateTurn_TurnRate_1;                    // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast_1;           // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NewClock_C_UpdateAiguilleRotations) == 0x000008, "Wrong alignment on BP_NewClock_C_UpdateAiguilleRotations");
static_assert(sizeof(BP_NewClock_C_UpdateAiguilleRotations) == 0x000258, "Wrong size on BP_NewClock_C_UpdateAiguilleRotations");
static_assert(offsetof(BP_NewClock_C_UpdateAiguilleRotations, CallFunc_MakeRotator_ReturnValue) == 0x000000, "Member 'BP_NewClock_C_UpdateAiguilleRotations::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_UpdateAiguilleRotations, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000018, "Member 'BP_NewClock_C_UpdateAiguilleRotations::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_UpdateAiguilleRotations, CallFunc_GetWorldDeltaSeconds_ReturnValue_1) == 0x000020, "Member 'BP_NewClock_C_UpdateAiguilleRotations::CallFunc_GetWorldDeltaSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_UpdateAiguilleRotations, CallFunc_FInterpTo_ReturnValue) == 0x000028, "Member 'BP_NewClock_C_UpdateAiguilleRotations::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_UpdateAiguilleRotations, CallFunc_GetWorldDeltaSeconds_ReturnValue_2) == 0x000030, "Member 'BP_NewClock_C_UpdateAiguilleRotations::CallFunc_GetWorldDeltaSeconds_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_UpdateAiguilleRotations, CallFunc_GetWorldDeltaSeconds_ReturnValue_3) == 0x000038, "Member 'BP_NewClock_C_UpdateAiguilleRotations::CallFunc_GetWorldDeltaSeconds_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_UpdateAiguilleRotations, CallFunc_MakeRotator_ReturnValue_1) == 0x000040, "Member 'BP_NewClock_C_UpdateAiguilleRotations::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_UpdateAiguilleRotations, CallFunc_K2_AddLocalRotation_SweepHitResult) == 0x000058, "Member 'BP_NewClock_C_UpdateAiguilleRotations::CallFunc_K2_AddLocalRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_UpdateAiguilleRotations, CallFunc_FInterpTo_ReturnValue_1) == 0x000140, "Member 'BP_NewClock_C_UpdateAiguilleRotations::CallFunc_FInterpTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_UpdateAiguilleRotations, CallFunc_K2_AddLocalRotation_SweepHitResult_1) == 0x000148, "Member 'BP_NewClock_C_UpdateAiguilleRotations::CallFunc_K2_AddLocalRotation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_UpdateAiguilleRotations, CallFunc_UpdateTurn_TurnRate) == 0x000230, "Member 'BP_NewClock_C_UpdateAiguilleRotations::CallFunc_UpdateTurn_TurnRate' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_UpdateAiguilleRotations, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000238, "Member 'BP_NewClock_C_UpdateAiguilleRotations::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_UpdateAiguilleRotations, CallFunc_UpdateTurn_TurnRate_1) == 0x000240, "Member 'BP_NewClock_C_UpdateAiguilleRotations::CallFunc_UpdateTurn_TurnRate_1' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_UpdateAiguilleRotations, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000248, "Member 'BP_NewClock_C_UpdateAiguilleRotations::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_UpdateAiguilleRotations, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x000250, "Member 'BP_NewClock_C_UpdateAiguilleRotations::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_UpdateAiguilleRotations, CallFunc_MakeRotator_Yaw_ImplicitCast_1) == 0x000254, "Member 'BP_NewClock_C_UpdateAiguilleRotations::CallFunc_MakeRotator_Yaw_ImplicitCast_1' has a wrong offset!");

// Function BP_NewClock.BP_NewClock_C.UpdateCadran
// 0x0038 (0x0038 - 0x0000)
struct BP_NewClock_C_UpdateCadran final
{
public:
	bool                                          GrandeAiguilleGood;                                // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PetiteAiguilleGood;                                // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A5E[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue;           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue_1;         // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A5F[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_InRange_FloatFloat_Value_ImplicitCast;    // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_InRange_FloatFloat_Value_ImplicitCast_1;  // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NewClock_C_UpdateCadran) == 0x000008, "Wrong alignment on BP_NewClock_C_UpdateCadran");
static_assert(sizeof(BP_NewClock_C_UpdateCadran) == 0x000038, "Wrong size on BP_NewClock_C_UpdateCadran");
static_assert(offsetof(BP_NewClock_C_UpdateCadran, GrandeAiguilleGood) == 0x000000, "Member 'BP_NewClock_C_UpdateCadran::GrandeAiguilleGood' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_UpdateCadran, PetiteAiguilleGood) == 0x000001, "Member 'BP_NewClock_C_UpdateCadran::PetiteAiguilleGood' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_UpdateCadran, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'BP_NewClock_C_UpdateCadran::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_UpdateCadran, CallFunc_HasAuthority_ReturnValue) == 0x000003, "Member 'BP_NewClock_C_UpdateCadran::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_UpdateCadran, CallFunc_BooleanAND_ReturnValue) == 0x000004, "Member 'BP_NewClock_C_UpdateCadran::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_UpdateCadran, CallFunc_BreakRotator_Roll) == 0x000008, "Member 'BP_NewClock_C_UpdateCadran::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_UpdateCadran, CallFunc_BreakRotator_Pitch) == 0x00000C, "Member 'BP_NewClock_C_UpdateCadran::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_UpdateCadran, CallFunc_BreakRotator_Yaw) == 0x000010, "Member 'BP_NewClock_C_UpdateCadran::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_UpdateCadran, CallFunc_BreakRotator_Roll_1) == 0x000014, "Member 'BP_NewClock_C_UpdateCadran::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_UpdateCadran, CallFunc_BreakRotator_Pitch_1) == 0x000018, "Member 'BP_NewClock_C_UpdateCadran::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_UpdateCadran, CallFunc_BreakRotator_Yaw_1) == 0x00001C, "Member 'BP_NewClock_C_UpdateCadran::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_UpdateCadran, CallFunc_InRange_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_NewClock_C_UpdateCadran::CallFunc_InRange_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_UpdateCadran, CallFunc_InRange_FloatFloat_ReturnValue_1) == 0x000021, "Member 'BP_NewClock_C_UpdateCadran::CallFunc_InRange_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_UpdateCadran, CallFunc_InRange_FloatFloat_Value_ImplicitCast) == 0x000028, "Member 'BP_NewClock_C_UpdateCadran::CallFunc_InRange_FloatFloat_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_UpdateCadran, CallFunc_InRange_FloatFloat_Value_ImplicitCast_1) == 0x000030, "Member 'BP_NewClock_C_UpdateCadran::CallFunc_InRange_FloatFloat_Value_ImplicitCast_1' has a wrong offset!");

// Function BP_NewClock.BP_NewClock_C.UpdateTurn
// 0x0060 (0x0060 - 0x0000)
struct BP_NewClock_C_UpdateTurn final
{
public:
	bool                                          Param_GrandeAiguille;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A60[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TurnRate;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NewLocalVar;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A61[0x6];                                     // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBoxComponent*                          K2Node_Select_Default;                             // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          K2Node_Select_Default_1;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UBoxComponent*>                  K2Node_MakeArray_Array;                            // 0x0030(0x0010)(ReferenceParm, ContainsInstancedReference)
	TArray<class UBoxComponent*>                  K2Node_MakeArray_Array_1;                          // 0x0040(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_IsSomeoneInside_ReturnValue;              // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSomeoneInside_ReturnValue_1;            // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A62[0x6];                                     // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NewClock_C_UpdateTurn) == 0x000008, "Wrong alignment on BP_NewClock_C_UpdateTurn");
static_assert(sizeof(BP_NewClock_C_UpdateTurn) == 0x000060, "Wrong size on BP_NewClock_C_UpdateTurn");
static_assert(offsetof(BP_NewClock_C_UpdateTurn, Param_GrandeAiguille) == 0x000000, "Member 'BP_NewClock_C_UpdateTurn::Param_GrandeAiguille' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_UpdateTurn, TurnRate) == 0x000008, "Member 'BP_NewClock_C_UpdateTurn::TurnRate' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_UpdateTurn, NewLocalVar) == 0x000010, "Member 'BP_NewClock_C_UpdateTurn::NewLocalVar' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_UpdateTurn, Temp_bool_Variable) == 0x000018, "Member 'BP_NewClock_C_UpdateTurn::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_UpdateTurn, Temp_bool_Variable_1) == 0x000019, "Member 'BP_NewClock_C_UpdateTurn::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_UpdateTurn, K2Node_Select_Default) == 0x000020, "Member 'BP_NewClock_C_UpdateTurn::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_UpdateTurn, K2Node_Select_Default_1) == 0x000028, "Member 'BP_NewClock_C_UpdateTurn::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_UpdateTurn, K2Node_MakeArray_Array) == 0x000030, "Member 'BP_NewClock_C_UpdateTurn::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_UpdateTurn, K2Node_MakeArray_Array_1) == 0x000040, "Member 'BP_NewClock_C_UpdateTurn::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_UpdateTurn, CallFunc_IsSomeoneInside_ReturnValue) == 0x000050, "Member 'BP_NewClock_C_UpdateTurn::CallFunc_IsSomeoneInside_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_UpdateTurn, CallFunc_IsSomeoneInside_ReturnValue_1) == 0x000051, "Member 'BP_NewClock_C_UpdateTurn::CallFunc_IsSomeoneInside_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NewClock_C_UpdateTurn, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000058, "Member 'BP_NewClock_C_UpdateTurn::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_NewClock.BP_NewClock_C.UserConstructionScript
// 0x0008 (0x0008 - 0x0000)
struct BP_NewClock_C_UserConstructionScript final
{
public:
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NewClock_C_UserConstructionScript) == 0x000008, "Wrong alignment on BP_NewClock_C_UserConstructionScript");
static_assert(sizeof(BP_NewClock_C_UserConstructionScript) == 0x000008, "Wrong size on BP_NewClock_C_UserConstructionScript");
static_assert(offsetof(BP_NewClock_C_UserConstructionScript, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000000, "Member 'BP_NewClock_C_UserConstructionScript::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");

}


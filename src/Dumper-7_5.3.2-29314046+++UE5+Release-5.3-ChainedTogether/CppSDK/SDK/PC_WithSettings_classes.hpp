#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PC_WithSettings

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass PC_WithSettings.PC_WithSettings_C
// 0x0018 (0x0870 - 0x0858)
class APC_WithSettings_C : public APlayerController
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0858(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UUserWidget*                            ActiveSettingsMenu;                                // 0x0860(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          OnGamepad;                                         // 0x0868(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          First_Player_on_Keyboard;                          // 0x0869(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanEscape;                                         // 0x086A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Close_Settings();
	void CloseSettingsMenu();
	void ExecuteUbergraph_PC_WithSettings(int32 EntryPoint);
	void InpActEvt_AnyKey_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_Pause_K2Node_EnhancedInputActionEvent_1(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_PauseEditor_K2Node_EnhancedInputActionEvent_0(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	bool IsMouseKeyboard(const struct FKey& Key);
	void IsPlayerOnGamepad(bool* Gamepad);
	void OpenSettings();
	void ReceiveBeginPlay();
	void ShowControls();
	void ToggleSettings();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PC_WithSettings_C">();
	}
	static class APC_WithSettings_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APC_WithSettings_C>();
	}
};
static_assert(alignof(APC_WithSettings_C) == 0x000008, "Wrong alignment on APC_WithSettings_C");
static_assert(sizeof(APC_WithSettings_C) == 0x000870, "Wrong size on APC_WithSettings_C");
static_assert(offsetof(APC_WithSettings_C, UberGraphFrame) == 0x000858, "Member 'APC_WithSettings_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(APC_WithSettings_C, ActiveSettingsMenu) == 0x000860, "Member 'APC_WithSettings_C::ActiveSettingsMenu' has a wrong offset!");
static_assert(offsetof(APC_WithSettings_C, OnGamepad) == 0x000868, "Member 'APC_WithSettings_C::OnGamepad' has a wrong offset!");
static_assert(offsetof(APC_WithSettings_C, First_Player_on_Keyboard) == 0x000869, "Member 'APC_WithSettings_C::First_Player_on_Keyboard' has a wrong offset!");
static_assert(offsetof(APC_WithSettings_C, CanEscape) == 0x00086A, "Member 'APC_WithSettings_C::CanEscape' has a wrong offset!");

}


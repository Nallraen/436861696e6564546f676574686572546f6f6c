#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WM_InputManager_Plugin

#include "Basic.hpp"

#include "WM_InputManager_Plugin_classes.hpp"
#include "WM_InputManager_Plugin_parameters.hpp"


namespace SDK
{

// Function WM_InputManager_Plugin.WM_ControllerFunctionLib.Get_WM_InputManager
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UWM_InputManager*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWM_InputManager* UWM_ControllerFunctionLib::Get_WM_InputManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("WM_ControllerFunctionLib", "Get_WM_InputManager");

	Params::WM_ControllerFunctionLib_Get_WM_InputManager Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function WM_InputManager_Plugin.WM_Device.AssignDeviceToPlayerIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWM_Device::AssignDeviceToPlayerIndex(int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_Device", "AssignDeviceToPlayerIndex");

	Params::WM_Device_AssignDeviceToPlayerIndex Parms{};

	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WM_InputManager_Plugin.WM_Device.ClearDeviceInput
// (Final, Native, Public, BlueprintCallable)

void UWM_Device::ClearDeviceInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_Device", "ClearDeviceInput");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function WM_InputManager_Plugin.WM_Device.isValidPlayerIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWM_Device::IsValidPlayerIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_Device", "isValidPlayerIndex");

	Params::WM_Device_IsValidPlayerIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function WM_InputManager_Plugin.WM_Device_HID.GetRaw_Available_Axes
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<int32> UWM_Device_HID::GetRaw_Available_Axes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_Device_HID", "GetRaw_Available_Axes");

	Params::WM_Device_HID_GetRaw_Available_Axes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function WM_InputManager_Plugin.WM_Device_HID.GetRaw_Available_Buttons
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<int32> UWM_Device_HID::GetRaw_Available_Buttons()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_Device_HID", "GetRaw_Available_Buttons");

	Params::WM_Device_HID_GetRaw_Available_Buttons Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function WM_InputManager_Plugin.WM_Device_HID.GetRaw_Available_DPADs
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<int32> UWM_Device_HID::GetRaw_Available_DPADs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_Device_HID", "GetRaw_Available_DPADs");

	Params::WM_Device_HID_GetRaw_Available_DPADs Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function WM_InputManager_Plugin.WM_Device_HID.GetRaw_ButtonValue
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ButtonValue                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWM_KeyTriggerState                     KeyTriggerState                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWM_Device_HID::GetRaw_ButtonValue(int32 Param_Index, bool* ButtonValue, EWM_KeyTriggerState* KeyTriggerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_Device_HID", "GetRaw_ButtonValue");

	Params::WM_Device_HID_GetRaw_ButtonValue Parms{};

	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ButtonValue != nullptr)
		*ButtonValue = Parms.ButtonValue;

	if (KeyTriggerState != nullptr)
		*KeyTriggerState = Parms.KeyTriggerState;
}


// Function WM_InputManager_Plugin.WM_Device_HID.GetAxisKeyValue
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FKey                             Key                                                    (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AxisValue                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsValid_WM_Key                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWM_Device_HID::GetAxisKeyValue(const struct FKey& Key, float* AxisValue, bool* IsValid_WM_Key) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_Device_HID", "GetAxisKeyValue");

	Params::WM_Device_HID_GetAxisKeyValue Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AxisValue != nullptr)
		*AxisValue = Parms.AxisValue;

	if (IsValid_WM_Key != nullptr)
		*IsValid_WM_Key = Parms.IsValid_WM_Key;
}


// Function WM_InputManager_Plugin.WM_Device_HID.GetButtonKeyValue
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FKey                             Key                                                    (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ButtonValue                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsValid_WM_Key                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWM_Device_HID::GetButtonKeyValue(const struct FKey& Key, bool* ButtonValue, bool* IsValid_WM_Key) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_Device_HID", "GetButtonKeyValue");

	Params::WM_Device_HID_GetButtonKeyValue Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ButtonValue != nullptr)
		*ButtonValue = Parms.ButtonValue;

	if (IsValid_WM_Key != nullptr)
		*IsValid_WM_Key = Parms.IsValid_WM_Key;
}


// Function WM_InputManager_Plugin.WM_Device_HID.GetRaw_AxisData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FWM_HID_AxisData                 ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FWM_HID_AxisData UWM_Device_HID::GetRaw_AxisData(int32 Param_Index) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_Device_HID", "GetRaw_AxisData");

	Params::WM_Device_HID_GetRaw_AxisData Parms{};

	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function WM_InputManager_Plugin.WM_Device_HID.GetRaw_AxisValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UWM_Device_HID::GetRaw_AxisValue(int32 Param_Index) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_Device_HID", "GetRaw_AxisValue");

	Params::WM_Device_HID_GetRaw_AxisValue Parms{};

	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function WM_InputManager_Plugin.WM_Device_HID.GetRaw_DPADData
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Up                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Down                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Left                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Right                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWM_AxisCodeTable                       AxisEnum                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           AxisBindingCode                                        (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           AxisHEX                                                (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Instance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWM_Device_HID::GetRaw_DPADData(int32 Param_Index, bool* Up, bool* Down, bool* Left, bool* Right, EWM_AxisCodeTable* AxisEnum, class FString* AxisBindingCode, class FString* AxisHEX, int32* Instance, float* Value) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_Device_HID", "GetRaw_DPADData");

	Params::WM_Device_HID_GetRaw_DPADData Parms{};

	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Up != nullptr)
		*Up = Parms.Up;

	if (Down != nullptr)
		*Down = Parms.Down;

	if (Left != nullptr)
		*Left = Parms.Left;

	if (Right != nullptr)
		*Right = Parms.Right;

	if (AxisEnum != nullptr)
		*AxisEnum = Parms.AxisEnum;

	if (AxisBindingCode != nullptr)
		*AxisBindingCode = std::move(Parms.AxisBindingCode);

	if (AxisHEX != nullptr)
		*AxisHEX = std::move(Parms.AxisHEX);

	if (Instance != nullptr)
		*Instance = Parms.Instance;

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function WM_InputManager_Plugin.WM_HID_Joystick.AutodetectAxisConfig
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Axis                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWM_HID_Joystick::AutodetectAxisConfig(int32 Axis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_HID_Joystick", "AutodetectAxisConfig");

	Params::WM_HID_Joystick_AutodetectAxisConfig Parms{};

	Parms.Axis = Axis;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WM_InputManager_Plugin.WM_HID_Joystick.Bind_InputKey
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FKey                             Key                                                    (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           TargetBinding                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWM_HID_Joystick::Bind_InputKey(const struct FKey& Key, const class FString& TargetBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_HID_Joystick", "Bind_InputKey");

	Params::WM_HID_Joystick_Bind_InputKey Parms{};

	Parms.Key = std::move(Key);
	Parms.TargetBinding = std::move(TargetBinding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WM_InputManager_Plugin.WM_HID_Joystick.GetAxisConfig
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   AxisNumber                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FWM_HID_AxisConfiguration        Config                                                 (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)

void UWM_HID_Joystick::GetAxisConfig(int32 AxisNumber, struct FWM_HID_AxisConfiguration* Config)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_HID_Joystick", "GetAxisConfig");

	Params::WM_HID_Joystick_GetAxisConfig Parms{};

	Parms.AxisNumber = AxisNumber;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Config != nullptr)
		*Config = std::move(Parms.Config);
}


// Function WM_InputManager_Plugin.WM_HID_Joystick.GetBinding
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FKey                             Key                                                    (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Binding                                                (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWM_HID_Joystick::GetBinding(const struct FKey& Key, class FString* Binding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_HID_Joystick", "GetBinding");

	Params::WM_HID_Joystick_GetBinding Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Binding != nullptr)
		*Binding = std::move(Parms.Binding);
}


// Function WM_InputManager_Plugin.WM_HID_Joystick.GetBindingOptions
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FKey                             Key                                                    (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   Options                                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UWM_HID_Joystick::GetBindingOptions(const struct FKey& Key, TArray<class FString>* Options)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_HID_Joystick", "GetBindingOptions");

	Params::WM_HID_Joystick_GetBindingOptions Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Options != nullptr)
		*Options = std::move(Parms.Options);
}


// Function WM_InputManager_Plugin.WM_HID_Joystick.GetConfigurationMode
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   ConfigurationMode                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWM_HID_Joystick::GetConfigurationMode(int32* ConfigurationMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_HID_Joystick", "GetConfigurationMode");

	Params::WM_HID_Joystick_GetConfigurationMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ConfigurationMode != nullptr)
		*ConfigurationMode = Parms.ConfigurationMode;
}


// Function WM_InputManager_Plugin.WM_HID_Joystick.ListenForKeyInput
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FKey                             Key                                                    (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Sucess                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWM_HID_Joystick::ListenForKeyInput(const struct FKey& Key, bool* Sucess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_HID_Joystick", "ListenForKeyInput");

	Params::WM_HID_Joystick_ListenForKeyInput Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Sucess != nullptr)
		*Sucess = Parms.Sucess;
}


// Function WM_InputManager_Plugin.WM_HID_Joystick.PressButton
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// int32                                   Button                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWM_HID_Joystick::PressButton(int32 Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_HID_Joystick", "PressButton");

	Params::WM_HID_Joystick_PressButton Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WM_InputManager_Plugin.WM_HID_Joystick.RebindKeyInput
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FKey                             Key                                                    (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Sucess                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWM_HID_Joystick::RebindKeyInput(const struct FKey& Key, bool* Sucess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_HID_Joystick", "RebindKeyInput");

	Params::WM_HID_Joystick_RebindKeyInput Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Sucess != nullptr)
		*Sucess = Parms.Sucess;
}


// Function WM_InputManager_Plugin.WM_HID_Joystick.ResetAxisConfig
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Axis                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWM_HID_Joystick::ResetAxisConfig(int32 Axis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_HID_Joystick", "ResetAxisConfig");

	Params::WM_HID_Joystick_ResetAxisConfig Parms{};

	Parms.Axis = Axis;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WM_InputManager_Plugin.WM_HID_Joystick.ResetConfigurationMode
// (Final, Native, Public, BlueprintCallable)

void UWM_HID_Joystick::ResetConfigurationMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_HID_Joystick", "ResetConfigurationMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function WM_InputManager_Plugin.WM_HID_Joystick.SaveConfig
// (Final, Native, Public, BlueprintCallable)

void UWM_HID_Joystick::SaveConfig()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_HID_Joystick", "SaveConfig");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function WM_InputManager_Plugin.WM_HID_Joystick.SetAxisConfig
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   AxisNumber                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FWM_HID_AxisConfiguration        Config                                                 (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UWM_HID_Joystick::SetAxisConfig(int32 AxisNumber, const struct FWM_HID_AxisConfiguration& Config)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_HID_Joystick", "SetAxisConfig");

	Params::WM_HID_Joystick_SetAxisConfig Parms{};

	Parms.AxisNumber = AxisNumber;
	Parms.Config = std::move(Config);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WM_InputManager_Plugin.WM_HID_Joystick.SetConfigurationMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ConfigurationMode                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWM_HID_Joystick::SetConfigurationMode(int32 ConfigurationMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_HID_Joystick", "SetConfigurationMode");

	Params::WM_HID_Joystick_SetConfigurationMode Parms{};

	Parms.ConfigurationMode = ConfigurationMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WM_InputManager_Plugin.WM_HID_Joystick.UpdateAxisValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Axis                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWM_HID_Joystick::UpdateAxisValue(int32 Axis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_HID_Joystick", "UpdateAxisValue");

	Params::WM_HID_Joystick_UpdateAxisValue Parms{};

	Parms.Axis = Axis;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WM_InputManager_Plugin.WM_InputManagerBase.GetActionInputs
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class FName>                     ButtonInputs                                           (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UWM_InputManagerBase::GetActionInputs(TArray<class FName>* ButtonInputs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_InputManagerBase", "GetActionInputs");

	Params::WM_InputManagerBase_GetActionInputs Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ButtonInputs != nullptr)
		*ButtonInputs = std::move(Parms.ButtonInputs);
}


// Function WM_InputManager_Plugin.WM_InputManagerBase.GetActionsListStringForKey
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKey                             Key                                                    (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ActionsListString                                      (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWM_InputManagerBase::GetActionsListStringForKey(const struct FKey& Key, class FString* ActionsListString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_InputManagerBase", "GetActionsListStringForKey");

	Params::WM_InputManagerBase_GetActionsListStringForKey Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ActionsListString != nullptr)
		*ActionsListString = std::move(Parms.ActionsListString);
}


// Function WM_InputManager_Plugin.WM_InputManagerBase.GetAllInputBindingsForKey
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKey                             Key                                                    (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     ActionsForKey                                          (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UWM_InputManagerBase::GetAllInputBindingsForKey(const struct FKey& Key, TArray<class FName>* ActionsForKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_InputManagerBase", "GetAllInputBindingsForKey");

	Params::WM_InputManagerBase_GetAllInputBindingsForKey Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ActionsForKey != nullptr)
		*ActionsForKey = std::move(Parms.ActionsForKey);
}


// Function WM_InputManager_Plugin.WM_InputManagerBase.GetAllKeysForAction
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ActionName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FKey>                     Bindings                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UWM_InputManagerBase::GetAllKeysForAction(class FName ActionName, TArray<struct FKey>* Bindings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_InputManagerBase", "GetAllKeysForAction");

	Params::WM_InputManagerBase_GetAllKeysForAction Parms{};

	Parms.ActionName = ActionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Bindings != nullptr)
		*Bindings = std::move(Parms.Bindings);
}


// Function WM_InputManager_Plugin.WM_InputManagerBase.GetAllKeysForAxis
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ActionName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FKey>                     Bindings                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UWM_InputManagerBase::GetAllKeysForAxis(class FName ActionName, TArray<struct FKey>* Bindings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_InputManagerBase", "GetAllKeysForAxis");

	Params::WM_InputManagerBase_GetAllKeysForAxis Parms{};

	Parms.ActionName = ActionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Bindings != nullptr)
		*Bindings = std::move(Parms.Bindings);
}


// Function WM_InputManager_Plugin.WM_InputManagerBase.GetAxisInputs
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class FName>                     InputAxisActions                                       (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UWM_InputManagerBase::GetAxisInputs(TArray<class FName>* InputAxisActions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_InputManagerBase", "GetAxisInputs");

	Params::WM_InputManagerBase_GetAxisInputs Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InputAxisActions != nullptr)
		*InputAxisActions = std::move(Parms.InputAxisActions);
}


// Function WM_InputManager_Plugin.WM_InputManagerBase.InitializeAPI
// (Native, Public, BlueprintCallable)

void UWM_InputManagerBase::InitializeAPI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_InputManagerBase", "InitializeAPI");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function WM_InputManager_Plugin.WM_InputManagerBase.OnDeviceButtonKeyEvent
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FKey                             WM_Key                                                 (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWM_Device*                       Device                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWM_KeyTriggerState                     TriggerState                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWM_InputManagerBase::OnDeviceButtonKeyEvent(const struct FKey& WM_Key, class UWM_Device* Device, EWM_KeyTriggerState* TriggerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_InputManagerBase", "OnDeviceButtonKeyEvent");

	Params::WM_InputManagerBase_OnDeviceButtonKeyEvent Parms{};

	Parms.WM_Key = std::move(WM_Key);
	Parms.Device = Device;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (TriggerState != nullptr)
		*TriggerState = Parms.TriggerState;
}


// Function WM_InputManager_Plugin.WM_InputManagerBase.setEnchancedInputContext
// (Native, Public, BlueprintCallable)
// Parameters:
// class UInputMappingContext*             InputMappingContext                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWM_InputManagerBase::SetEnchancedInputContext(class UInputMappingContext* InputMappingContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_InputManagerBase", "setEnchancedInputContext");

	Params::WM_InputManagerBase_SetEnchancedInputContext Parms{};

	Parms.InputMappingContext = InputMappingContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WM_InputManager_Plugin.WM_InputManagerBase.SetNumberOfPlayers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NumPlayers                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWM_InputManagerBase::SetNumberOfPlayers(int32 NumPlayers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_InputManagerBase", "SetNumberOfPlayers");

	Params::WM_InputManagerBase_SetNumberOfPlayers Parms{};

	Parms.NumPlayers = NumPlayers;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WM_InputManager_Plugin.WM_InputManagerBase.SwitchManagerMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Mode                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWM_InputManagerBase::SwitchManagerMode(const class FString& Mode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_InputManagerBase", "SwitchManagerMode");

	Params::WM_InputManagerBase_SwitchManagerMode Parms{};

	Parms.Mode = std::move(Mode);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WM_InputManager_Plugin.WM_InputManagerBase.SwitchManagerModeEnum
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EWM_InputManagerMode                    Mode                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWM_InputManagerBase::SwitchManagerModeEnum(EWM_InputManagerMode Mode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_InputManagerBase", "SwitchManagerModeEnum");

	Params::WM_InputManagerBase_SwitchManagerModeEnum Parms{};

	Parms.Mode = Mode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WM_InputManager_Plugin.WM_InputManager.BeginUMG
// (Final, Native, Public, BlueprintCallable)

void UWM_InputManager::BeginUMG()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_InputManager", "BeginUMG");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function WM_InputManager_Plugin.WM_InputManager.Get_HidJoystickKeyType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FKey                             Key                                                    (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWM_GamepadKeyType                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EWM_GamepadKeyType UWM_InputManager::Get_HidJoystickKeyType(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_InputManager", "Get_HidJoystickKeyType");

	Params::WM_InputManager_Get_HidJoystickKeyType Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function WM_InputManager_Plugin.WM_InputManager.GetCurrentProfileName
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UWM_InputManager::GetCurrentProfileName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_InputManager", "GetCurrentProfileName");

	Params::WM_InputManager_GetCurrentProfileName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function WM_InputManager_Plugin.WM_InputManager.GetSelectedDevice
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWM_Device*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWM_Device* UWM_InputManager::GetSelectedDevice()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_InputManager", "GetSelectedDevice");

	Params::WM_InputManager_GetSelectedDevice Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function WM_InputManager_Plugin.WM_InputManager.GetSelectedGamepad
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWM_HID_Joystick*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWM_HID_Joystick* UWM_InputManager::GetSelectedGamepad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_InputManager", "GetSelectedGamepad");

	Params::WM_InputManager_GetSelectedGamepad Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function WM_InputManager_Plugin.WM_InputManager.LoadProfile
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ProfileName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWM_InputManager::LoadProfile(const class FString& ProfileName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_InputManager", "LoadProfile");

	Params::WM_InputManager_LoadProfile Parms{};

	Parms.ProfileName = std::move(ProfileName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WM_InputManager_Plugin.WM_InputManager.OpenSupportWebsite
// (Final, Native, Public, BlueprintCallable)

void UWM_InputManager::OpenSupportWebsite()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_InputManager", "OpenSupportWebsite");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function WM_InputManager_Plugin.WM_InputManager.SelectDevice
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWM_Device*                       DeviceToSelect                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWM_InputManager::SelectDevice(class UWM_Device* DeviceToSelect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WM_InputManager", "SelectDevice");

	Params::WM_InputManager_SelectDevice Parms{};

	Parms.DeviceToSelect = DeviceToSelect;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}


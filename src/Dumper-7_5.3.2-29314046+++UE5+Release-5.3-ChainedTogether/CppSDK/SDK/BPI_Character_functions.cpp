#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_Character

#include "Basic.hpp"

#include "BPI_Character_classes.hpp"
#include "BPI_Character_parameters.hpp"


namespace SDK
{

// Function BPI_Character.BPI_Character_C.ActivateCollisions
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Active                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::ActivateCollisions(bool Active)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "ActivateCollisions");

	Params::BPI_Character_C_ActivateCollisions Parms{};

	Parms.Active = Active;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Character.BPI_Character_C.Add Character Constraint
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Constraint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::Add_Character_Constraint(class AActor* Constraint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "Add Character Constraint");

	Params::BPI_Character_C_Add_Character_Constraint Parms{};

	Parms.Constraint = Constraint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Character.BPI_Character_C.AddAttachedCharacter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::AddAttachedCharacter(class APawn* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "AddAttachedCharacter");

	Params::BPI_Character_C_AddAttachedCharacter Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Character.BPI_Character_C.AddChainPhysic
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Physics                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UStaticMeshComponent*             Comp                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::AddChainPhysic(class UObject* Physics, class UStaticMeshComponent* Comp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "AddChainPhysic");

	Params::BPI_Character_C_AddChainPhysic Parms{};

	Parms.Physics = Physics;
	Parms.Comp = Comp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Character.BPI_Character_C.AddChainSocket
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              Socket                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::AddChainSocket(class UPrimitiveComponent* Socket)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "AddChainSocket");

	Params::BPI_Character_C_AddChainSocket Parms{};

	Parms.Socket = Socket;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Character.BPI_Character_C.AddConnectedChain
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Chain                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::AddConnectedChain(class AActor* Chain)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "AddConnectedChain");

	Params::BPI_Character_C_AddConnectedChain Parms{};

	Parms.Chain = Chain;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Character.BPI_Character_C.AddForce
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Vector                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    MakeSlide                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  StabilizeSpeed                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    PushedByTrain                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ShuffleFixToGround                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::AddForce(const struct FVector& Vector, bool MakeSlide, double StabilizeSpeed, bool PushedByTrain, bool ShuffleFixToGround)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "AddForce");

	Params::BPI_Character_C_AddForce Parms{};

	Parms.Vector = std::move(Vector);
	Parms.MakeSlide = MakeSlide;
	Parms.StabilizeSpeed = StabilizeSpeed;
	Parms.PushedByTrain = PushedByTrain;
	Parms.ShuffleFixToGround = ShuffleFixToGround;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Character.BPI_Character_C.AddImpulseToCar
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Impulse                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::AddImpulseToCar(const struct FVector& Impulse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "AddImpulseToCar");

	Params::BPI_Character_C_AddImpulseToCar Parms{};

	Parms.Impulse = std::move(Impulse);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Character.BPI_Character_C.AddImpulseToCharacter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Impulse                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    OverrideVelocityZ                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    StopClimb                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ShuffleAirControl                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IgnoreDoOnce                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    PushedByObstacle                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::AddImpulseToCharacter(const struct FVector& Impulse, bool OverrideVelocityZ, bool StopClimb, bool ShuffleAirControl, bool IgnoreDoOnce, bool PushedByObstacle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "AddImpulseToCharacter");

	Params::BPI_Character_C_AddImpulseToCharacter Parms{};

	Parms.Impulse = std::move(Impulse);
	Parms.OverrideVelocityZ = OverrideVelocityZ;
	Parms.StopClimb = StopClimb;
	Parms.ShuffleAirControl = ShuffleAirControl;
	Parms.IgnoreDoOnce = IgnoreDoOnce;
	Parms.PushedByObstacle = PushedByObstacle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Character.BPI_Character_C.AddWaterVolume
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Remove                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::AddWaterVolume(bool Remove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "AddWaterVolume");

	Params::BPI_Character_C_AddWaterVolume Parms{};

	Parms.Remove = Remove;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Character.BPI_Character_C.AnulateCharacterVelocity
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::AnulateCharacterVelocity(double Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "AnulateCharacterVelocity");

	Params::BPI_Character_C_AnulateCharacterVelocity Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Character.BPI_Character_C.BeAttractedBySun
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              SunMesh                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::BeAttractedBySun(class UPrimitiveComponent* SunMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "BeAttractedBySun");

	Params::BPI_Character_C_BeAttractedBySun Parms{};

	Parms.SunMesh = SunMesh;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Character.BPI_Character_C.BeginCinematic
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       BeginTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::BeginCinematic(const struct FTransform& BeginTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "BeginCinematic");

	Params::BPI_Character_C_BeginCinematic Parms{};

	Parms.BeginTransform = std::move(BeginTransform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Character.BPI_Character_C.BeginPullOtherCharacter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    BeginPull                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherCharacter                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::BeginPullOtherCharacter(bool BeginPull, class AActor* OtherCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "BeginPullOtherCharacter");

	Params::BPI_Character_C_BeginPullOtherCharacter Parms{};

	Parms.BeginPull = BeginPull;
	Parms.OtherCharacter = OtherCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Character.BPI_Character_C.ChangeCurrentVehicle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Vehicle                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::ChangeCurrentVehicle(class AActor* Vehicle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "ChangeCurrentVehicle");

	Params::BPI_Character_C_ChangeCurrentVehicle Parms{};

	Parms.Vehicle = Vehicle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Character.BPI_Character_C.Character Bounce
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Force                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::Character_Bounce(double Force)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "Character Bounce");

	Params::BPI_Character_C_Character_Bounce Parms{};

	Parms.Force = Force;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Character.BPI_Character_C.EnableMovements
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Character_C::EnableMovements()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "EnableMovements");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_Character.BPI_Character_C.EndCinematic
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Character_C::EndCinematic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "EndCinematic");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_Character.BPI_Character_C.Get Belt Fall Cam Loc Rot
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Loc                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rot                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_Character_C::Get_Belt_Fall_Cam_Loc_Rot(struct FVector* Loc, struct FRotator* Rot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "Get Belt Fall Cam Loc Rot");

	Params::BPI_Character_C_Get_Belt_Fall_Cam_Loc_Rot Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Loc != nullptr)
		*Loc = std::move(Parms.Loc);

	if (Rot != nullptr)
		*Rot = std::move(Parms.Rot);
}


// Function BPI_Character.BPI_Character_C.GetAnimVariables
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Jump                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Fall                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          RadialVelocity                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        MoveInput                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Climb                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Pull                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           PulledCharacter                                        (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    IsDriving                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          DriveLeftHand                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          DriveRightHand                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    LookAround                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::GetAnimVariables(bool* Jump, bool* Fall, struct FVector* RadialVelocity, struct FVector2D* MoveInput, bool* Climb, bool* Pull, class AActor** PulledCharacter, bool* IsDriving, struct FVector* DriveLeftHand, struct FVector* DriveRightHand, bool* LookAround)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "GetAnimVariables");

	Params::BPI_Character_C_GetAnimVariables Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Jump != nullptr)
		*Jump = Parms.Jump;

	if (Fall != nullptr)
		*Fall = Parms.Fall;

	if (RadialVelocity != nullptr)
		*RadialVelocity = std::move(Parms.RadialVelocity);

	if (MoveInput != nullptr)
		*MoveInput = std::move(Parms.MoveInput);

	if (Climb != nullptr)
		*Climb = Parms.Climb;

	if (Pull != nullptr)
		*Pull = Parms.Pull;

	if (PulledCharacter != nullptr)
		*PulledCharacter = Parms.PulledCharacter;

	if (IsDriving != nullptr)
		*IsDriving = Parms.IsDriving;

	if (DriveLeftHand != nullptr)
		*DriveLeftHand = std::move(Parms.DriveLeftHand);

	if (DriveRightHand != nullptr)
		*DriveRightHand = std::move(Parms.DriveRightHand);

	if (LookAround != nullptr)
		*LookAround = Parms.LookAround;
}


// Function BPI_Character.BPI_Character_C.GetAttachedCharacters
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class AActor*> IBPI_Character_C::GetAttachedCharacters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "GetAttachedCharacters");

	Params::BPI_Character_C_GetAttachedCharacters Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BPI_Character.BPI_Character_C.GetBaseLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::GetBaseLocation(struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "GetBaseLocation");

	Params::BPI_Character_C_GetBaseLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function BPI_Character.BPI_Character_C.GetBeltLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::GetBeltLocation(struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "GetBeltLocation");

	Params::BPI_Character_C_GetBeltLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function BPI_Character.BPI_Character_C.GetBeltSocket
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneComponent*                  Comp                                                   (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::GetBeltSocket(class USceneComponent** Comp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "GetBeltSocket");

	Params::BPI_Character_C_GetBeltSocket Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Comp != nullptr)
		*Comp = Parms.Comp;
}


// Function BPI_Character.BPI_Character_C.GetCapsuleBase
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USphereComponent*                 base                                                   (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::GetCapsuleBase(class USphereComponent** base)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "GetCapsuleBase");

	Params::BPI_Character_C_GetCapsuleBase Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (base != nullptr)
		*base = Parms.base;
}


// Function BPI_Character.BPI_Character_C.GetCapsuleComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCapsuleComponent*                Capsule                                                (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::GetCapsuleComponent(class UCapsuleComponent** Capsule)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "GetCapsuleComponent");

	Params::BPI_Character_C_GetCapsuleComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Capsule != nullptr)
		*Capsule = Parms.Capsule;
}


// Function BPI_Character.BPI_Character_C.GetCapsuleLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::GetCapsuleLocation(struct FVector* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "GetCapsuleLocation");

	Params::BPI_Character_C_GetCapsuleLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = std::move(Parms.NewParam);
}


// Function BPI_Character.BPI_Character_C.GetCapsuleRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_Character_C::GetCapsuleRotation(struct FRotator* Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "GetCapsuleRotation");

	Params::BPI_Character_C_GetCapsuleRotation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}


// Function BPI_Character.BPI_Character_C.GetCharacter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_ChoosenChar                           Character                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::GetCharacter(E_ChoosenChar* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "GetCharacter");

	Params::BPI_Character_C_GetCharacter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Character != nullptr)
		*Character = Parms.Character;
}


// Function BPI_Character.BPI_Character_C.GetConnectedChains
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   Chains                                                 (Parm, OutParm)

void IBPI_Character_C::GetConnectedChains(TArray<class AActor*>* Chains)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "GetConnectedChains");

	Params::BPI_Character_C_GetConnectedChains Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Chains != nullptr)
		*Chains = std::move(Parms.Chains);
}


// Function BPI_Character.BPI_Character_C.GetCurrentVehicle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Vehicle                                                (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::GetCurrentVehicle(class AActor** Vehicle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "GetCurrentVehicle");

	Params::BPI_Character_C_GetCurrentVehicle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Vehicle != nullptr)
		*Vehicle = Parms.Vehicle;
}


// Function BPI_Character.BPI_Character_C.GetFakeChainSocket
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneComponent*                  Socket                                                 (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::GetFakeChainSocket(class USceneComponent** Socket)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "GetFakeChainSocket");

	Params::BPI_Character_C_GetFakeChainSocket Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Socket != nullptr)
		*Socket = Parms.Socket;
}


// Function BPI_Character.BPI_Character_C.GetHandLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::GetHandLocation(struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "GetHandLocation");

	Params::BPI_Character_C_GetHandLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function BPI_Character.BPI_Character_C.GetIsDetectableByPlacingBlocks
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool IBPI_Character_C::GetIsDetectableByPlacingBlocks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "GetIsDetectableByPlacingBlocks");

	Params::BPI_Character_C_GetIsDetectableByPlacingBlocks Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BPI_Character.BPI_Character_C.GetLastUpdateRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         Rot                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_Character_C::GetLastUpdateRotation(struct FRotator* Rot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "GetLastUpdateRotation");

	Params::BPI_Character_C_GetLastUpdateRotation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Rot != nullptr)
		*Rot = std::move(Parms.Rot);
}


// Function BPI_Character.BPI_Character_C.GetMovementState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_MovementState                      State                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::GetMovementState(EALS_MovementState* State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "GetMovementState");

	Params::BPI_Character_C_GetMovementState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (State != nullptr)
		*State = Parms.State;
}


// Function BPI_Character.BPI_Character_C.GetSkeletalMesh
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           SKM                                                    (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::GetSkeletalMesh(class USkeletalMeshComponent** SKM)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "GetSkeletalMesh");

	Params::BPI_Character_C_GetSkeletalMesh Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SKM != nullptr)
		*SKM = Parms.SKM;
}


// Function BPI_Character.BPI_Character_C.GetWalkMagnitude
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Magnitude                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::GetWalkMagnitude(double* Magnitude)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "GetWalkMagnitude");

	Params::BPI_Character_C_GetWalkMagnitude Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Magnitude != nullptr)
		*Magnitude = Parms.Magnitude;
}


// Function BPI_Character.BPI_Character_C.IsBeingAttracted
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Attracted                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::IsBeingAttracted(bool* Attracted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "IsBeingAttracted");

	Params::BPI_Character_C_IsBeingAttracted Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Attracted != nullptr)
		*Attracted = Parms.Attracted;
}


// Function BPI_Character.BPI_Character_C.IsChained
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool IBPI_Character_C::IsChained()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "IsChained");

	Params::BPI_Character_C_IsChained Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BPI_Character.BPI_Character_C.IsClimbing
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool IBPI_Character_C::IsClimbing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "IsClimbing");

	Params::BPI_Character_C_IsClimbing Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BPI_Character.BPI_Character_C.IsGrounded
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Grounded                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::IsGrounded(bool* Grounded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "IsGrounded");

	Params::BPI_Character_C_IsGrounded Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Grounded != nullptr)
		*Grounded = Parms.Grounded;
}


// Function BPI_Character.BPI_Character_C.IsInCinematicMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool IBPI_Character_C::IsInCinematicMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "IsInCinematicMode");

	Params::BPI_Character_C_IsInCinematicMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BPI_Character.BPI_Character_C.IsOnTyrolienne
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool IBPI_Character_C::IsOnTyrolienne()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "IsOnTyrolienne");

	Params::BPI_Character_C_IsOnTyrolienne Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BPI_Character.BPI_Character_C.IsPulling
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Pulling                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::IsPulling(bool* Pulling)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "IsPulling");

	Params::BPI_Character_C_IsPulling Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Pulling != nullptr)
		*Pulling = Parms.Pulling;
}


// Function BPI_Character.BPI_Character_C.IsSwimming
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Swim                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::IsSwimming(bool* Swim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "IsSwimming");

	Params::BPI_Character_C_IsSwimming Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Swim != nullptr)
		*Swim = Parms.Swim;
}


// Function BPI_Character.BPI_Character_C.IsWalkableSurface
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHitResult                       Hit                                                    (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool IBPI_Character_C::IsWalkableSurface(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "IsWalkableSurface");

	Params::BPI_Character_C_IsWalkableSurface Parms{};

	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BPI_Character.BPI_Character_C.MakeBeltFall
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Character_C::MakeBeltFall()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "MakeBeltFall");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_Character.BPI_Character_C.MantleCheckShuffle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Delay                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::MantleCheckShuffle(double Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "MantleCheckShuffle");

	Params::BPI_Character_C_MantleCheckShuffle Parms{};

	Parms.Delay = Delay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Character.BPI_Character_C.OnVehicleExit
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Character_C::OnVehicleExit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "OnVehicleExit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_Character.BPI_Character_C.PlayClimbSound
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Character_C::PlayClimbSound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "PlayClimbSound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_Character.BPI_Character_C.PlayVoiceSRV
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<uint8>                           Data                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void IBPI_Character_C::PlayVoiceSRV(const TArray<uint8>& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "PlayVoiceSRV");

	Params::BPI_Character_C_PlayVoiceSRV Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Character.BPI_Character_C.ReplicatePseudo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Pseudo                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void IBPI_Character_C::ReplicatePseudo(const class FString& Pseudo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "ReplicatePseudo");

	Params::BPI_Character_C_ReplicatePseudo Parms{};

	Parms.Pseudo = std::move(Pseudo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Character.BPI_Character_C.RescueTeleport
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_Character_C::RescueTeleport(const struct FVector& Location, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "RescueTeleport");

	Params::BPI_Character_C_RescueTeleport Parms{};

	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Character.BPI_Character_C.RessortImpulse
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Impulse                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::RessortImpulse(const struct FVector& Impulse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "RessortImpulse");

	Params::BPI_Character_C_RessortImpulse Parms{};

	Parms.Impulse = std::move(Impulse);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Character.BPI_Character_C.SetCameraRotation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_Character_C::SetCameraRotation(const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "SetCameraRotation");

	Params::BPI_Character_C_SetCameraRotation Parms{};

	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Character.BPI_Character_C.SetChainComp
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStaticMeshComponent*             Comp                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::SetChainComp(class UStaticMeshComponent* Comp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "SetChainComp");

	Params::BPI_Character_C_SetChainComp Parms{};

	Parms.Comp = Comp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Character.BPI_Character_C.SetCollisionResponse
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ECollisionChannel                       Collision                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ECollisionResponse                      Response                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::SetCollisionResponse(ECollisionChannel Collision, ECollisionResponse Response)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "SetCollisionResponse");

	Params::BPI_Character_C_SetCollisionResponse Parms{};

	Parms.Collision = Collision;
	Parms.Response = Response;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Character.BPI_Character_C.SetController
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::SetController(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "SetController");

	Params::BPI_Character_C_SetController Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Character.BPI_Character_C.SetCosmeticChainFixSocket
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              Socket                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class FName                             Param_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::SetCosmeticChainFixSocket(class UPrimitiveComponent* Socket, class FName Param_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "SetCosmeticChainFixSocket");

	Params::BPI_Character_C_SetCosmeticChainFixSocket Parms{};

	Parms.Socket = Socket;
	Parms.Param_Name = Param_Name;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Character.BPI_Character_C.SetFlyMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    FlyMode                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::SetFlyMode(bool FlyMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "SetFlyMode");

	Params::BPI_Character_C_SetFlyMode Parms{};

	Parms.FlyMode = FlyMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Character.BPI_Character_C.SetInAirDamping
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Damping                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::SetInAirDamping(double Damping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "SetInAirDamping");

	Params::BPI_Character_C_SetInAirDamping Parms{};

	Parms.Damping = Damping;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Character.BPI_Character_C.SetIsDetectableByPlacingBlocks
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Detectable                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::SetIsDetectableByPlacingBlocks(bool Detectable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "SetIsDetectableByPlacingBlocks");

	Params::BPI_Character_C_SetIsDetectableByPlacingBlocks Parms{};

	Parms.Detectable = Detectable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Character.BPI_Character_C.SetIsDriving
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Driving                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::SetIsDriving(bool Driving)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "SetIsDriving");

	Params::BPI_Character_C_SetIsDriving Parms{};

	Parms.Driving = Driving;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Character.BPI_Character_C.SetIsInMovingObject
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InMovingObject                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::SetIsInMovingObject(bool InMovingObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "SetIsInMovingObject");

	Params::BPI_Character_C_SetIsInMovingObject Parms{};

	Parms.InMovingObject = InMovingObject;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Character.BPI_Character_C.SetIsSwimming
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Swim                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::SetIsSwimming(bool Swim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "SetIsSwimming");

	Params::BPI_Character_C_SetIsSwimming Parms{};

	Parms.Swim = Swim;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Character.BPI_Character_C.SetLookAround
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    LookAround                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::SetLookAround(bool LookAround)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "SetLookAround");

	Params::BPI_Character_C_SetLookAround Parms{};

	Parms.LookAround = LookAround;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Character.BPI_Character_C.SetPlayerNameSRV
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           PlayerName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void IBPI_Character_C::SetPlayerNameSRV(const class FString& PlayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "SetPlayerNameSRV");

	Params::BPI_Character_C_SetPlayerNameSRV Parms{};

	Parms.PlayerName = std::move(PlayerName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Character.BPI_Character_C.SetRotation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_Character_C::SetRotation(const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "SetRotation");

	Params::BPI_Character_C_SetRotation Parms{};

	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Character.BPI_Character_C.SetZLocation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Z                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::SetZLocation(double Z)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "SetZLocation");

	Params::BPI_Character_C_SetZLocation Parms{};

	Parms.Z = Z;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Character.BPI_Character_C.ShowHidePullWidget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Show                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::ShowHidePullWidget(bool Show)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "ShowHidePullWidget");

	Params::BPI_Character_C_ShowHidePullWidget Parms{};

	Parms.Show = Show;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Character.BPI_Character_C.ShuffleHardSnap
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Delay                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::ShuffleHardSnap(double Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "ShuffleHardSnap");

	Params::BPI_Character_C_ShuffleHardSnap Parms{};

	Parms.Delay = Delay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Character.BPI_Character_C.ShuffleReplicationScale
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  NullDuration                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  TimelineDuration                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::ShuffleReplicationScale(double NullDuration, double TimelineDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "ShuffleReplicationScale");

	Params::BPI_Character_C_ShuffleReplicationScale Parms{};

	Parms.NullDuration = NullDuration;
	Parms.TimelineDuration = TimelineDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Character.BPI_Character_C.SnapCharacterToVehicle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USphereComponent*                 DriverSocket                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::SnapCharacterToVehicle(class USphereComponent* DriverSocket)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "SnapCharacterToVehicle");

	Params::BPI_Character_C_SnapCharacterToVehicle Parms{};

	Parms.DriverSocket = DriverSocket;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Character.BPI_Character_C.Spawn Chains
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Character_C::Spawn_Chains()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "Spawn Chains");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_Character.BPI_Character_C.SwitchToTyrolienne
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Tyrolienne_C*                 Tyrolienne                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::SwitchToTyrolienne(class ABP_Tyrolienne_C* Tyrolienne)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "SwitchToTyrolienne");

	Params::BPI_Character_C_SwitchToTyrolienne Parms{};

	Parms.Tyrolienne = Tyrolienne;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Character.BPI_Character_C.TrampolineBounce
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Force                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Instigator                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UseControlRot                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::TrampolineBounce(double Force, bool Instigator, bool UseControlRot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "TrampolineBounce");

	Params::BPI_Character_C_TrampolineBounce Parms{};

	Parms.Force = Force;
	Parms.Instigator = Instigator;
	Parms.UseControlRot = UseControlRot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Character.BPI_Character_C.UnderLava
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Character_C::UnderLava()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "UnderLava");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_Character.BPI_Character_C.UpdateDriveHands
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Left                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Right                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::UpdateDriveHands(const struct FVector& Left, const struct FVector& Right)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Character_C", "UpdateDriveHands");

	Params::BPI_Character_C_UpdateDriveHands Parms{};

	Parms.Left = std::move(Left);
	Parms.Right = std::move(Right);

	UObject::ProcessEvent(Func, &Parms);
}

}


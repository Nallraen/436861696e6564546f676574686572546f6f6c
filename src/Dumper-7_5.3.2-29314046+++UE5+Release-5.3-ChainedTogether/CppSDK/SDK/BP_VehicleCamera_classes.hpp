#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VehicleCamera

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_VehicleCamera.BP_VehicleCamera_C
// 0x0048 (0x0368 - 0x0320)
class ABP_VehicleCamera_C final : public APawn
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0320(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCameraComponent*                       Camera;                                            // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm;                                         // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_CustomCar_C*                        Car;                                               // 0x0340(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector                                CameraOffset;                                      // 0x0348(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Target_Arm_Length;                                 // 0x0360(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_VehicleCamera(int32 EntryPoint);
	void Input_Leave_Tyro();
	void Jump_Input();
	void LookRight(double Axis);
	void LookUp(double Axis);
	void MoveForward(double Axis);
	void MoveRight(double Axis);
	void PossessOwner();
	void ReceivePossessed(class AController* NewController);
	void ReceiveTick(float DeltaSeconds);
	void Sprint(bool Param_Sprint);
	void Stance();
	void TestControlNotify();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_VehicleCamera_C">();
	}
	static class ABP_VehicleCamera_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_VehicleCamera_C>();
	}
};
static_assert(alignof(ABP_VehicleCamera_C) == 0x000008, "Wrong alignment on ABP_VehicleCamera_C");
static_assert(sizeof(ABP_VehicleCamera_C) == 0x000368, "Wrong size on ABP_VehicleCamera_C");
static_assert(offsetof(ABP_VehicleCamera_C, UberGraphFrame) == 0x000320, "Member 'ABP_VehicleCamera_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_VehicleCamera_C, Camera) == 0x000328, "Member 'ABP_VehicleCamera_C::Camera' has a wrong offset!");
static_assert(offsetof(ABP_VehicleCamera_C, SpringArm) == 0x000330, "Member 'ABP_VehicleCamera_C::SpringArm' has a wrong offset!");
static_assert(offsetof(ABP_VehicleCamera_C, DefaultSceneRoot) == 0x000338, "Member 'ABP_VehicleCamera_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_VehicleCamera_C, Car) == 0x000340, "Member 'ABP_VehicleCamera_C::Car' has a wrong offset!");
static_assert(offsetof(ABP_VehicleCamera_C, CameraOffset) == 0x000348, "Member 'ABP_VehicleCamera_C::CameraOffset' has a wrong offset!");
static_assert(offsetof(ABP_VehicleCamera_C, Target_Arm_Length) == 0x000360, "Member 'ABP_VehicleCamera_C::Target_Arm_Length' has a wrong offset!");

}


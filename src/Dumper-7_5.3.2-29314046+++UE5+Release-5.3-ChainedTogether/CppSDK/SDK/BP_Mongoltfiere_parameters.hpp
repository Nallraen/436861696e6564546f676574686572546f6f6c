#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Mongoltfiere

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_Mongoltfiere.BP_Mongoltfiere_C.BndEvt__BP_Mongoltfiere_Box_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct BP_Mongoltfiere_C_BndEvt__BP_Mongoltfiere_Box_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Mongoltfiere_C_BndEvt__BP_Mongoltfiere_Box_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_Mongoltfiere_C_BndEvt__BP_Mongoltfiere_Box_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_Mongoltfiere_C_BndEvt__BP_Mongoltfiere_Box_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on BP_Mongoltfiere_C_BndEvt__BP_Mongoltfiere_Box_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_Mongoltfiere_C_BndEvt__BP_Mongoltfiere_Box_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_Mongoltfiere_C_BndEvt__BP_Mongoltfiere_Box_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Mongoltfiere_C_BndEvt__BP_Mongoltfiere_Box_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_Mongoltfiere_C_BndEvt__BP_Mongoltfiere_Box_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Mongoltfiere_C_BndEvt__BP_Mongoltfiere_Box_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_Mongoltfiere_C_BndEvt__BP_Mongoltfiere_Box_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Mongoltfiere_C_BndEvt__BP_Mongoltfiere_Box_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_Mongoltfiere_C_BndEvt__BP_Mongoltfiere_Box_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function BP_Mongoltfiere.BP_Mongoltfiere_C.ExecuteUbergraph_BP_Mongoltfiere
// 0x02C0 (0x02C0 - 0x0000)
struct BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AF6[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors;   // 0x0008(0x0010)(ReferenceParm)
	bool                                          CallFunc_Array_IsEmpty_ReturnValue;                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_1;               // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VInterpTo_ReturnValue;                    // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumPlayers_ReturnValue;                // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AF7[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AF8[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ClampVectorSize_ReturnValue;              // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AF9[0x7];                                     // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_VLerp_ReturnValue_1;                      // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x00C0(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult_1;  // 0x01A8(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0290(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0298(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x02A0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x02A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AFA[0x4];                                     // 0x02AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        CallFunc_SpawnSound2D_ReturnValue;                 // 0x02B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VLerp_Alpha_ImplicitCast;                 // 0x02B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetPlayRate_NewRate_ImplicitCast;         // 0x02BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere) == 0x000008, "Wrong alignment on BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere");
static_assert(sizeof(BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere) == 0x0002C0, "Wrong size on BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere");
static_assert(offsetof(BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere, EntryPoint) == 0x000000, "Member 'BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere, CallFunc_GetOverlappingActors_OverlappingActors) == 0x000008, "Member 'BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere::CallFunc_GetOverlappingActors_OverlappingActors' has a wrong offset!");
static_assert(offsetof(BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere, CallFunc_Array_IsEmpty_ReturnValue) == 0x000018, "Member 'BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere::CallFunc_Array_IsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere, Temp_bool_Has_Been_Initd_Variable) == 0x000019, "Member 'BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere, CallFunc_HasAuthority_ReturnValue) == 0x00001A, "Member 'BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere, CallFunc_HasAuthority_ReturnValue_1) == 0x00001B, "Member 'BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere::CallFunc_HasAuthority_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere, K2Node_Event_DeltaSeconds) == 0x00001C, "Member 'BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere, CallFunc_VLerp_ReturnValue) == 0x000020, "Member 'BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere, CallFunc_VInterpTo_ReturnValue) == 0x000038, "Member 'BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere::CallFunc_VInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere, CallFunc_GetNumPlayers_ReturnValue) == 0x000050, "Member 'BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere::CallFunc_GetNumPlayers_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere, CallFunc_VSize_ReturnValue) == 0x000058, "Member 'BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000060, "Member 'BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000068, "Member 'BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000070, "Member 'BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere, CallFunc_ClampVectorSize_ReturnValue) == 0x000078, "Member 'BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere::CallFunc_ClampVectorSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000090, "Member 'BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000098, "Member 'BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere, Temp_bool_IsClosed_Variable) == 0x0000A0, "Member 'BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere, CallFunc_VLerp_ReturnValue_1) == 0x0000A8, "Member 'BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere::CallFunc_VLerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x0000C0, "Member 'BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere, CallFunc_K2_SetRelativeLocation_SweepHitResult_1) == 0x0001A8, "Member 'BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere::CallFunc_K2_SetRelativeLocation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000290, "Member 'BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere, K2Node_ComponentBoundEvent_OtherActor) == 0x000298, "Member 'BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere, K2Node_ComponentBoundEvent_OtherComp) == 0x0002A0, "Member 'BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x0002A8, "Member 'BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere, CallFunc_SpawnSound2D_ReturnValue) == 0x0002B0, "Member 'BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere::CallFunc_SpawnSound2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere, CallFunc_VLerp_Alpha_ImplicitCast) == 0x0002B8, "Member 'BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere::CallFunc_VLerp_Alpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere, CallFunc_SetPlayRate_NewRate_ImplicitCast) == 0x0002BC, "Member 'BP_Mongoltfiere_C_ExecuteUbergraph_BP_Mongoltfiere::CallFunc_SetPlayRate_NewRate_ImplicitCast' has a wrong offset!");

// Function BP_Mongoltfiere.BP_Mongoltfiere_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_Mongoltfiere_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Mongoltfiere_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_Mongoltfiere_C_ReceiveTick");
static_assert(sizeof(BP_Mongoltfiere_C_ReceiveTick) == 0x000004, "Wrong size on BP_Mongoltfiere_C_ReceiveTick");
static_assert(offsetof(BP_Mongoltfiere_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_Mongoltfiere_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Pipes

#include "Basic.hpp"

#include "E_VentilationType_structs.hpp"
#include "E_CornerDirectionVentilation_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_Pipes.B_Pipes_C
// 0x0188 (0x0420 - 0x0298)
class AB_Pipes_C final : public AActor
{
public:
	class USplineComponent*                       Spline;                                            // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	E_VentilationType                             Type;                                              // 0x02A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C95[0x3];                                     // 0x02A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Variation;                                         // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CornerDirectionVentilation                  CornerDirection;                                   // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C96[0x7];                                     // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TargetLength;                                      // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentDistance;                                   // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RealLength;                                        // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Snap_Location;                                     // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C97[0x3];                                     // 0x02D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Snap_Location_Unit_Grid;                           // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	int32                                         Snap_Location_Height_Grid;                         // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Snap_Rotation;                                     // 0x02DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C98[0x3];                                     // 0x02DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Snap_Rotation_Degrees;                             // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	int32                                         Material_Type;                                     // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInterface*>             Materials;                                         // 0x02E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Support_Post_Enable;                               // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C99[0x3];                                     // 0x02F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Support_Post_Type;                                 // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<bool>                                  Support_Posts;                                     // 0x0300(0x0010)(Edit, BlueprintVisible, AdvancedDisplay)
	TArray<class UStaticMesh*>                    Support_Posts_SM;                                  // 0x0310(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Enable_All;                                        // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Only_Odd;                                   // 0x0321(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Only_Even;                                  // 0x0322(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C9A[0x5];                                     // 0x0323(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            TempStaticMesh;                                    // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             LastTransform;                                     // 0x0330(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WasTransformed;                                    // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C9B[0x7];                                     // 0x0391(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Height_Support_Posts;                              // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Overwrite_Material;                                // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   TempMesh;                                          // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USplineMeshComponent*                   SplineTempMesh;                                    // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UStaticMesh*>                    PipeMeshes;                                        // 0x03B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UStaticMesh*>                    ShortPipeMeshes;                                   // 0x03C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UStaticMesh*>                    BranchPipeMeshes;                                  // 0x03D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UStaticMesh*>                    PipeCornerMeshes;                                  // 0x03E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UStaticMesh*>                    ShortPipeCornerMeshes;                             // 0x03F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 OffsetPipes;                                       // 0x0408(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void Initialization_Boolean_Array(const TArray<bool>& TargetArray, int32 Length);
	void SnapLocation();
	void SnapRotation();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_Pipes_C">();
	}
	static class AB_Pipes_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_Pipes_C>();
	}
};
static_assert(alignof(AB_Pipes_C) == 0x000010, "Wrong alignment on AB_Pipes_C");
static_assert(sizeof(AB_Pipes_C) == 0x000420, "Wrong size on AB_Pipes_C");
static_assert(offsetof(AB_Pipes_C, Spline) == 0x000298, "Member 'AB_Pipes_C::Spline' has a wrong offset!");
static_assert(offsetof(AB_Pipes_C, DefaultSceneRoot) == 0x0002A0, "Member 'AB_Pipes_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AB_Pipes_C, Type) == 0x0002A8, "Member 'AB_Pipes_C::Type' has a wrong offset!");
static_assert(offsetof(AB_Pipes_C, Variation) == 0x0002AC, "Member 'AB_Pipes_C::Variation' has a wrong offset!");
static_assert(offsetof(AB_Pipes_C, CornerDirection) == 0x0002B0, "Member 'AB_Pipes_C::CornerDirection' has a wrong offset!");
static_assert(offsetof(AB_Pipes_C, TargetLength) == 0x0002B8, "Member 'AB_Pipes_C::TargetLength' has a wrong offset!");
static_assert(offsetof(AB_Pipes_C, CurrentDistance) == 0x0002C0, "Member 'AB_Pipes_C::CurrentDistance' has a wrong offset!");
static_assert(offsetof(AB_Pipes_C, RealLength) == 0x0002C8, "Member 'AB_Pipes_C::RealLength' has a wrong offset!");
static_assert(offsetof(AB_Pipes_C, Snap_Location) == 0x0002D0, "Member 'AB_Pipes_C::Snap_Location' has a wrong offset!");
static_assert(offsetof(AB_Pipes_C, Snap_Location_Unit_Grid) == 0x0002D4, "Member 'AB_Pipes_C::Snap_Location_Unit_Grid' has a wrong offset!");
static_assert(offsetof(AB_Pipes_C, Snap_Location_Height_Grid) == 0x0002D8, "Member 'AB_Pipes_C::Snap_Location_Height_Grid' has a wrong offset!");
static_assert(offsetof(AB_Pipes_C, Snap_Rotation) == 0x0002DC, "Member 'AB_Pipes_C::Snap_Rotation' has a wrong offset!");
static_assert(offsetof(AB_Pipes_C, Snap_Rotation_Degrees) == 0x0002E0, "Member 'AB_Pipes_C::Snap_Rotation_Degrees' has a wrong offset!");
static_assert(offsetof(AB_Pipes_C, Material_Type) == 0x0002E4, "Member 'AB_Pipes_C::Material_Type' has a wrong offset!");
static_assert(offsetof(AB_Pipes_C, Materials) == 0x0002E8, "Member 'AB_Pipes_C::Materials' has a wrong offset!");
static_assert(offsetof(AB_Pipes_C, Support_Post_Enable) == 0x0002F8, "Member 'AB_Pipes_C::Support_Post_Enable' has a wrong offset!");
static_assert(offsetof(AB_Pipes_C, Support_Post_Type) == 0x0002FC, "Member 'AB_Pipes_C::Support_Post_Type' has a wrong offset!");
static_assert(offsetof(AB_Pipes_C, Support_Posts) == 0x000300, "Member 'AB_Pipes_C::Support_Posts' has a wrong offset!");
static_assert(offsetof(AB_Pipes_C, Support_Posts_SM) == 0x000310, "Member 'AB_Pipes_C::Support_Posts_SM' has a wrong offset!");
static_assert(offsetof(AB_Pipes_C, Enable_All) == 0x000320, "Member 'AB_Pipes_C::Enable_All' has a wrong offset!");
static_assert(offsetof(AB_Pipes_C, Enable_Only_Odd) == 0x000321, "Member 'AB_Pipes_C::Enable_Only_Odd' has a wrong offset!");
static_assert(offsetof(AB_Pipes_C, Enable_Only_Even) == 0x000322, "Member 'AB_Pipes_C::Enable_Only_Even' has a wrong offset!");
static_assert(offsetof(AB_Pipes_C, TempStaticMesh) == 0x000328, "Member 'AB_Pipes_C::TempStaticMesh' has a wrong offset!");
static_assert(offsetof(AB_Pipes_C, LastTransform) == 0x000330, "Member 'AB_Pipes_C::LastTransform' has a wrong offset!");
static_assert(offsetof(AB_Pipes_C, WasTransformed) == 0x000390, "Member 'AB_Pipes_C::WasTransformed' has a wrong offset!");
static_assert(offsetof(AB_Pipes_C, Height_Support_Posts) == 0x000398, "Member 'AB_Pipes_C::Height_Support_Posts' has a wrong offset!");
static_assert(offsetof(AB_Pipes_C, Overwrite_Material) == 0x0003A0, "Member 'AB_Pipes_C::Overwrite_Material' has a wrong offset!");
static_assert(offsetof(AB_Pipes_C, TempMesh) == 0x0003A8, "Member 'AB_Pipes_C::TempMesh' has a wrong offset!");
static_assert(offsetof(AB_Pipes_C, SplineTempMesh) == 0x0003B0, "Member 'AB_Pipes_C::SplineTempMesh' has a wrong offset!");
static_assert(offsetof(AB_Pipes_C, PipeMeshes) == 0x0003B8, "Member 'AB_Pipes_C::PipeMeshes' has a wrong offset!");
static_assert(offsetof(AB_Pipes_C, ShortPipeMeshes) == 0x0003C8, "Member 'AB_Pipes_C::ShortPipeMeshes' has a wrong offset!");
static_assert(offsetof(AB_Pipes_C, BranchPipeMeshes) == 0x0003D8, "Member 'AB_Pipes_C::BranchPipeMeshes' has a wrong offset!");
static_assert(offsetof(AB_Pipes_C, PipeCornerMeshes) == 0x0003E8, "Member 'AB_Pipes_C::PipeCornerMeshes' has a wrong offset!");
static_assert(offsetof(AB_Pipes_C, ShortPipeCornerMeshes) == 0x0003F8, "Member 'AB_Pipes_C::ShortPipeCornerMeshes' has a wrong offset!");
static_assert(offsetof(AB_Pipes_C, OffsetPipes) == 0x000408, "Member 'AB_Pipes_C::OffsetPipes' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VehicleCamera

#include "Basic.hpp"

#include "BP_VehicleCamera_classes.hpp"
#include "BP_VehicleCamera_parameters.hpp"


namespace SDK
{

// Function BP_VehicleCamera.BP_VehicleCamera_C.ExecuteUbergraph_BP_VehicleCamera
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_VehicleCamera_C::ExecuteUbergraph_BP_VehicleCamera(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleCamera_C", "ExecuteUbergraph_BP_VehicleCamera");

	Params::BP_VehicleCamera_C_ExecuteUbergraph_BP_VehicleCamera Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VehicleCamera.BP_VehicleCamera_C.Input Leave Tyro
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_VehicleCamera_C::Input_Leave_Tyro()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleCamera_C", "Input Leave Tyro");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VehicleCamera.BP_VehicleCamera_C.Jump Input
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_VehicleCamera_C::Jump_Input()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleCamera_C", "Jump Input");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VehicleCamera.BP_VehicleCamera_C.LookRight
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Axis                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_VehicleCamera_C::LookRight(double Axis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleCamera_C", "LookRight");

	Params::BP_VehicleCamera_C_LookRight Parms{};

	Parms.Axis = Axis;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VehicleCamera.BP_VehicleCamera_C.LookUp
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Axis                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_VehicleCamera_C::LookUp(double Axis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleCamera_C", "LookUp");

	Params::BP_VehicleCamera_C_LookUp Parms{};

	Parms.Axis = Axis;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VehicleCamera.BP_VehicleCamera_C.MoveForward
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Axis                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_VehicleCamera_C::MoveForward(double Axis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleCamera_C", "MoveForward");

	Params::BP_VehicleCamera_C_MoveForward Parms{};

	Parms.Axis = Axis;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VehicleCamera.BP_VehicleCamera_C.MoveRight
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Axis                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_VehicleCamera_C::MoveRight(double Axis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleCamera_C", "MoveRight");

	Params::BP_VehicleCamera_C_MoveRight Parms{};

	Parms.Axis = Axis;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VehicleCamera.BP_VehicleCamera_C.PossessOwner
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_VehicleCamera_C::PossessOwner()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleCamera_C", "PossessOwner");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VehicleCamera.BP_VehicleCamera_C.ReceivePossessed
// (BlueprintAuthorityOnly, Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      NewController                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_VehicleCamera_C::ReceivePossessed(class AController* NewController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleCamera_C", "ReceivePossessed");

	Params::BP_VehicleCamera_C_ReceivePossessed Parms{};

	Parms.NewController = NewController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VehicleCamera.BP_VehicleCamera_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_VehicleCamera_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleCamera_C", "ReceiveTick");

	Params::BP_VehicleCamera_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VehicleCamera.BP_VehicleCamera_C.Sprint
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_Sprint                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_VehicleCamera_C::Sprint(bool Param_Sprint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleCamera_C", "Sprint");

	Params::BP_VehicleCamera_C_Sprint Parms{};

	Parms.Param_Sprint = Param_Sprint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VehicleCamera.BP_VehicleCamera_C.Stance
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_VehicleCamera_C::Stance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleCamera_C", "Stance");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VehicleCamera.BP_VehicleCamera_C.TestControlNotify
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_VehicleCamera_C::TestControlNotify()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleCamera_C", "TestControlNotify");

	UObject::ProcessEvent(Func, nullptr);
}

}


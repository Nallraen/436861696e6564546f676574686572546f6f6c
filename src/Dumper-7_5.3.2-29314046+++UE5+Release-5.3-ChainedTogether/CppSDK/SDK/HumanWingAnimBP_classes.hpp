#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HumanWingAnimBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass HumanWingAnimBP.HumanWingAnimBP_C
// 0x0290 (0x05E0 - 0x0350)
class UHumanWingAnimBP_C final : public UAnimInstance
{
public:
	uint8                                         Pad_2F62[0x8];                                     // 0x0348(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0358(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0360(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0368(0x0020)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0388(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x03B0(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x03D8(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0420(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0440(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0488(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x04A8(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x04F0(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0510(0x00C8)()
	bool                                          Flotte;                                            // 0x05D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* Param_AnimGraph);
	void AnimNotify_FlapSound();
	void ExecuteUbergraph_HumanWingAnimBP(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"HumanWingAnimBP_C">();
	}
	static class UHumanWingAnimBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHumanWingAnimBP_C>();
	}
};
static_assert(alignof(UHumanWingAnimBP_C) == 0x000010, "Wrong alignment on UHumanWingAnimBP_C");
static_assert(sizeof(UHumanWingAnimBP_C) == 0x0005E0, "Wrong size on UHumanWingAnimBP_C");
static_assert(offsetof(UHumanWingAnimBP_C, UberGraphFrame) == 0x000350, "Member 'UHumanWingAnimBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UHumanWingAnimBP_C, AnimBlueprintExtension_PropertyAccess) == 0x000358, "Member 'UHumanWingAnimBP_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UHumanWingAnimBP_C, AnimBlueprintExtension_Base) == 0x000360, "Member 'UHumanWingAnimBP_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UHumanWingAnimBP_C, AnimGraphNode_Root) == 0x000368, "Member 'UHumanWingAnimBP_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UHumanWingAnimBP_C, AnimGraphNode_TransitionResult_1) == 0x000388, "Member 'UHumanWingAnimBP_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UHumanWingAnimBP_C, AnimGraphNode_TransitionResult) == 0x0003B0, "Member 'UHumanWingAnimBP_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UHumanWingAnimBP_C, AnimGraphNode_SequencePlayer_2) == 0x0003D8, "Member 'UHumanWingAnimBP_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UHumanWingAnimBP_C, AnimGraphNode_StateResult_2) == 0x000420, "Member 'UHumanWingAnimBP_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UHumanWingAnimBP_C, AnimGraphNode_SequencePlayer_1) == 0x000440, "Member 'UHumanWingAnimBP_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UHumanWingAnimBP_C, AnimGraphNode_StateResult_1) == 0x000488, "Member 'UHumanWingAnimBP_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UHumanWingAnimBP_C, AnimGraphNode_SequencePlayer) == 0x0004A8, "Member 'UHumanWingAnimBP_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UHumanWingAnimBP_C, AnimGraphNode_StateResult) == 0x0004F0, "Member 'UHumanWingAnimBP_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UHumanWingAnimBP_C, AnimGraphNode_StateMachine) == 0x000510, "Member 'UHumanWingAnimBP_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UHumanWingAnimBP_C, Flotte) == 0x0005D8, "Member 'UHumanWingAnimBP_C::Flotte' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: V_GameInstanceWithSave

#include "Basic.hpp"

#include "V_GameInstanceWithSave_classes.hpp"
#include "V_GameInstanceWithSave_parameters.hpp"


namespace SDK
{

// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.Apply Audio Settings
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_ApplySettingType                      Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UV_GameInstanceWithSave_C::Apply_Audio_Settings(E_ApplySettingType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "Apply Audio Settings");

	Params::V_GameInstanceWithSave_C_Apply_Audio_Settings Parms{};

	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.Apply Push to Talk
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ID                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UV_GameInstanceWithSave_C::Apply_Push_to_Talk(const class FString& ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "Apply Push to Talk");

	Params::V_GameInstanceWithSave_C_Apply_Push_to_Talk Parms{};

	Parms.ID = std::move(ID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.Apply Resolution And Windowed
// (Public, BlueprintCallable, BlueprintEvent)

void UV_GameInstanceWithSave_C::Apply_Resolution_And_Windowed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "Apply Resolution And Windowed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.Apply Settings
// (Public, BlueprintCallable, BlueprintEvent)

void UV_GameInstanceWithSave_C::Apply_Settings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "Apply Settings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ApplyAntialiasing
// (Public, BlueprintCallable, BlueprintEvent)

void UV_GameInstanceWithSave_C::ApplyAntialiasing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "ApplyAntialiasing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ApplyAudioVolume
// (Public, BlueprintCallable, BlueprintEvent)

void UV_GameInstanceWithSave_C::ApplyAudioVolume()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "ApplyAudioVolume");

	UObject::ProcessEvent(Func, nullptr);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ApplyBloom
// (Public, BlueprintCallable, BlueprintEvent)

void UV_GameInstanceWithSave_C::ApplyBloom()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "ApplyBloom");

	UObject::ProcessEvent(Func, nullptr);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ApplyCameraInvertionSettings
// (Public, BlueprintCallable, BlueprintEvent)

void UV_GameInstanceWithSave_C::ApplyCameraInvertionSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "ApplyCameraInvertionSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ApplyCameraSensitivity
// (Public, BlueprintCallable, BlueprintEvent)

void UV_GameInstanceWithSave_C::ApplyCameraSensitivity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "ApplyCameraSensitivity");

	UObject::ProcessEvent(Func, nullptr);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ApplyEffectsQuality
// (Public, BlueprintCallable, BlueprintEvent)

void UV_GameInstanceWithSave_C::ApplyEffectsQuality()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "ApplyEffectsQuality");

	UObject::ProcessEvent(Func, nullptr);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ApplyGamma
// (Public, BlueprintCallable, BlueprintEvent)

void UV_GameInstanceWithSave_C::ApplyGamma()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "ApplyGamma");

	UObject::ProcessEvent(Func, nullptr);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ApplyLanguage
// (Public, BlueprintCallable, BlueprintEvent)

void UV_GameInstanceWithSave_C::ApplyLanguage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "ApplyLanguage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ApplyMaxFPS
// (Public, BlueprintCallable, BlueprintEvent)

void UV_GameInstanceWithSave_C::ApplyMaxFPS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "ApplyMaxFPS");

	UObject::ProcessEvent(Func, nullptr);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ApplyMicrophone
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ID                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UV_GameInstanceWithSave_C::ApplyMicrophone(const class FString& ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "ApplyMicrophone");

	Params::V_GameInstanceWithSave_C_ApplyMicrophone Parms{};

	Parms.ID = std::move(ID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ApplyMotionBlur
// (Public, BlueprintCallable, BlueprintEvent)

void UV_GameInstanceWithSave_C::ApplyMotionBlur()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "ApplyMotionBlur");

	UObject::ProcessEvent(Func, nullptr);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ApplyParticlesQuality
// (Public, BlueprintCallable, BlueprintEvent)

void UV_GameInstanceWithSave_C::ApplyParticlesQuality()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "ApplyParticlesQuality");

	UObject::ProcessEvent(Func, nullptr);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ApplyPP_Quality
// (Public, BlueprintCallable, BlueprintEvent)

void UV_GameInstanceWithSave_C::ApplyPP_Quality()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "ApplyPP_Quality");

	UObject::ProcessEvent(Func, nullptr);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ApplyResolutionScale
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Resolutionscale                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UV_GameInstanceWithSave_C::ApplyResolutionScale(double Resolutionscale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "ApplyResolutionScale");

	Params::V_GameInstanceWithSave_C_ApplyResolutionScale Parms{};

	Parms.Resolutionscale = Resolutionscale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ApplyShadowQuality
// (Public, BlueprintCallable, BlueprintEvent)

void UV_GameInstanceWithSave_C::ApplyShadowQuality()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "ApplyShadowQuality");

	UObject::ProcessEvent(Func, nullptr);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ApplySharpen
// (Public, BlueprintCallable, BlueprintEvent)

void UV_GameInstanceWithSave_C::ApplySharpen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "ApplySharpen");

	UObject::ProcessEvent(Func, nullptr);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ApplySSR
// (Public, BlueprintCallable, BlueprintEvent)

void UV_GameInstanceWithSave_C::ApplySSR()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "ApplySSR");

	UObject::ProcessEvent(Func, nullptr);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ApplyTextureQuality
// (Public, BlueprintCallable, BlueprintEvent)

void UV_GameInstanceWithSave_C::ApplyTextureQuality()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "ApplyTextureQuality");

	UObject::ProcessEvent(Func, nullptr);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ApplyVideoSettings
// (Public, BlueprintCallable, BlueprintEvent)

void UV_GameInstanceWithSave_C::ApplyVideoSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "ApplyVideoSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ApplyViewDistance
// (Public, BlueprintCallable, BlueprintEvent)

void UV_GameInstanceWithSave_C::ApplyViewDistance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "ApplyViewDistance");

	UObject::ProcessEvent(Func, nullptr);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ApplyVSync
// (Public, BlueprintCallable, BlueprintEvent)

void UV_GameInstanceWithSave_C::ApplyVSync()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "ApplyVSync");

	UObject::ProcessEvent(Func, nullptr);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.BackupSaveGameObject
// (Public, BlueprintCallable, BlueprintEvent)

void UV_GameInstanceWithSave_C::BackupSaveGameObject()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "BackupSaveGameObject");

	UObject::ProcessEvent(Func, nullptr);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.Cancel Settings
// (Public, BlueprintCallable, BlueprintEvent)

void UV_GameInstanceWithSave_C::Cancel_Settings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "Cancel Settings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.CancelSettings
// (Public, BlueprintCallable, BlueprintEvent)

void UV_GameInstanceWithSave_C::CancelSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "CancelSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ClearSaveNotif
// (Public, BlueprintCallable, BlueprintEvent)

void UV_GameInstanceWithSave_C::ClearSaveNotif()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "ClearSaveNotif");

	UObject::ProcessEvent(Func, nullptr);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.Compare Setting With Save
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FS_SavedSetting>          SettingsArray                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           ID                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    Same                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UV_GameInstanceWithSave_C::Compare_Setting_With_Save(TArray<struct FS_SavedSetting>& SettingsArray, const class FString& ID, bool* Same)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "Compare Setting With Save");

	Params::V_GameInstanceWithSave_C_Compare_Setting_With_Save Parms{};

	Parms.SettingsArray = std::move(SettingsArray);
	Parms.ID = std::move(ID);

	UObject::ProcessEvent(Func, &Parms);

	SettingsArray = std::move(Parms.SettingsArray);

	if (Same != nullptr)
		*Same = Parms.Same;
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ConstructDefaultSettings
// (Public, BlueprintCallable, BlueprintEvent)

void UV_GameInstanceWithSave_C::ConstructDefaultSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "ConstructDefaultSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ConstructSavedSettings
// (Public, BlueprintCallable, BlueprintEvent)

void UV_GameInstanceWithSave_C::ConstructSavedSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "ConstructSavedSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.EraseCheckpoint
// (Public, BlueprintCallable, BlueprintEvent)

void UV_GameInstanceWithSave_C::EraseCheckpoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "EraseCheckpoint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ExecuteUbergraph_V_GameInstanceWithSave
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UV_GameInstanceWithSave_C::ExecuteUbergraph_V_GameInstanceWithSave(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "ExecuteUbergraph_V_GameInstanceWithSave");

	Params::V_GameInstanceWithSave_C_ExecuteUbergraph_V_GameInstanceWithSave Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.GetCameraSettings
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_InvertX                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_InvertY                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Param_X_Sensitivity                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Param_Y_Sensitivity                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UV_GameInstanceWithSave_C::GetCameraSettings(bool* Param_InvertX, bool* Param_InvertY, double* Param_X_Sensitivity, double* Param_Y_Sensitivity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "GetCameraSettings");

	Params::V_GameInstanceWithSave_C_GetCameraSettings Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_InvertX != nullptr)
		*Param_InvertX = Parms.Param_InvertX;

	if (Param_InvertY != nullptr)
		*Param_InvertY = Parms.Param_InvertY;

	if (Param_X_Sensitivity != nullptr)
		*Param_X_Sensitivity = Parms.Param_X_Sensitivity;

	if (Param_Y_Sensitivity != nullptr)
		*Param_Y_Sensitivity = Parms.Param_Y_Sensitivity;
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.GetCheckpoints
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FS_Checkpoint>            Checkpoints                                            (Parm, OutParm)

void UV_GameInstanceWithSave_C::GetCheckpoints(TArray<struct FS_Checkpoint>* Checkpoints)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "GetCheckpoints");

	Params::V_GameInstanceWithSave_C_GetCheckpoints Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Checkpoints != nullptr)
		*Checkpoints = std::move(Parms.Checkpoints);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.GetPushToTalk
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    PTT                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UV_GameInstanceWithSave_C::GetPushToTalk(bool* PTT)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "GetPushToTalk");

	Params::V_GameInstanceWithSave_C_GetPushToTalk Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PTT != nullptr)
		*PTT = Parms.PTT;
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.GetSaveGameObject
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UV_SaveGame_C*                    SaveGame                                               (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UV_GameInstanceWithSave_C::GetSaveGameObject(class UV_SaveGame_C** SaveGame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "GetSaveGameObject");

	Params::V_GameInstanceWithSave_C_GetSaveGameObject Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SaveGame != nullptr)
		*SaveGame = Parms.SaveGame;
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.GetShowDebug
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Debug                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UV_GameInstanceWithSave_C::GetShowDebug(bool* Debug)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "GetShowDebug");

	Params::V_GameInstanceWithSave_C_GetShowDebug Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Debug != nullptr)
		*Debug = Parms.Debug;
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.GetTestControl
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    TestControl                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UV_GameInstanceWithSave_C::GetTestControl(bool* TestControl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "GetTestControl");

	Params::V_GameInstanceWithSave_C_GetTestControl Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TestControl != nullptr)
		*TestControl = Parms.TestControl;
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.GetTestPlayers
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Count                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UV_GameInstanceWithSave_C::GetTestPlayers(int32* Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "GetTestPlayers");

	Params::V_GameInstanceWithSave_C_GetTestPlayers Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Count != nullptr)
		*Count = Parms.Count;
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.InitSaveGameObject
// (Private, BlueprintCallable, BlueprintEvent)

void UV_GameInstanceWithSave_C::InitSaveGameObject()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "InitSaveGameObject");

	UObject::ProcessEvent(Func, nullptr);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.OnUpdateBoolSetting
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Identifier                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    NewBool                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_ApplySettingType                      SetType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UV_GameInstanceWithSave_C::OnUpdateBoolSetting(const class FString& Identifier, bool NewBool, E_ApplySettingType SetType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "OnUpdateBoolSetting");

	Params::V_GameInstanceWithSave_C_OnUpdateBoolSetting Parms{};

	Parms.Identifier = std::move(Identifier);
	Parms.NewBool = NewBool;
	Parms.SetType = SetType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.OnUpdateFloatSetting
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  NewFloat                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Selection                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// E_ApplySettingType                      SetType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UV_GameInstanceWithSave_C::OnUpdateFloatSetting(double NewFloat, const class FString& Selection, E_ApplySettingType SetType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "OnUpdateFloatSetting");

	Params::V_GameInstanceWithSave_C_OnUpdateFloatSetting Parms{};

	Parms.NewFloat = NewFloat;
	Parms.Selection = std::move(Selection);
	Parms.SetType = SetType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.OnUpdateStringSetting
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Identifier                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           NewString                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// E_ApplySettingType                      SetType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UV_GameInstanceWithSave_C::OnUpdateStringSetting(const class FString& Identifier, const class FString& NewString, E_ApplySettingType SetType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "OnUpdateStringSetting");

	Params::V_GameInstanceWithSave_C_OnUpdateStringSetting Parms{};

	Parms.Identifier = std::move(Identifier);
	Parms.NewString = std::move(NewString);
	Parms.SetType = SetType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ReceiveInit
// (Event, Public, BlueprintEvent)

void UV_GameInstanceWithSave_C::ReceiveInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "ReceiveInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.Reset Resolution
// (Public, BlueprintCallable, BlueprintEvent)

void UV_GameInstanceWithSave_C::Reset_Resolution()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "Reset Resolution");

	UObject::ProcessEvent(Func, nullptr);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ResetResolution
// (Public, BlueprintCallable, BlueprintEvent)

void UV_GameInstanceWithSave_C::ResetResolution()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "ResetResolution");

	UObject::ProcessEvent(Func, nullptr);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ResetSavedSettings
// (Public, BlueprintCallable, BlueprintEvent)

void UV_GameInstanceWithSave_C::ResetSavedSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "ResetSavedSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ResetSavedSettings_0
// (Public, BlueprintCallable, BlueprintEvent)

void UV_GameInstanceWithSave_C::ResetSavedSettings_0()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "ResetSavedSettings_0");

	UObject::ProcessEvent(Func, nullptr);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ResetSettings
// (Public, BlueprintCallable, BlueprintEvent)

void UV_GameInstanceWithSave_C::ResetSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "ResetSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ResetSettingsByCategory
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SettingCategory                       Category                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UV_GameInstanceWithSave_C::ResetSettingsByCategory(E_SettingCategory Category)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "ResetSettingsByCategory");

	Params::V_GameInstanceWithSave_C_ResetSettingsByCategory Parms{};

	Parms.Category = Category;

	UObject::ProcessEvent(Func, &Parms);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.SaveAfterRetrigerableDelay
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Delay                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UV_GameInstanceWithSave_C::SaveAfterRetrigerableDelay(double Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "SaveAfterRetrigerableDelay");

	Params::V_GameInstanceWithSave_C_SaveAfterRetrigerableDelay Parms{};

	Parms.Delay = Delay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.SaveCheckpoint
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_Checkpoint                    Checkpoints                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UV_GameInstanceWithSave_C::SaveCheckpoint(const struct FS_Checkpoint& Checkpoints)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "SaveCheckpoint");

	Params::V_GameInstanceWithSave_C_SaveCheckpoint Parms{};

	Parms.Checkpoints = std::move(Checkpoints);

	UObject::ProcessEvent(Func, &Parms);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.SaveGame
// (Public, BlueprintCallable, BlueprintEvent)

void UV_GameInstanceWithSave_C::SaveGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "SaveGame");

	UObject::ProcessEvent(Func, nullptr);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.SetCameraInvertX
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_InvertX                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UV_GameInstanceWithSave_C::SetCameraInvertX(bool Param_InvertX)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "SetCameraInvertX");

	Params::V_GameInstanceWithSave_C_SetCameraInvertX Parms{};

	Parms.Param_InvertX = Param_InvertX;

	UObject::ProcessEvent(Func, &Parms);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.SetCameraInvertY
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_InvertY                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UV_GameInstanceWithSave_C::SetCameraInvertY(bool Param_InvertY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "SetCameraInvertY");

	Params::V_GameInstanceWithSave_C_SetCameraInvertY Parms{};

	Parms.Param_InvertY = Param_InvertY;

	UObject::ProcessEvent(Func, &Parms);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.SetInstructionsAlreadyShown
// (Public, BlueprintCallable, BlueprintEvent)

void UV_GameInstanceWithSave_C::SetInstructionsAlreadyShown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "SetInstructionsAlreadyShown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.SetResolutionScale
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_ApplySettingType                      SetType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UV_GameInstanceWithSave_C::SetResolutionScale(double NewValue, E_ApplySettingType SetType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "SetResolutionScale");

	Params::V_GameInstanceWithSave_C_SetResolutionScale Parms{};

	Parms.NewValue = NewValue;
	Parms.SetType = SetType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.ShowResolutionConfirmWidget
// (Public, BlueprintCallable, BlueprintEvent)

void UV_GameInstanceWithSave_C::ShowResolutionConfirmWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "ShowResolutionConfirmWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.Update Float
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Float                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DefaultValue                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  PreviousValue                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_ApplySettingType                      SetType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UV_GameInstanceWithSave_C::Update_Float(double& Float, double NewValue, double DefaultValue, double PreviousValue, E_ApplySettingType SetType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "Update Float");

	Params::V_GameInstanceWithSave_C_Update_Float Parms{};

	Parms.Float = Float;
	Parms.NewValue = NewValue;
	Parms.DefaultValue = DefaultValue;
	Parms.PreviousValue = PreviousValue;
	Parms.SetType = SetType;

	UObject::ProcessEvent(Func, &Parms);

	Float = Parms.Float;
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.UpdateBool
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Bool                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UV_GameInstanceWithSave_C::UpdateBool(bool& Bool, bool NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "UpdateBool");

	Params::V_GameInstanceWithSave_C_UpdateBool Parms{};

	Parms.Bool = Bool;
	Parms.NewValue = NewValue;

	UObject::ProcessEvent(Func, &Parms);

	Bool = Parms.Bool;
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.UpdateBoolSetting
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Identifier                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    Bool                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_ApplySettingType                      Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UV_GameInstanceWithSave_C::UpdateBoolSetting(const class FString& Identifier, bool Bool, E_ApplySettingType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "UpdateBoolSetting");

	Params::V_GameInstanceWithSave_C_UpdateBoolSetting Parms{};

	Parms.Identifier = std::move(Identifier);
	Parms.Bool = Bool;
	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.UpdateFloatSetting
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Setting                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// E_ApplySettingType                      Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UV_GameInstanceWithSave_C::UpdateFloatSetting(double Value, const class FString& Setting, E_ApplySettingType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "UpdateFloatSetting");

	Params::V_GameInstanceWithSave_C_UpdateFloatSetting Parms{};

	Parms.Value = Value;
	Parms.Setting = std::move(Setting);
	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.UpdateFoliageDensity
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Resolutionscale                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UV_GameInstanceWithSave_C::UpdateFoliageDensity(double Resolutionscale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "UpdateFoliageDensity");

	Params::V_GameInstanceWithSave_C_UpdateFoliageDensity Parms{};

	Parms.Resolutionscale = Resolutionscale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.UpdateSetting
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ID                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UV_GameInstanceWithSave_C::UpdateSetting(const class FString& ID, const class FString& NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "UpdateSetting");

	Params::V_GameInstanceWithSave_C_UpdateSetting Parms{};

	Parms.ID = std::move(ID);
	Parms.NewValue = std::move(NewValue);

	UObject::ProcessEvent(Func, &Parms);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.UpdateSettingByIdentifier
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Identifier                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UV_GameInstanceWithSave_C::UpdateSettingByIdentifier(const class FString& Identifier, const class FString& NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "UpdateSettingByIdentifier");

	Params::V_GameInstanceWithSave_C_UpdateSettingByIdentifier Parms{};

	Parms.Identifier = std::move(Identifier);
	Parms.NewValue = std::move(NewValue);

	UObject::ProcessEvent(Func, &Parms);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.UpdateString
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           String                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash)
// class FString                           NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// E_ApplySettingType                      Selection                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UV_GameInstanceWithSave_C::UpdateString(class FString& String, const class FString& NewValue, E_ApplySettingType Selection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "UpdateString");

	Params::V_GameInstanceWithSave_C_UpdateString Parms{};

	Parms.String = std::move(String);
	Parms.NewValue = std::move(NewValue);
	Parms.Selection = Selection;

	UObject::ProcessEvent(Func, &Parms);

	String = std::move(Parms.String);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.UpdateStringSetting
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Identifier                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           NewString                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// E_ApplySettingType                      Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UV_GameInstanceWithSave_C::UpdateStringSetting(const class FString& Identifier, const class FString& NewString, E_ApplySettingType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "UpdateStringSetting");

	Params::V_GameInstanceWithSave_C_UpdateStringSetting Parms{};

	Parms.Identifier = std::move(Identifier);
	Parms.NewString = std::move(NewString);
	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function V_GameInstanceWithSave.V_GameInstanceWithSave_C.UpdateVolume
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USoundClass*                      InSoundClass                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UV_GameInstanceWithSave_C::UpdateVolume(double Value, class USoundClass* InSoundClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("V_GameInstanceWithSave_C", "UpdateVolume");

	Params::V_GameInstanceWithSave_C_UpdateVolume Parms{};

	Parms.Value = Value;
	Parms.InSoundClass = InSoundClass;

	UObject::ProcessEvent(Func, &Parms);
}

}


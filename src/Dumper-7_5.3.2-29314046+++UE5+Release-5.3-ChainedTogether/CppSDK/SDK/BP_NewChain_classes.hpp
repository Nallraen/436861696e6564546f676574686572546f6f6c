#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NewChain

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_NewChain.BP_NewChain_C
// 0x0168 (0x0400 - 0x0298)
class ABP_NewChain_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline__Direction_B0B2DA85417351B55307099263780268; // 0x02A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D72[0x7];                                     // 0x02A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline;                                          // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         JumpTimeline_NewTrack_0_E1248B9F4274B0F1F94CE7B21D09F5B6; // 0x02B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            JumpTimeline__Direction_E1248B9F4274B0F1F94CE7B21D09F5B6; // 0x02BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D73[0x3];                                     // 0x02BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     JumpTimeline;                                      // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         HumanChainLength;                                  // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D74[0x4];                                     // 0x02CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  Player_01;                                         // 0x02D0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class APawn*                                  Player_02;                                         // 0x02D8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<class UStaticMeshComponent*>           Maillons_Array;                                    // 0x02E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	double                                        AngularDamping;                                    // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LinearDamping;                                     // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RepCurrentChainDistance;                           // 0x0300(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            MassCurveHuman;                                    // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        JumpAlpha;                                         // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinChainMass;                                      // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            MassCurveCar;                                      // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            CurrentMassCurve;                                  // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Human;                                             // 0x0330(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_2D75[0x3];                                     // 0x0331(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CarChainLength;                                    // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ChainLength;                                       // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D76[0x4];                                     // 0x033C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        HumanChainMass;                                    // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CarChainMass;                                      // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ChainSpacing;                                      // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           RepTags;                                           // 0x0358(0x0010)(Edit, BlueprintVisible, Net, ExposeOnSpawn)
	double                                        MaxChainMass;                                      // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MiddleRepLocation;                                 // 0x0370(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_CosmeticChain_C*                    CosmeticChain;                                     // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  Puller;                                            // 0x0390(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	double                                        PullForce;                                         // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Bouncing;                                          // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D77[0x7];                                     // 0x03A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FirstTierRepLocation;                              // 0x03A8(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastTierRepLocation;                               // 0x03C0(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TensionScale;                                      // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        RepLocs;                                           // 0x03E0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<class UPrimitiveComponent*>            PenetratedComponents;                              // 0x03F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void AutoDestroyChain();
	void Bounce(const struct FVector& Velocity);
	void ChangeMaillonMasses(double MassInKg, double Param_LinearDamping, double Param_AngularDamping);
	void Check_Chain_Force(double* Distance);
	void CustomEvent();
	void CustomEvent_0();
	void DepenatreAll(ECollisionResponse NewResponse);
	bool DetectPenetration(TArray<class UPrimitiveComponent*>* CompsArray);
	void DissolveChain(double PlayRate, bool PlaySound);
	void ExecuteUbergraph_BP_NewChain(int32 EntryPoint);
	void Get_Cosmetics_Maillons(TArray<class UStaticMeshComponent*>* Maillons);
	void GetAttachedChars(TArray<class AActor*>* AttachedChars);
	void GetCurrentChainDistance(double* CurrentChainDistance);
	void GetSnapTips(bool* SnapTips);
	void GetTension(double* Float);
	void Impulse_Maillons(const struct FVector& Impulse);
	void ImpulseOnMaillons(const struct FVector& Impulse);
	bool IsInDepenetrationMode();
	void Jump(class AActor* Character);
	void JumpTimeline__FinishedFunc();
	void JumpTimeline__UpdateFunc();
	void LightenChain();
	void Link_Players(TArray<class UStaticMeshComponent*>& Maillons);
	void OnRep_Puller();
	void PlaceFirstAndLastMaillon();
	void PullChain(class APawn* Param_Puller);
	void PullOnChain();
	void ReactivateChainCollisionOnFreeComps(TArray<class UPrimitiveComponent*>& Array);
	void Reattach_Cube_Socket_to_Chain(class UPrimitiveComponent* CubeSocket);
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void ReceiveTick(float DeltaSeconds);
	void ReinitAttachment(int32 NewDensity, double NewChainMass, bool Param_Human);
	void RemoveAllComponentsOfClass(TSubclassOf<class UActorComponent> ComponentClass);
	void Resync();
	void ResyncChainTimeline(double Alpha);
	void ResyncDuringTime(double Time);
	void SetAttachedChar(const int32 Param_Index, class AActor* Char);
	void SetMaillonWeight(double NewWeight);
	void SetSnapTips(bool SnapTips);
	void SetTip0Location(const struct FVector& Loc);
	void SetTip1Location(const struct FVector& Loc);
	void SpawnChain(int32 Chain_Length, bool MaillonVisibility, TArray<class UStaticMeshComponent*>* MaillonsMeshes);
	void SyncChainPhysics();
	void Timeline__FinishedFunc();
	void Timeline__UpdateFunc();
	void Update_Maillon_Physic_Settings_by_Distance(double Distance);
	void Update_Max_Mass_Chain();
	void UpdateRepChainLocs(TArray<struct FVector>* Out);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_NewChain_C">();
	}
	static class ABP_NewChain_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_NewChain_C>();
	}
};
static_assert(alignof(ABP_NewChain_C) == 0x000008, "Wrong alignment on ABP_NewChain_C");
static_assert(sizeof(ABP_NewChain_C) == 0x000400, "Wrong size on ABP_NewChain_C");
static_assert(offsetof(ABP_NewChain_C, UberGraphFrame) == 0x000298, "Member 'ABP_NewChain_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_NewChain_C, DefaultSceneRoot) == 0x0002A0, "Member 'ABP_NewChain_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_NewChain_C, Timeline__Direction_B0B2DA85417351B55307099263780268) == 0x0002A8, "Member 'ABP_NewChain_C::Timeline__Direction_B0B2DA85417351B55307099263780268' has a wrong offset!");
static_assert(offsetof(ABP_NewChain_C, Timeline) == 0x0002B0, "Member 'ABP_NewChain_C::Timeline' has a wrong offset!");
static_assert(offsetof(ABP_NewChain_C, JumpTimeline_NewTrack_0_E1248B9F4274B0F1F94CE7B21D09F5B6) == 0x0002B8, "Member 'ABP_NewChain_C::JumpTimeline_NewTrack_0_E1248B9F4274B0F1F94CE7B21D09F5B6' has a wrong offset!");
static_assert(offsetof(ABP_NewChain_C, JumpTimeline__Direction_E1248B9F4274B0F1F94CE7B21D09F5B6) == 0x0002BC, "Member 'ABP_NewChain_C::JumpTimeline__Direction_E1248B9F4274B0F1F94CE7B21D09F5B6' has a wrong offset!");
static_assert(offsetof(ABP_NewChain_C, JumpTimeline) == 0x0002C0, "Member 'ABP_NewChain_C::JumpTimeline' has a wrong offset!");
static_assert(offsetof(ABP_NewChain_C, HumanChainLength) == 0x0002C8, "Member 'ABP_NewChain_C::HumanChainLength' has a wrong offset!");
static_assert(offsetof(ABP_NewChain_C, Player_01) == 0x0002D0, "Member 'ABP_NewChain_C::Player_01' has a wrong offset!");
static_assert(offsetof(ABP_NewChain_C, Player_02) == 0x0002D8, "Member 'ABP_NewChain_C::Player_02' has a wrong offset!");
static_assert(offsetof(ABP_NewChain_C, Maillons_Array) == 0x0002E0, "Member 'ABP_NewChain_C::Maillons_Array' has a wrong offset!");
static_assert(offsetof(ABP_NewChain_C, AngularDamping) == 0x0002F0, "Member 'ABP_NewChain_C::AngularDamping' has a wrong offset!");
static_assert(offsetof(ABP_NewChain_C, LinearDamping) == 0x0002F8, "Member 'ABP_NewChain_C::LinearDamping' has a wrong offset!");
static_assert(offsetof(ABP_NewChain_C, RepCurrentChainDistance) == 0x000300, "Member 'ABP_NewChain_C::RepCurrentChainDistance' has a wrong offset!");
static_assert(offsetof(ABP_NewChain_C, MassCurveHuman) == 0x000308, "Member 'ABP_NewChain_C::MassCurveHuman' has a wrong offset!");
static_assert(offsetof(ABP_NewChain_C, JumpAlpha) == 0x000310, "Member 'ABP_NewChain_C::JumpAlpha' has a wrong offset!");
static_assert(offsetof(ABP_NewChain_C, MinChainMass) == 0x000318, "Member 'ABP_NewChain_C::MinChainMass' has a wrong offset!");
static_assert(offsetof(ABP_NewChain_C, MassCurveCar) == 0x000320, "Member 'ABP_NewChain_C::MassCurveCar' has a wrong offset!");
static_assert(offsetof(ABP_NewChain_C, CurrentMassCurve) == 0x000328, "Member 'ABP_NewChain_C::CurrentMassCurve' has a wrong offset!");
static_assert(offsetof(ABP_NewChain_C, Human) == 0x000330, "Member 'ABP_NewChain_C::Human' has a wrong offset!");
static_assert(offsetof(ABP_NewChain_C, CarChainLength) == 0x000334, "Member 'ABP_NewChain_C::CarChainLength' has a wrong offset!");
static_assert(offsetof(ABP_NewChain_C, ChainLength) == 0x000338, "Member 'ABP_NewChain_C::ChainLength' has a wrong offset!");
static_assert(offsetof(ABP_NewChain_C, HumanChainMass) == 0x000340, "Member 'ABP_NewChain_C::HumanChainMass' has a wrong offset!");
static_assert(offsetof(ABP_NewChain_C, CarChainMass) == 0x000348, "Member 'ABP_NewChain_C::CarChainMass' has a wrong offset!");
static_assert(offsetof(ABP_NewChain_C, ChainSpacing) == 0x000350, "Member 'ABP_NewChain_C::ChainSpacing' has a wrong offset!");
static_assert(offsetof(ABP_NewChain_C, RepTags) == 0x000358, "Member 'ABP_NewChain_C::RepTags' has a wrong offset!");
static_assert(offsetof(ABP_NewChain_C, MaxChainMass) == 0x000368, "Member 'ABP_NewChain_C::MaxChainMass' has a wrong offset!");
static_assert(offsetof(ABP_NewChain_C, MiddleRepLocation) == 0x000370, "Member 'ABP_NewChain_C::MiddleRepLocation' has a wrong offset!");
static_assert(offsetof(ABP_NewChain_C, CosmeticChain) == 0x000388, "Member 'ABP_NewChain_C::CosmeticChain' has a wrong offset!");
static_assert(offsetof(ABP_NewChain_C, Puller) == 0x000390, "Member 'ABP_NewChain_C::Puller' has a wrong offset!");
static_assert(offsetof(ABP_NewChain_C, PullForce) == 0x000398, "Member 'ABP_NewChain_C::PullForce' has a wrong offset!");
static_assert(offsetof(ABP_NewChain_C, Bouncing) == 0x0003A0, "Member 'ABP_NewChain_C::Bouncing' has a wrong offset!");
static_assert(offsetof(ABP_NewChain_C, FirstTierRepLocation) == 0x0003A8, "Member 'ABP_NewChain_C::FirstTierRepLocation' has a wrong offset!");
static_assert(offsetof(ABP_NewChain_C, LastTierRepLocation) == 0x0003C0, "Member 'ABP_NewChain_C::LastTierRepLocation' has a wrong offset!");
static_assert(offsetof(ABP_NewChain_C, TensionScale) == 0x0003D8, "Member 'ABP_NewChain_C::TensionScale' has a wrong offset!");
static_assert(offsetof(ABP_NewChain_C, RepLocs) == 0x0003E0, "Member 'ABP_NewChain_C::RepLocs' has a wrong offset!");
static_assert(offsetof(ABP_NewChain_C, PenetratedComponents) == 0x0003F0, "Member 'ABP_NewChain_C::PenetratedComponents' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Balancier

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Balancier.BP_Balancier_C
// 0x0078 (0x0310 - 0x0298)
class ABP_Balancier_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Right;                                             // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Left;                                              // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          CenterBox;                                         // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UC_TickOptimizer_C*                     C_TickOptimizer;                                   // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UC_VinceSync_C*                         C_VinceSync;                                       // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cylinder;                                          // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cube;                                              // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               BackupRot;                                         // 0x02F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        BalancierAlpha;                                    // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void DetectLeftOrRight(double* RightBalanceOut);
	void ExecuteUbergraph_BP_Balancier(int32 EntryPoint);
	bool IsSomeoneMantling();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Balancier_C">();
	}
	static class ABP_Balancier_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Balancier_C>();
	}
};
static_assert(alignof(ABP_Balancier_C) == 0x000008, "Wrong alignment on ABP_Balancier_C");
static_assert(sizeof(ABP_Balancier_C) == 0x000310, "Wrong size on ABP_Balancier_C");
static_assert(offsetof(ABP_Balancier_C, UberGraphFrame) == 0x000298, "Member 'ABP_Balancier_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Balancier_C, Right) == 0x0002A0, "Member 'ABP_Balancier_C::Right' has a wrong offset!");
static_assert(offsetof(ABP_Balancier_C, Left) == 0x0002A8, "Member 'ABP_Balancier_C::Left' has a wrong offset!");
static_assert(offsetof(ABP_Balancier_C, CenterBox) == 0x0002B0, "Member 'ABP_Balancier_C::CenterBox' has a wrong offset!");
static_assert(offsetof(ABP_Balancier_C, Arrow) == 0x0002B8, "Member 'ABP_Balancier_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_Balancier_C, C_TickOptimizer) == 0x0002C0, "Member 'ABP_Balancier_C::C_TickOptimizer' has a wrong offset!");
static_assert(offsetof(ABP_Balancier_C, C_VinceSync) == 0x0002C8, "Member 'ABP_Balancier_C::C_VinceSync' has a wrong offset!");
static_assert(offsetof(ABP_Balancier_C, Box) == 0x0002D0, "Member 'ABP_Balancier_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_Balancier_C, Cylinder) == 0x0002D8, "Member 'ABP_Balancier_C::Cylinder' has a wrong offset!");
static_assert(offsetof(ABP_Balancier_C, Cube) == 0x0002E0, "Member 'ABP_Balancier_C::Cube' has a wrong offset!");
static_assert(offsetof(ABP_Balancier_C, DefaultSceneRoot) == 0x0002E8, "Member 'ABP_Balancier_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Balancier_C, BackupRot) == 0x0002F0, "Member 'ABP_Balancier_C::BackupRot' has a wrong offset!");
static_assert(offsetof(ABP_Balancier_C, BalancierAlpha) == 0x000308, "Member 'ABP_Balancier_C::BalancierAlpha' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MazeCreator

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "RoomProperties_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass MazeCreator.MazeCreator_C
// 0x01A8 (0x0440 - 0x0298)
class AMazeCreator_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UInstancedStaticMeshComponent*          Walls_ISM_Component;                               // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UInstancedStaticMeshComponent*          Floor_ISM_Component;                               // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Regenerate_;                                       // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enabled_;                                          // 0x02B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Generate_in_Construction_Script_;                  // 0x02BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Remove_UV_Overlaps___Slightly_Slower_;             // 0x02BB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         Maze_Width;                                        // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         Maze_Height;                                       // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_36E3[0x4];                                     // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Wall_Height_Scale;                                 // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Maze_Spacing;                                      // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             Maze_Collision;                                    // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Use_Custom_Maze_Seed_;                             // 0x02D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          End_Seed;                                          // 0x02DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_36E4[0x1];                                     // 0x02DB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Maze_Seed;                                         // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         End_Seed_0;                                        // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          End_;                                              // 0x02E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          End__0;                                            // 0x02E5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_36E5[0x2];                                     // 0x02E6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Maze_Start_Index;                                  // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         Maze_End_Index;                                    // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         End_Min_Dist__Apart;                               // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         End_Max_Dist__Apart;                               // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Generate_Rooms_;                                   // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_36E6[0x3];                                     // 0x02F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRoomProperties                        Room_Properties;                                   // 0x02FC(0x0014)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<struct FVector2D>                      Inner_Wall_Locations;                              // 0x0310(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector2D>                      Corner_Locations;                                  // 0x0320(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector2D>                      Outer_Wall_Locations;                              // 0x0330(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 Visited_Cells;                                     // 0x0340(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 Unvisited_Cells;                                   // 0x0350(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Current_Cell;                                      // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Found_New_Start_;                                  // 0x0364(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36E7[0x3];                                     // 0x0365(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRandomStream                          Random_Stream;                                     // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor)
	struct FRandomStream                          Random_Stream_2;                                   // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor)
	struct FVector                                Maze_Start_Location;                               // 0x0378(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Maze_End_Location;                                 // 0x0390(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Floor_Mesh;                                        // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UStaticMesh*                            Wall_Mesh;                                         // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UStaticMesh*                            Wall_Mesh__For_No_UV_Overlaps_;                    // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UStaticMesh*                            Corner_Mesh;                                       // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<class UMaterialInterface*>             Wall_Material_Elements;                            // 0x03C8(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn)
	TArray<class UMaterialInterface*>             Floor_Material_Elements;                           // 0x03D8(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn)
	FMulticastInlineDelegateProperty_             Maze_Start_Begin_Overlap;                          // 0x03E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             Maze_Start_End_Overlap;                            // 0x03F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             Maze_End_Begin_Overlap;                            // 0x0408(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             Maze_End_End_Overlap;                              // 0x0418(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class UMaterialInterface*>             Corner_Material_Elements;                          // 0x0428(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn)
	class UInstancedStaticMeshComponent*          Corners_ISM_Component;                             // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void Add_Floor();
	void Corner_is_Inside_Maze_(const struct FVector2D& Corner_Location, bool* Return_Value);
	void ExecuteUbergraph_MazeCreator(int32 EntryPoint);
	void Generate_Maze();
	void Get_Adjacent_Unvisited_Cells(int32 Cell_Index, TArray<int32>* Adjacent_Cell_Indices, bool* Return_Value);
	void Get_Adjacent_Visited_Cells(int32 Cell_Index, TArray<int32>* Adjacent_Cell_Indices, bool* Return_Value);
	void Get_Cell_Index(int32 X, int32 Y, int32* Param_Index);
	void Get_Cell_Location(int32 Cell, struct FVector* Location);
	void Get_Cell_X___Y(int32 Param_Index, int32* X, int32* Y);
	void Get_Dist__Between_Edge_Indices(int32 A, int32 B, int32* Distance_Between_Indices);
	void Get_Indices_to_Create_Room(int32 Room_Bottom_Corner, int32 Room_Width, int32 Room_Height, TArray<int32>* Cell_Indices, int32* Old_Cell, int32* Old_Width, int32* Old_Height);
	void End_Locations(int32* Start_Index, int32* End_Index);
	void Get_Total_Outer_Edges(int32* Return_Value);
	void Initialize_Variables();
	void Maze_End_Begin_Overlap__DelegateSignature(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void Maze_End_End_Overlap__DelegateSignature(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void Maze_Start_Begin_Overlap__DelegateSignature(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void Maze_Start_End_Overlap__DelegateSignature(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnMazeEndBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnMazeEndEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnMazeStartBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnMazeStartEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void ReceiveBeginPlay();
	void Rectangle_Edge_is_Vertical_(int32 Param_Index, int32 Width, int32 Height, bool* Is_Vertical_, int32* Index_Relative_To_Side);
	void Remove_Adjacent_Orphaned_Corners(const struct FVector2D& Origin);
	void Remove_Corner_Pieces_in_Range(int32 Lower_Index, int32 Range_Width, int32 Range_Height, TArray<struct FVector2D>* Removed_Corners);
	void Remove_Old_Maze();
	void Set_Current_Cell(int32 Value);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MazeCreator_C">();
	}
	static class AMazeCreator_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMazeCreator_C>();
	}
};
static_assert(alignof(AMazeCreator_C) == 0x000008, "Wrong alignment on AMazeCreator_C");
static_assert(sizeof(AMazeCreator_C) == 0x000440, "Wrong size on AMazeCreator_C");
static_assert(offsetof(AMazeCreator_C, UberGraphFrame) == 0x000298, "Member 'AMazeCreator_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, DefaultSceneRoot) == 0x0002A0, "Member 'AMazeCreator_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, Walls_ISM_Component) == 0x0002A8, "Member 'AMazeCreator_C::Walls_ISM_Component' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, Floor_ISM_Component) == 0x0002B0, "Member 'AMazeCreator_C::Floor_ISM_Component' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, Regenerate_) == 0x0002B8, "Member 'AMazeCreator_C::Regenerate_' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, Enabled_) == 0x0002B9, "Member 'AMazeCreator_C::Enabled_' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, Generate_in_Construction_Script_) == 0x0002BA, "Member 'AMazeCreator_C::Generate_in_Construction_Script_' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, Remove_UV_Overlaps___Slightly_Slower_) == 0x0002BB, "Member 'AMazeCreator_C::Remove_UV_Overlaps___Slightly_Slower_' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, Maze_Width) == 0x0002BC, "Member 'AMazeCreator_C::Maze_Width' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, Maze_Height) == 0x0002C0, "Member 'AMazeCreator_C::Maze_Height' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, Wall_Height_Scale) == 0x0002C8, "Member 'AMazeCreator_C::Wall_Height_Scale' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, Maze_Spacing) == 0x0002D0, "Member 'AMazeCreator_C::Maze_Spacing' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, Maze_Collision) == 0x0002D8, "Member 'AMazeCreator_C::Maze_Collision' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, Use_Custom_Maze_Seed_) == 0x0002D9, "Member 'AMazeCreator_C::Use_Custom_Maze_Seed_' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, End_Seed) == 0x0002DA, "Member 'AMazeCreator_C::End_Seed' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, Maze_Seed) == 0x0002DC, "Member 'AMazeCreator_C::Maze_Seed' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, End_Seed_0) == 0x0002E0, "Member 'AMazeCreator_C::End_Seed_0' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, End_) == 0x0002E4, "Member 'AMazeCreator_C::End_' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, End__0) == 0x0002E5, "Member 'AMazeCreator_C::End__0' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, Maze_Start_Index) == 0x0002E8, "Member 'AMazeCreator_C::Maze_Start_Index' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, Maze_End_Index) == 0x0002EC, "Member 'AMazeCreator_C::Maze_End_Index' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, End_Min_Dist__Apart) == 0x0002F0, "Member 'AMazeCreator_C::End_Min_Dist__Apart' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, End_Max_Dist__Apart) == 0x0002F4, "Member 'AMazeCreator_C::End_Max_Dist__Apart' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, Generate_Rooms_) == 0x0002F8, "Member 'AMazeCreator_C::Generate_Rooms_' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, Room_Properties) == 0x0002FC, "Member 'AMazeCreator_C::Room_Properties' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, Inner_Wall_Locations) == 0x000310, "Member 'AMazeCreator_C::Inner_Wall_Locations' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, Corner_Locations) == 0x000320, "Member 'AMazeCreator_C::Corner_Locations' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, Outer_Wall_Locations) == 0x000330, "Member 'AMazeCreator_C::Outer_Wall_Locations' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, Visited_Cells) == 0x000340, "Member 'AMazeCreator_C::Visited_Cells' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, Unvisited_Cells) == 0x000350, "Member 'AMazeCreator_C::Unvisited_Cells' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, Current_Cell) == 0x000360, "Member 'AMazeCreator_C::Current_Cell' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, Found_New_Start_) == 0x000364, "Member 'AMazeCreator_C::Found_New_Start_' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, Random_Stream) == 0x000368, "Member 'AMazeCreator_C::Random_Stream' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, Random_Stream_2) == 0x000370, "Member 'AMazeCreator_C::Random_Stream_2' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, Maze_Start_Location) == 0x000378, "Member 'AMazeCreator_C::Maze_Start_Location' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, Maze_End_Location) == 0x000390, "Member 'AMazeCreator_C::Maze_End_Location' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, Floor_Mesh) == 0x0003A8, "Member 'AMazeCreator_C::Floor_Mesh' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, Wall_Mesh) == 0x0003B0, "Member 'AMazeCreator_C::Wall_Mesh' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, Wall_Mesh__For_No_UV_Overlaps_) == 0x0003B8, "Member 'AMazeCreator_C::Wall_Mesh__For_No_UV_Overlaps_' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, Corner_Mesh) == 0x0003C0, "Member 'AMazeCreator_C::Corner_Mesh' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, Wall_Material_Elements) == 0x0003C8, "Member 'AMazeCreator_C::Wall_Material_Elements' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, Floor_Material_Elements) == 0x0003D8, "Member 'AMazeCreator_C::Floor_Material_Elements' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, Maze_Start_Begin_Overlap) == 0x0003E8, "Member 'AMazeCreator_C::Maze_Start_Begin_Overlap' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, Maze_Start_End_Overlap) == 0x0003F8, "Member 'AMazeCreator_C::Maze_Start_End_Overlap' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, Maze_End_Begin_Overlap) == 0x000408, "Member 'AMazeCreator_C::Maze_End_Begin_Overlap' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, Maze_End_End_Overlap) == 0x000418, "Member 'AMazeCreator_C::Maze_End_End_Overlap' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, Corner_Material_Elements) == 0x000428, "Member 'AMazeCreator_C::Corner_Material_Elements' has a wrong offset!");
static_assert(offsetof(AMazeCreator_C, Corners_ISM_Component) == 0x000438, "Member 'AMazeCreator_C::Corners_ISM_Component' has a wrong offset!");

}


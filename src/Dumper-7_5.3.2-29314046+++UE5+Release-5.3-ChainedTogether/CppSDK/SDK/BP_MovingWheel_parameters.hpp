#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MovingWheel

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_MovingWheel.BP_MovingWheel_C.ExecuteUbergraph_BP_MovingWheel
// 0x0280 (0x0280 - 0x0000)
struct BP_MovingWheel_C_ExecuteUbergraph_BP_MovingWheel final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPlaybackPosition_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A97[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x000C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A98[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A99[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0058(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_GetPhysicsLinearVelocity_ReturnValue;     // 0x0140(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0170(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_AddLocalRotation_SweepHitResult;       // 0x0188(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	double                                        CallFunc_Multiply_DoubleDouble_B_ImplicitCast;     // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetPlayRate_NewRate_ImplicitCast;         // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x027C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MovingWheel_C_ExecuteUbergraph_BP_MovingWheel) == 0x000008, "Wrong alignment on BP_MovingWheel_C_ExecuteUbergraph_BP_MovingWheel");
static_assert(sizeof(BP_MovingWheel_C_ExecuteUbergraph_BP_MovingWheel) == 0x000280, "Wrong size on BP_MovingWheel_C_ExecuteUbergraph_BP_MovingWheel");
static_assert(offsetof(BP_MovingWheel_C_ExecuteUbergraph_BP_MovingWheel, EntryPoint) == 0x000000, "Member 'BP_MovingWheel_C_ExecuteUbergraph_BP_MovingWheel::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_MovingWheel_C_ExecuteUbergraph_BP_MovingWheel, CallFunc_GetPlaybackPosition_ReturnValue) == 0x000004, "Member 'BP_MovingWheel_C_ExecuteUbergraph_BP_MovingWheel::CallFunc_GetPlaybackPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MovingWheel_C_ExecuteUbergraph_BP_MovingWheel, CallFunc_HasAuthority_ReturnValue) == 0x000008, "Member 'BP_MovingWheel_C_ExecuteUbergraph_BP_MovingWheel::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MovingWheel_C_ExecuteUbergraph_BP_MovingWheel, K2Node_CreateDelegate_OutputDelegate) == 0x00000C, "Member 'BP_MovingWheel_C_ExecuteUbergraph_BP_MovingWheel::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_MovingWheel_C_ExecuteUbergraph_BP_MovingWheel, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000020, "Member 'BP_MovingWheel_C_ExecuteUbergraph_BP_MovingWheel::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MovingWheel_C_ExecuteUbergraph_BP_MovingWheel, K2Node_Event_DeltaSeconds) == 0x000028, "Member 'BP_MovingWheel_C_ExecuteUbergraph_BP_MovingWheel::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_MovingWheel_C_ExecuteUbergraph_BP_MovingWheel, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000030, "Member 'BP_MovingWheel_C_ExecuteUbergraph_BP_MovingWheel::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MovingWheel_C_ExecuteUbergraph_BP_MovingWheel, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000038, "Member 'BP_MovingWheel_C_ExecuteUbergraph_BP_MovingWheel::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MovingWheel_C_ExecuteUbergraph_BP_MovingWheel, CallFunc_VLerp_ReturnValue) == 0x000040, "Member 'BP_MovingWheel_C_ExecuteUbergraph_BP_MovingWheel::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MovingWheel_C_ExecuteUbergraph_BP_MovingWheel, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000058, "Member 'BP_MovingWheel_C_ExecuteUbergraph_BP_MovingWheel::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_MovingWheel_C_ExecuteUbergraph_BP_MovingWheel, CallFunc_GetPhysicsLinearVelocity_ReturnValue) == 0x000140, "Member 'BP_MovingWheel_C_ExecuteUbergraph_BP_MovingWheel::CallFunc_GetPhysicsLinearVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MovingWheel_C_ExecuteUbergraph_BP_MovingWheel, CallFunc_VSize_ReturnValue) == 0x000158, "Member 'BP_MovingWheel_C_ExecuteUbergraph_BP_MovingWheel::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MovingWheel_C_ExecuteUbergraph_BP_MovingWheel, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000160, "Member 'BP_MovingWheel_C_ExecuteUbergraph_BP_MovingWheel::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MovingWheel_C_ExecuteUbergraph_BP_MovingWheel, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000168, "Member 'BP_MovingWheel_C_ExecuteUbergraph_BP_MovingWheel::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MovingWheel_C_ExecuteUbergraph_BP_MovingWheel, CallFunc_MakeRotator_ReturnValue) == 0x000170, "Member 'BP_MovingWheel_C_ExecuteUbergraph_BP_MovingWheel::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MovingWheel_C_ExecuteUbergraph_BP_MovingWheel, CallFunc_K2_AddLocalRotation_SweepHitResult) == 0x000188, "Member 'BP_MovingWheel_C_ExecuteUbergraph_BP_MovingWheel::CallFunc_K2_AddLocalRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_MovingWheel_C_ExecuteUbergraph_BP_MovingWheel, CallFunc_Multiply_DoubleDouble_B_ImplicitCast) == 0x000270, "Member 'BP_MovingWheel_C_ExecuteUbergraph_BP_MovingWheel::CallFunc_Multiply_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_MovingWheel_C_ExecuteUbergraph_BP_MovingWheel, CallFunc_SetPlayRate_NewRate_ImplicitCast) == 0x000278, "Member 'BP_MovingWheel_C_ExecuteUbergraph_BP_MovingWheel::CallFunc_SetPlayRate_NewRate_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_MovingWheel_C_ExecuteUbergraph_BP_MovingWheel, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x00027C, "Member 'BP_MovingWheel_C_ExecuteUbergraph_BP_MovingWheel::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");

// Function BP_MovingWheel.BP_MovingWheel_C.OnRep_NewVar
// 0x0001 (0x0001 - 0x0000)
struct BP_MovingWheel_C_OnRep_NewVar final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MovingWheel_C_OnRep_NewVar) == 0x000001, "Wrong alignment on BP_MovingWheel_C_OnRep_NewVar");
static_assert(sizeof(BP_MovingWheel_C_OnRep_NewVar) == 0x000001, "Wrong size on BP_MovingWheel_C_OnRep_NewVar");
static_assert(offsetof(BP_MovingWheel_C_OnRep_NewVar, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'BP_MovingWheel_C_OnRep_NewVar::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");

// Function BP_MovingWheel.BP_MovingWheel_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_MovingWheel_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MovingWheel_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_MovingWheel_C_ReceiveTick");
static_assert(sizeof(BP_MovingWheel_C_ReceiveTick) == 0x000004, "Wrong size on BP_MovingWheel_C_ReceiveTick");
static_assert(offsetof(BP_MovingWheel_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_MovingWheel_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_GameInstance

#include "Basic.hpp"

#include "BPI_GameInstance_classes.hpp"
#include "BPI_GameInstance_parameters.hpp"


namespace SDK
{

// Function BPI_GameInstance.BPI_GameInstance_C.GetCollectedWings
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           Wings                                                  (Parm, OutParm)

void IBPI_GameInstance_C::GetCollectedWings(TArray<int32>* Wings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameInstance_C", "GetCollectedWings");

	Params::BPI_GameInstance_C_GetCollectedWings Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Wings != nullptr)
		*Wings = std::move(Parms.Wings);
}


// Function BPI_GameInstance.BPI_GameInstance_C.GetDevMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    DevMode                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameInstance_C::GetDevMode(bool* DevMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameInstance_C", "GetDevMode");

	Params::BPI_GameInstance_C_GetDevMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DevMode != nullptr)
		*DevMode = Parms.DevMode;
}


// Function BPI_GameInstance.BPI_GameInstance_C.GetGameAlreadyLaunched
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool IBPI_GameInstance_C::GetGameAlreadyLaunched()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameInstance_C", "GetGameAlreadyLaunched");

	Params::BPI_GameInstance_C_GetGameAlreadyLaunched Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BPI_GameInstance.BPI_GameInstance_C.GetInputLagMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool IBPI_GameInstance_C::GetInputLagMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameInstance_C", "GetInputLagMode");

	Params::BPI_GameInstance_C_GetInputLagMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BPI_GameInstance.BPI_GameInstance_C.GetInstructionsAlreadyShown
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Shown                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameInstance_C::GetInstructionsAlreadyShown(bool* Shown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameInstance_C", "GetInstructionsAlreadyShown");

	Params::BPI_GameInstance_C_GetInstructionsAlreadyShown Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Shown != nullptr)
		*Shown = Parms.Shown;
}


// Function BPI_GameInstance.BPI_GameInstance_C.GetLevelStreamingEnabled
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameInstance_C::GetLevelStreamingEnabled(bool* Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameInstance_C", "GetLevelStreamingEnabled");

	Params::BPI_GameInstance_C_GetLevelStreamingEnabled Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Enabled != nullptr)
		*Enabled = Parms.Enabled;
}


// Function BPI_GameInstance.BPI_GameInstance_C.GetLocalMultiplayerMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool IBPI_GameInstance_C::GetLocalMultiplayerMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameInstance_C", "GetLocalMultiplayerMode");

	Params::BPI_GameInstance_C_GetLocalMultiplayerMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BPI_GameInstance.BPI_GameInstance_C.GetPlayersInSession
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PlayersInSession                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameInstance_C::GetPlayersInSession(int32* PlayersInSession)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameInstance_C", "GetPlayersInSession");

	Params::BPI_GameInstance_C_GetPlayersInSession Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayersInSession != nullptr)
		*PlayersInSession = Parms.PlayersInSession;
}


// Function BPI_GameInstance.BPI_GameInstance_C.GetTrueChainVisible
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameInstance_C::GetTrueChainVisible(bool* Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameInstance_C", "GetTrueChainVisible");

	Params::BPI_GameInstance_C_GetTrueChainVisible Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Visible != nullptr)
		*Visible = Parms.Visible;
}


// Function BPI_GameInstance.BPI_GameInstance_C.SetCollectedWing
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WingIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameInstance_C::SetCollectedWing(int32 WingIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameInstance_C", "SetCollectedWing");

	Params::BPI_GameInstance_C_SetCollectedWing Parms{};

	Parms.WingIndex = WingIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameInstance.BPI_GameInstance_C.SetGameAlreadyLaunched
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameInstance_C::SetGameAlreadyLaunched()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameInstance_C", "SetGameAlreadyLaunched");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameInstance.BPI_GameInstance_C.SetPlayersInSession
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Count                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameInstance_C::SetPlayersInSession(int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameInstance_C", "SetPlayersInSession");

	Params::BPI_GameInstance_C_SetPlayersInSession Parms{};

	Parms.Count = Count;

	UObject::ProcessEvent(Func, &Parms);
}

}


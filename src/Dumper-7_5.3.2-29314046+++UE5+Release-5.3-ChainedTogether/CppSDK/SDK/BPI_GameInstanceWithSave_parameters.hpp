#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_GameInstanceWithSave

#include "Basic.hpp"

#include "S_Checkpoint_structs.hpp"
#include "E_ApplySettingType_structs.hpp"


namespace SDK::Params
{

// Function BPI_GameInstanceWithSave.BPI_GameInstanceWithSave_C.GetCameraSettings
// 0x0018 (0x0018 - 0x0000)
struct BPI_GameInstanceWithSave_C_GetCameraSettings final
{
public:
	bool                                          InvertX;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InvertY;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C0[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        X_Sensitivity;                                     // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Y_Sensitivity;                                     // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameInstanceWithSave_C_GetCameraSettings) == 0x000008, "Wrong alignment on BPI_GameInstanceWithSave_C_GetCameraSettings");
static_assert(sizeof(BPI_GameInstanceWithSave_C_GetCameraSettings) == 0x000018, "Wrong size on BPI_GameInstanceWithSave_C_GetCameraSettings");
static_assert(offsetof(BPI_GameInstanceWithSave_C_GetCameraSettings, InvertX) == 0x000000, "Member 'BPI_GameInstanceWithSave_C_GetCameraSettings::InvertX' has a wrong offset!");
static_assert(offsetof(BPI_GameInstanceWithSave_C_GetCameraSettings, InvertY) == 0x000001, "Member 'BPI_GameInstanceWithSave_C_GetCameraSettings::InvertY' has a wrong offset!");
static_assert(offsetof(BPI_GameInstanceWithSave_C_GetCameraSettings, X_Sensitivity) == 0x000008, "Member 'BPI_GameInstanceWithSave_C_GetCameraSettings::X_Sensitivity' has a wrong offset!");
static_assert(offsetof(BPI_GameInstanceWithSave_C_GetCameraSettings, Y_Sensitivity) == 0x000010, "Member 'BPI_GameInstanceWithSave_C_GetCameraSettings::Y_Sensitivity' has a wrong offset!");

// Function BPI_GameInstanceWithSave.BPI_GameInstanceWithSave_C.GetCheckpoints
// 0x0010 (0x0010 - 0x0000)
struct BPI_GameInstanceWithSave_C_GetCheckpoints final
{
public:
	TArray<struct FS_Checkpoint>                  Checkpoints;                                       // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(BPI_GameInstanceWithSave_C_GetCheckpoints) == 0x000008, "Wrong alignment on BPI_GameInstanceWithSave_C_GetCheckpoints");
static_assert(sizeof(BPI_GameInstanceWithSave_C_GetCheckpoints) == 0x000010, "Wrong size on BPI_GameInstanceWithSave_C_GetCheckpoints");
static_assert(offsetof(BPI_GameInstanceWithSave_C_GetCheckpoints, Checkpoints) == 0x000000, "Member 'BPI_GameInstanceWithSave_C_GetCheckpoints::Checkpoints' has a wrong offset!");

// Function BPI_GameInstanceWithSave.BPI_GameInstanceWithSave_C.GetPushToTalk
// 0x0001 (0x0001 - 0x0000)
struct BPI_GameInstanceWithSave_C_GetPushToTalk final
{
public:
	bool                                          PTT;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameInstanceWithSave_C_GetPushToTalk) == 0x000001, "Wrong alignment on BPI_GameInstanceWithSave_C_GetPushToTalk");
static_assert(sizeof(BPI_GameInstanceWithSave_C_GetPushToTalk) == 0x000001, "Wrong size on BPI_GameInstanceWithSave_C_GetPushToTalk");
static_assert(offsetof(BPI_GameInstanceWithSave_C_GetPushToTalk, PTT) == 0x000000, "Member 'BPI_GameInstanceWithSave_C_GetPushToTalk::PTT' has a wrong offset!");

// Function BPI_GameInstanceWithSave.BPI_GameInstanceWithSave_C.GetSaveGameObject
// 0x0008 (0x0008 - 0x0000)
struct BPI_GameInstanceWithSave_C_GetSaveGameObject final
{
public:
	class UV_SaveGame_C*                          Param_SaveGame;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameInstanceWithSave_C_GetSaveGameObject) == 0x000008, "Wrong alignment on BPI_GameInstanceWithSave_C_GetSaveGameObject");
static_assert(sizeof(BPI_GameInstanceWithSave_C_GetSaveGameObject) == 0x000008, "Wrong size on BPI_GameInstanceWithSave_C_GetSaveGameObject");
static_assert(offsetof(BPI_GameInstanceWithSave_C_GetSaveGameObject, Param_SaveGame) == 0x000000, "Member 'BPI_GameInstanceWithSave_C_GetSaveGameObject::Param_SaveGame' has a wrong offset!");

// Function BPI_GameInstanceWithSave.BPI_GameInstanceWithSave_C.GetShowDebug
// 0x0001 (0x0001 - 0x0000)
struct BPI_GameInstanceWithSave_C_GetShowDebug final
{
public:
	bool                                          Debug;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameInstanceWithSave_C_GetShowDebug) == 0x000001, "Wrong alignment on BPI_GameInstanceWithSave_C_GetShowDebug");
static_assert(sizeof(BPI_GameInstanceWithSave_C_GetShowDebug) == 0x000001, "Wrong size on BPI_GameInstanceWithSave_C_GetShowDebug");
static_assert(offsetof(BPI_GameInstanceWithSave_C_GetShowDebug, Debug) == 0x000000, "Member 'BPI_GameInstanceWithSave_C_GetShowDebug::Debug' has a wrong offset!");

// Function BPI_GameInstanceWithSave.BPI_GameInstanceWithSave_C.GetTestControl
// 0x0001 (0x0001 - 0x0000)
struct BPI_GameInstanceWithSave_C_GetTestControl final
{
public:
	bool                                          TestControl;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameInstanceWithSave_C_GetTestControl) == 0x000001, "Wrong alignment on BPI_GameInstanceWithSave_C_GetTestControl");
static_assert(sizeof(BPI_GameInstanceWithSave_C_GetTestControl) == 0x000001, "Wrong size on BPI_GameInstanceWithSave_C_GetTestControl");
static_assert(offsetof(BPI_GameInstanceWithSave_C_GetTestControl, TestControl) == 0x000000, "Member 'BPI_GameInstanceWithSave_C_GetTestControl::TestControl' has a wrong offset!");

// Function BPI_GameInstanceWithSave.BPI_GameInstanceWithSave_C.GetTestPlayers
// 0x0004 (0x0004 - 0x0000)
struct BPI_GameInstanceWithSave_C_GetTestPlayers final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameInstanceWithSave_C_GetTestPlayers) == 0x000004, "Wrong alignment on BPI_GameInstanceWithSave_C_GetTestPlayers");
static_assert(sizeof(BPI_GameInstanceWithSave_C_GetTestPlayers) == 0x000004, "Wrong size on BPI_GameInstanceWithSave_C_GetTestPlayers");
static_assert(offsetof(BPI_GameInstanceWithSave_C_GetTestPlayers, Count) == 0x000000, "Member 'BPI_GameInstanceWithSave_C_GetTestPlayers::Count' has a wrong offset!");

// Function BPI_GameInstanceWithSave.BPI_GameInstanceWithSave_C.SaveAfterRetrigerableDelay
// 0x0008 (0x0008 - 0x0000)
struct BPI_GameInstanceWithSave_C_SaveAfterRetrigerableDelay final
{
public:
	double                                        Delay;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameInstanceWithSave_C_SaveAfterRetrigerableDelay) == 0x000008, "Wrong alignment on BPI_GameInstanceWithSave_C_SaveAfterRetrigerableDelay");
static_assert(sizeof(BPI_GameInstanceWithSave_C_SaveAfterRetrigerableDelay) == 0x000008, "Wrong size on BPI_GameInstanceWithSave_C_SaveAfterRetrigerableDelay");
static_assert(offsetof(BPI_GameInstanceWithSave_C_SaveAfterRetrigerableDelay, Delay) == 0x000000, "Member 'BPI_GameInstanceWithSave_C_SaveAfterRetrigerableDelay::Delay' has a wrong offset!");

// Function BPI_GameInstanceWithSave.BPI_GameInstanceWithSave_C.SaveCheckpoint
// 0x0018 (0x0018 - 0x0000)
struct BPI_GameInstanceWithSave_C_SaveCheckpoint final
{
public:
	struct FS_Checkpoint                          Checkpoints;                                       // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameInstanceWithSave_C_SaveCheckpoint) == 0x000008, "Wrong alignment on BPI_GameInstanceWithSave_C_SaveCheckpoint");
static_assert(sizeof(BPI_GameInstanceWithSave_C_SaveCheckpoint) == 0x000018, "Wrong size on BPI_GameInstanceWithSave_C_SaveCheckpoint");
static_assert(offsetof(BPI_GameInstanceWithSave_C_SaveCheckpoint, Checkpoints) == 0x000000, "Member 'BPI_GameInstanceWithSave_C_SaveCheckpoint::Checkpoints' has a wrong offset!");

// Function BPI_GameInstanceWithSave.BPI_GameInstanceWithSave_C.SetCameraInvertX
// 0x0001 (0x0001 - 0x0000)
struct BPI_GameInstanceWithSave_C_SetCameraInvertX final
{
public:
	bool                                          InvertX;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameInstanceWithSave_C_SetCameraInvertX) == 0x000001, "Wrong alignment on BPI_GameInstanceWithSave_C_SetCameraInvertX");
static_assert(sizeof(BPI_GameInstanceWithSave_C_SetCameraInvertX) == 0x000001, "Wrong size on BPI_GameInstanceWithSave_C_SetCameraInvertX");
static_assert(offsetof(BPI_GameInstanceWithSave_C_SetCameraInvertX, InvertX) == 0x000000, "Member 'BPI_GameInstanceWithSave_C_SetCameraInvertX::InvertX' has a wrong offset!");

// Function BPI_GameInstanceWithSave.BPI_GameInstanceWithSave_C.SetCameraInvertY
// 0x0001 (0x0001 - 0x0000)
struct BPI_GameInstanceWithSave_C_SetCameraInvertY final
{
public:
	bool                                          InvertY;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameInstanceWithSave_C_SetCameraInvertY) == 0x000001, "Wrong alignment on BPI_GameInstanceWithSave_C_SetCameraInvertY");
static_assert(sizeof(BPI_GameInstanceWithSave_C_SetCameraInvertY) == 0x000001, "Wrong size on BPI_GameInstanceWithSave_C_SetCameraInvertY");
static_assert(offsetof(BPI_GameInstanceWithSave_C_SetCameraInvertY, InvertY) == 0x000000, "Member 'BPI_GameInstanceWithSave_C_SetCameraInvertY::InvertY' has a wrong offset!");

// Function BPI_GameInstanceWithSave.BPI_GameInstanceWithSave_C.UpdateBoolSetting
// 0x0018 (0x0018 - 0x0000)
struct BPI_GameInstanceWithSave_C_UpdateBoolSetting final
{
public:
	class FString                                 Identifier;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Bool;                                              // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ApplySettingType                            Type;                                              // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameInstanceWithSave_C_UpdateBoolSetting) == 0x000008, "Wrong alignment on BPI_GameInstanceWithSave_C_UpdateBoolSetting");
static_assert(sizeof(BPI_GameInstanceWithSave_C_UpdateBoolSetting) == 0x000018, "Wrong size on BPI_GameInstanceWithSave_C_UpdateBoolSetting");
static_assert(offsetof(BPI_GameInstanceWithSave_C_UpdateBoolSetting, Identifier) == 0x000000, "Member 'BPI_GameInstanceWithSave_C_UpdateBoolSetting::Identifier' has a wrong offset!");
static_assert(offsetof(BPI_GameInstanceWithSave_C_UpdateBoolSetting, Bool) == 0x000010, "Member 'BPI_GameInstanceWithSave_C_UpdateBoolSetting::Bool' has a wrong offset!");
static_assert(offsetof(BPI_GameInstanceWithSave_C_UpdateBoolSetting, Type) == 0x000011, "Member 'BPI_GameInstanceWithSave_C_UpdateBoolSetting::Type' has a wrong offset!");

// Function BPI_GameInstanceWithSave.BPI_GameInstanceWithSave_C.UpdateFloatSetting
// 0x0020 (0x0020 - 0x0000)
struct BPI_GameInstanceWithSave_C_UpdateFloatSetting final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Setting;                                           // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	E_ApplySettingType                            Type;                                              // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameInstanceWithSave_C_UpdateFloatSetting) == 0x000008, "Wrong alignment on BPI_GameInstanceWithSave_C_UpdateFloatSetting");
static_assert(sizeof(BPI_GameInstanceWithSave_C_UpdateFloatSetting) == 0x000020, "Wrong size on BPI_GameInstanceWithSave_C_UpdateFloatSetting");
static_assert(offsetof(BPI_GameInstanceWithSave_C_UpdateFloatSetting, Value) == 0x000000, "Member 'BPI_GameInstanceWithSave_C_UpdateFloatSetting::Value' has a wrong offset!");
static_assert(offsetof(BPI_GameInstanceWithSave_C_UpdateFloatSetting, Setting) == 0x000008, "Member 'BPI_GameInstanceWithSave_C_UpdateFloatSetting::Setting' has a wrong offset!");
static_assert(offsetof(BPI_GameInstanceWithSave_C_UpdateFloatSetting, Type) == 0x000018, "Member 'BPI_GameInstanceWithSave_C_UpdateFloatSetting::Type' has a wrong offset!");

// Function BPI_GameInstanceWithSave.BPI_GameInstanceWithSave_C.UpdateSetting
// 0x0020 (0x0020 - 0x0000)
struct BPI_GameInstanceWithSave_C_UpdateSetting final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 NewValue;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameInstanceWithSave_C_UpdateSetting) == 0x000008, "Wrong alignment on BPI_GameInstanceWithSave_C_UpdateSetting");
static_assert(sizeof(BPI_GameInstanceWithSave_C_UpdateSetting) == 0x000020, "Wrong size on BPI_GameInstanceWithSave_C_UpdateSetting");
static_assert(offsetof(BPI_GameInstanceWithSave_C_UpdateSetting, ID) == 0x000000, "Member 'BPI_GameInstanceWithSave_C_UpdateSetting::ID' has a wrong offset!");
static_assert(offsetof(BPI_GameInstanceWithSave_C_UpdateSetting, NewValue) == 0x000010, "Member 'BPI_GameInstanceWithSave_C_UpdateSetting::NewValue' has a wrong offset!");

// Function BPI_GameInstanceWithSave.BPI_GameInstanceWithSave_C.UpdateStringSetting
// 0x0028 (0x0028 - 0x0000)
struct BPI_GameInstanceWithSave_C_UpdateStringSetting final
{
public:
	class FString                                 Identifier;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 NewString;                                         // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	E_ApplySettingType                            Type;                                              // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameInstanceWithSave_C_UpdateStringSetting) == 0x000008, "Wrong alignment on BPI_GameInstanceWithSave_C_UpdateStringSetting");
static_assert(sizeof(BPI_GameInstanceWithSave_C_UpdateStringSetting) == 0x000028, "Wrong size on BPI_GameInstanceWithSave_C_UpdateStringSetting");
static_assert(offsetof(BPI_GameInstanceWithSave_C_UpdateStringSetting, Identifier) == 0x000000, "Member 'BPI_GameInstanceWithSave_C_UpdateStringSetting::Identifier' has a wrong offset!");
static_assert(offsetof(BPI_GameInstanceWithSave_C_UpdateStringSetting, NewString) == 0x000010, "Member 'BPI_GameInstanceWithSave_C_UpdateStringSetting::NewString' has a wrong offset!");
static_assert(offsetof(BPI_GameInstanceWithSave_C_UpdateStringSetting, Type) == 0x000020, "Member 'BPI_GameInstanceWithSave_C_UpdateStringSetting::Type' has a wrong offset!");

}

